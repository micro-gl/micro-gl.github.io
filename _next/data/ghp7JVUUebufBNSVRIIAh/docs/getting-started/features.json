{"pageProps":{"data":{"slug":"getting-started/features","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Language\"), \" \", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"c++11\"), \", does not use any \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"STL\"), \" library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"99% mostly headers only lib\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"most functions are templates, which means you compile only what is used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"compile-time polymorphism (no runtime virtual methods)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support for 32 bits and 64 bits\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Graphics\"), \" \", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"very modular design. if something does not exist, you can implement your own\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"over 10 blending modes impemented, you can wrote your own and supply as well\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"porter-duff\"), \" alpha compositing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support for 2d sampler\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can support any pixel coding you need, we implemeted a lot out of the box\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can render 3d geometries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"we support 3d shaders\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no need for GPU, it is all CPU\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no need for FPU\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support for any number system including \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Q\"), \" numbers (fixed point), no need to use float points\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Geometry\"), \" \", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fast implementation for common shapes (rect, rounded rectangles, circles, triangles)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"batch traingles like GPU would\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support polygons of any type convex, simple, and complex polygons \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"path fills(with even-odd or zero-one fill rule)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stroke fills\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"quadrilaterals\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bezier patches\"))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Language</strong> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">c++11</div>, does not use any <div class=\"css-1pi5a8j\">STL</div> library</li><li class=\"css-b0qdn7\">99% mostly headers only lib</li><li class=\"css-b0qdn7\">most functions are templates, which means you compile only what is used</li><li class=\"css-b0qdn7\">compile-time polymorphism (no runtime virtual methods)</li><li class=\"css-b0qdn7\">support for 32 bits and 64 bits</li></ul></blockquote><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Graphics</strong> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">very modular design. if something does not exist, you can implement your own</li><li class=\"css-b0qdn7\">over 10 blending modes impemented, you can wrote your own and supply as well</li><li class=\"css-b0qdn7\"><style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">porter-duff</div> alpha compositing</li><li class=\"css-b0qdn7\">support for 2d sampler</li><li class=\"css-b0qdn7\">can support any pixel coding you need, we implemeted a lot out of the box</li><li class=\"css-b0qdn7\">can render 3d geometries</li><li class=\"css-b0qdn7\">we support 3d shaders</li><li class=\"css-b0qdn7\">no need for GPU, it is all CPU</li><li class=\"css-b0qdn7\">no need for FPU</li><li class=\"css-b0qdn7\">support for any number system including <div class=\"css-1pi5a8j\">Q</div> numbers (fixed point), no need to use float points</li></ul></blockquote><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Geometry</strong> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">fast implementation for common shapes (rect, rounded rectangles, circles, triangles)</li><li class=\"css-b0qdn7\">batch traingles like GPU would</li><li class=\"css-b0qdn7\">support polygons of any type convex, simple, and complex polygons </li><li class=\"css-b0qdn7\">path fills(with even-odd or zero-one fill rule)</li><li class=\"css-b0qdn7\">stroke fills</li><li class=\"css-b0qdn7\">quadrilaterals</li><li class=\"css-b0qdn7\">bezier patches</li></ul></blockquote>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"setup","route":"getting-started/setup","path":"content/docs/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/numbers.mdx"},{"title":"Pixel coders","route":"concepts/pixel-coders","path":"content/docs/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/samplers.mdx"},{"title":"Compostion","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"},{"title":"Canvas","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"}]}],"__map":{"getting-started/setup":"content/docs/setup.mdx","getting-started/features":"content/docs/features.mdx","concepts/numbers":"content/docs/numbers.mdx","concepts/pixel-coders":"content/docs/pixel-coders.mdx","concepts/samplers":"content/docs/samplers.mdx","B/hello-world":"content/docs/B/hello-world.mdx"}}}},"__N_SSG":true}