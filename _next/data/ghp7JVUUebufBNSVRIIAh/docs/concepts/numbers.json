{"pageProps":{"data":{"slug":"concepts/numbers","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"most of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" algorithms can use any of the following numbers types at compile-time:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Q\"), \" numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"float\"), \" numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"double\"), \" numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"any custom user defined number types will be available soon\")), mdx(\"h2\", null, \"Q numbers\"), mdx(\"p\", null, \"Q numbers are fixed point integers, that have configurable number of bits\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"for the precision of the number.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/Q.h>\\n// q_15 have 15 bits of precision\\nusing q_15 = Q<15>;\\n\\nq_15 q1{5}, q2{2};\\nq_15 q3 = q1/q2;\\n\")), mdx(\"p\", null, \"you can convert q numbers into other precision with\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Q<4> q4 = q3;\\n\")), mdx(\"p\", null, \"you can also cast them to other numbers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"float f1 = float(q4);\\ndouble d1 = float(q4);\\nint f1 = int(q4);\\n\")), mdx(\"p\", null, \"you can also construct them from other types\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\nQ<15> q1{0.00281f};\\nQ<15> q2 = 3.14f\\n\")), mdx(\"p\", null, \"you can also apply math function on them\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\n#include <microgl/Q.h>\\n#include <microgl/math.h>\\n// q_15 have 15 bits of precision\\nusing q_15 = Q<15>;\\n\\nQ<15> q1{9.32f};\\n\\nauto q_sqrt = microgl::math::sqrt(q1);\\nauto q_abs = microgl::math::abs(q1);\\n\")), mdx(\"p\", null, \"you can use them inside a matrix\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\n#include <microgl/Q.h>\\n#include <microgl/matrix_3x3.h>\\n\\nusing q = Q<12>;\\n\\nusing mat = matrix_3x3<q>;\\nusing mat_float = matrix_3x3<float>;\\n\\nq angle{3.14f/2.f}\\nsine = microgl::math::sin(t*2);\\n\\nmat identity = mat::identity();\\nmat rotation_pivot = mat::rotation(angle, 50, 50, 1, 1);\\nmat translate = mat::translate(100, 100);\\nmat scale = mat::scale(number_scale, number_scale);\\nmat shear_x = mat::shear_x(1.7f);\\n\\nmat transform_matrix = translate * rotation_pivot;\\n\")), mdx(\"p\", null, \"you can use them inside other containers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\n#include <microgl/Q.h>\\n#include <microgl/vec2.h>\\n\\nusing q = Q<12>;\\nusing vec2 = vec2<q>;\\n\\nvec2 vertex{5, 6};\\n\\nvec2 v2 = transform_matrix * vertex;\\nauto v3 = v2.dot(vertex);\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p class=\"css-0\">most of <style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">microgl</div> algorithms can use any of the following numbers types at compile-time:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">Q</div> numbers</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">float</div> numbers</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">double</div> numbers</li><li class=\"css-b0qdn7\">any custom user defined number types will be available soon</li></ul><h2 class=\"css-0\">Q numbers</h2><p class=\"css-0\">Q numbers are fixed point integers, that have configurable number of bits<div class=\"css-0\"></div>\n<!-- -->for the precision of the number.</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/Q.h&gt;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// q_15 have 15 bits of precision</span><span>\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> q_15 = Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt;;\n</span>\n<span>q_15 q1{</span><span style=\"color:#E7CE56\">5</span><span>}, q2{</span><span style=\"color:#E7CE56\">2</span><span>};\n</span>q_15 q3 = q1/q2;\n<!-- -->\n</code></pre></pre><p class=\"css-0\">you can convert q numbers into other precision with</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span>Q&lt;</span><span style=\"color:#E7CE56\">4</span><span>&gt; q4 = q3;\n</span>\n</code></pre></pre><p class=\"css-0\">you can also cast them to other numbers</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">float</span><span> f1 = </span><span style=\"color:#B45EA4\">float</span><span>(q4);\n</span><span></span><span style=\"color:#B45EA4\">double</span><span> d1 = </span><span style=\"color:#B45EA4\">float</span><span>(q4);\n</span><span></span><span style=\"color:#B45EA4\">int</span><span> f1 = </span><span style=\"color:#B45EA4\">int</span><span>(q4);\n</span>\n</code></pre></pre><p class=\"css-0\">you can also construct them from other types</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span>\n</span><span>Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt; q1{</span><span style=\"color:#E7CE56\">0.00281f</span><span>};\n</span><span>Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt; q2 = </span><span style=\"color:#E7CE56\">3.14f</span><span>\n</span>\n</code></pre></pre><p class=\"css-0\">you can also apply math function on them</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/Q.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/math.h&gt;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// q_15 have 15 bits of precision</span><span>\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> q_15 = Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt;;\n</span>\n<span>Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt; q1{</span><span style=\"color:#E7CE56\">9.32f</span><span>};\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> q_sqrt = microgl::math::</span><span style=\"color:#E7CE56\">sqrt</span><span>(q1);\n</span><span></span><span style=\"color:#B45EA4\">auto</span><span> q_abs = microgl::math::</span><span style=\"color:#E7CE56\">abs</span><span>(q1);\n</span>\n</code></pre></pre><p class=\"css-0\">you can use them inside a matrix</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/Q.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/matrix_3x3.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> q = Q&lt;</span><span style=\"color:#E7CE56\">12</span><span>&gt;;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> mat = matrix_3x3&lt;q&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> mat_float = matrix_3x3&lt;</span><span style=\"color:#B45EA4\">float</span><span>&gt;;\n</span>\n<span>q angle{</span><span style=\"color:#E7CE56\">3.14f</span><span>/</span><span style=\"color:#E7CE56\">2.f</span><span>}\n</span><span>sine = microgl::math::</span><span style=\"color:#E7CE56\">sin</span><span>(t*</span><span style=\"color:#E7CE56\">2</span><span>);\n</span>\n<!-- -->mat identity = mat::identity();\n<span>mat rotation_pivot = mat::rotation(angle, </span><span style=\"color:#E7CE56\">50</span><span>, </span><span style=\"color:#E7CE56\">50</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>);\n</span><span>mat translate = mat::translate(</span><span style=\"color:#E7CE56\">100</span><span>, </span><span style=\"color:#E7CE56\">100</span><span>);\n</span>mat scale = mat::scale(number_scale, number_scale);\n<span>mat shear_x = mat::shear_x(</span><span style=\"color:#E7CE56\">1.7f</span><span>);\n</span>\n<!-- -->mat transform_matrix = translate * rotation_pivot;\n<!-- -->\n</code></pre></pre><p class=\"css-0\">you can use them inside other containers</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/Q.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/vec2.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> q = Q&lt;</span><span style=\"color:#E7CE56\">12</span><span>&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> vec2 = vec2&lt;q&gt;;\n</span>\n<span>vec2 vertex{</span><span style=\"color:#E7CE56\">5</span><span>, </span><span style=\"color:#E7CE56\">6</span><span>};\n</span>\n<!-- -->vec2 v2 = transform_matrix * vertex;\n<span></span><span style=\"color:#B45EA4\">auto</span><span> v3 = v2.dot(vertex);\n</span>\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"setup","route":"getting-started/setup","path":"content/docs/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/numbers.mdx"},{"title":"Pixel coders","route":"concepts/pixel-coders","path":"content/docs/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/samplers.mdx"},{"title":"Compostion","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"},{"title":"Canvas","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"}]}],"__map":{"getting-started/setup":"content/docs/setup.mdx","getting-started/features":"content/docs/features.mdx","concepts/numbers":"content/docs/numbers.mdx","concepts/pixel-coders":"content/docs/pixel-coders.mdx","concepts/samplers":"content/docs/samplers.mdx","B/hello-world":"content/docs/B/hello-world.mdx"}}}},"__N_SSG":true}