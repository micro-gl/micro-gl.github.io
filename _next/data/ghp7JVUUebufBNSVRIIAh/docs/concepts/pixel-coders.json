{"pageProps":{"data":{"slug":"concepts/pixel-coders","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"pixel coders are objects that can encode color or intensity into pixel representation\\nand also decode a pixel into a color.  \"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" can support any color configuration and any pixel format you can think of.\"), mdx(\"p\", null, \"here is a basic pixel coder, that encodes \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RGB\"), \" 8-bit color channels into a packed\\n32 bit integer\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/PixelCoder.h>\\n\\nclass RGB888_PACKED_32 : public PixelCoder<uint32_t, 8,8,8,0, RGB888_PACKED_32> {\\npublic:\\n    using PixelCoder::decode;\\n    using PixelCoder::encode;\\n\\n    inline void encode(const color_t &input, uint32_t &output) const {\\n        output = (input.r << 16) + (input.g << 8) + input.b;\\n    }\\n\\n    inline void decode(const uint32_t &input, color_t &output) const {\\n        output.r = (input & 0x00FF0000) >> 16;\\n        output.g = (input & 0x0000FF00) >> 8;\\n        output.b = (input & 0x000000FF);\\n    };\\n\\n};\\n\")), mdx(\"p\", null, \"here is another pixel coder, that encodes/decodes a single 8-bit color channel into\\n8 bit integer\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/PixelCoder.h>\\n\\nclass RGB8 : public PixelCoder<uint8_t, 8, 8, 8, 0, RGB8> {\\npublic:\\n    using PixelCoder::decode;\\n    using PixelCoder::encode;\\n\\n    inline void encode(const color_t &input, uint8_t &output) const {\\n        output = input.r;\\n    }\\n\\n    inline void decode(const uint8_t &input, color_t &output) const {\\n        output.r = output.g = output.b = input;\\n    };\\n\\n};\\n\")), mdx(\"p\", null, \"The above examples demonstrate how simple it is to create pixel coders with any\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"color depth configuration and any pixel format desired.  \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"out of the box, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"<microgl/pixel_coders>\"), \" is packed with the following pixel coders for your conveniance\")), mdx(\"h2\", null, \"True color coders (32 bit coders)\"), mdx(\"p\", null, \"for pixels stored in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"4 bytes\"), \" data structure\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGB888_PACKED_32.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgb(8|8|8)\"), \" channels into a 32 bit unsigned integer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGBA8888_PACKED_32.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgba(8|8|8|8)\"), \" channels into a 32 bit unsigned integer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGBA8888_ARRAY.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgba(8|8|8|8)\"), \" channels into a 4d vector (faster reads)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGB888_ARRAY.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgb(8|8|8)\"), \" channels into a 4d vector (faster reads)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGB8.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgb(8|8|8)\"), \" grayscale into 8 bits unsigned integer\")), mdx(\"h2\", null, \"16 bit coders\"), mdx(\"p\", null, \"for pixels stored in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"2 bytes\"), \" data structure\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGB555_PACKED_16.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgb(5|5|5)\"), \" channels into a 16 bits unsigned integer (word)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGB565_PACKED_16.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgb(5|6|5)\"), \" channels into a 16 bits unsigned integer (word)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGBA4444_PACKED_16.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgba(4|4|4|4)\"), \" channels into a 16 bits unsigned integer (word)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGBA5551_PACKED_16.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgba(5|5|5|1)\"), \" channels into a 16 bits unsigned integer (word)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ARGB1555_PACKED_16.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"argb(1|5|5|5)\"), \" channels into a 16 bits unsigned integer (word)\")), mdx(\"h2\", null, \"8 bit coders\"), mdx(\"p\", null, \"for pixels stored in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"1 bytes\"), \" data structure\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RGB332_PACKED_8.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rgb(3|3|2)\"), \" channels into a 8 bits unsigned integer (char)\")), mdx(\"h2\", null, \"Memory friendly coders\"), mdx(\"p\", null, \"the following coders are very handy for packed bitmaps, they also use a lookup table for\\nfast conversions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BPP_RGB.h\"), \" - arbitrary single channel bits scaled into any rgb depth\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BPP_1_RGB.h\"), \" - 1 bit channel (2 colors) scaled into any rgb depth\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BPP_2_RGB.h\"), \" - 2 bit channel (4 colors) scaled into any rgb depth\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BPP_4_RGB.h\"), \" - 4 bit channel (16 colors) scaled into any rgb depth\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BPP_8_RGB.h\"), \" - 8 bit channel (256 colors) scaled into any rgb depth\")), mdx(\"h2\", null, \"Converting Coders\"), mdx(\"p\", null, \"this coders can transform a coder to another rgba depth\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"coder_rgba.h\"), \" - convert a given coder to a different rgba color depth\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"coder_converter.h\"), \" - convert one coder to the color depth of another coder\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p class=\"css-0\">pixel coders are objects that can encode color or intensity into pixel representation\nand also decode a pixel into a color.  </p><p class=\"css-0\"><style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">microgl</div> can support any color configuration and any pixel format you can think of.</p><p class=\"css-0\">here is a basic pixel coder, that encodes <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">RGB</strong> 8-bit color channels into a packed\n32 bit integer</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/PixelCoder.h&gt;</span><span>\n</span>\n<span></span><span class=\"hljs-class\" style=\"color:#B45EA4\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">RGB888_PACKED_32</span><span class=\"hljs-class\"> :</span><span> </span><span style=\"color:#B45EA4\">public</span><span> PixelCoder&lt;</span><span style=\"color:#B45EA4\">uint32_t</span><span>, </span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>, RGB888_PACKED_32&gt; {\n</span><span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> PixelCoder::decode;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> PixelCoder::encode;\n</span>\n<span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">encode</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;input, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">uint32_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;output)</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\"> </span><span>{\n</span><span>        output = (input.r &lt;&lt; </span><span style=\"color:#E7CE56\">16</span><span>) + (input.g &lt;&lt; </span><span style=\"color:#E7CE56\">8</span><span>) + input.b;\n</span>    }\n<!-- -->\n<span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">decode</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">uint32_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;input, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;output)</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\"> </span><span>{\n</span><span>        output.r = (input &amp; </span><span style=\"color:#E7CE56\">0x00FF0000</span><span>) &gt;&gt; </span><span style=\"color:#E7CE56\">16</span><span>;\n</span><span>        output.g = (input &amp; </span><span style=\"color:#E7CE56\">0x0000FF00</span><span>) &gt;&gt; </span><span style=\"color:#E7CE56\">8</span><span>;\n</span><span>        output.b = (input &amp; </span><span style=\"color:#E7CE56\">0x000000FF</span><span>);\n</span>    };\n<!-- -->\n<!-- -->};\n<!-- -->\n</code></pre></pre><p class=\"css-0\">here is another pixel coder, that encodes/decodes a single 8-bit color channel into\n8 bit integer</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/PixelCoder.h&gt;</span><span>\n</span>\n<span></span><span class=\"hljs-class\" style=\"color:#B45EA4\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">RGB8</span><span class=\"hljs-class\"> :</span><span> </span><span style=\"color:#B45EA4\">public</span><span> PixelCoder&lt;</span><span style=\"color:#B45EA4\">uint8_t</span><span>, </span><span style=\"color:#E7CE56\">8</span><span>, </span><span style=\"color:#E7CE56\">8</span><span>, </span><span style=\"color:#E7CE56\">8</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, RGB8&gt; {\n</span><span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> PixelCoder::decode;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> PixelCoder::encode;\n</span>\n<span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">encode</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;input, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">uint8_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;output)</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\"> </span><span>{\n</span>        output = input.r;\n<!-- -->    }\n<!-- -->\n<span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">decode</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">uint8_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;input, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;output)</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\"> </span><span>{\n</span>        output.r = output.g = output.b = input;\n<!-- -->    };\n<!-- -->\n<!-- -->};\n<!-- -->\n</code></pre></pre><p class=\"css-0\">The above examples demonstrate how simple it is to create pixel coders with any<div class=\"css-0\"></div>\n<!-- -->color depth configuration and any pixel format desired.  </p><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">out of the box, <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">&lt;microgl/pixel_coders&gt;</strong> is packed with the following pixel coders for your conveniance</p></blockquote><h2 class=\"css-0\">True color coders (32 bit coders)</h2><p class=\"css-0\">for pixels stored in a <em>4 bytes</em> data structure</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">RGB888_PACKED_32.h</div> - <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">rgb(8|8|8)</strong> channels into a 32 bit unsigned integer</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">RGBA8888_PACKED_32.h</div> - <strong class=\"css-10ircq3\">rgba(8|8|8|8)</strong> channels into a 32 bit unsigned integer</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">RGBA8888_ARRAY.h</div> - <strong class=\"css-10ircq3\">rgba(8|8|8|8)</strong> channels into a 4d vector (faster reads)</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">RGB888_ARRAY.h</div> - <strong class=\"css-10ircq3\">rgb(8|8|8)</strong> channels into a 4d vector (faster reads)</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">RGB8.h</div> - <strong class=\"css-10ircq3\">rgb(8|8|8)</strong> grayscale into 8 bits unsigned integer</li></ul><h2 class=\"css-0\">16 bit coders</h2><p class=\"css-0\">for pixels stored in a <em>2 bytes</em> data structure</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">RGB555_PACKED_16.h</div> - <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">rgb(5|5|5)</strong> channels into a 16 bits unsigned integer (word)</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">RGB565_PACKED_16.h</div> - <strong class=\"css-10ircq3\">rgb(5|6|5)</strong> channels into a 16 bits unsigned integer (word)</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">RGBA4444_PACKED_16.h</div> - <strong class=\"css-10ircq3\">rgba(4|4|4|4)</strong> channels into a 16 bits unsigned integer (word)</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">RGBA5551_PACKED_16.h</div> - <strong class=\"css-10ircq3\">rgba(5|5|5|1)</strong> channels into a 16 bits unsigned integer (word)</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">ARGB1555_PACKED_16.h</div> - <strong class=\"css-10ircq3\">argb(1|5|5|5)</strong> channels into a 16 bits unsigned integer (word)</li></ul><h2 class=\"css-0\">8 bit coders</h2><p class=\"css-0\">for pixels stored in a <em>1 bytes</em> data structure</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">RGB332_PACKED_8.h</div> - <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">rgb(3|3|2)</strong> channels into a 8 bits unsigned integer (char)</li></ul><h2 class=\"css-0\">Memory friendly coders</h2><p class=\"css-0\">the following coders are very handy for packed bitmaps, they also use a lookup table for\nfast conversions</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">BPP_RGB.h</div> - arbitrary single channel bits scaled into any rgb depth</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">BPP_1_RGB.h</div> - 1 bit channel (2 colors) scaled into any rgb depth</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">BPP_2_RGB.h</div> - 2 bit channel (4 colors) scaled into any rgb depth</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">BPP_4_RGB.h</div> - 4 bit channel (16 colors) scaled into any rgb depth</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">BPP_8_RGB.h</div> - 8 bit channel (256 colors) scaled into any rgb depth</li></ul><h2 class=\"css-0\">Converting Coders</h2><p class=\"css-0\">this coders can transform a coder to another rgba depth</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">coder_rgba.h</div> - convert a given coder to a different rgba color depth</li><li class=\"css-b0qdn7\"><div class=\"css-1pi5a8j\">coder_converter.h</div> - convert one coder to the color depth of another coder</li></ul>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"setup","route":"getting-started/setup","path":"content/docs/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/numbers.mdx"},{"title":"Pixel coders","route":"concepts/pixel-coders","path":"content/docs/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/samplers.mdx"},{"title":"Compostion","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"},{"title":"Canvas","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"}]}],"__map":{"getting-started/setup":"content/docs/setup.mdx","getting-started/features":"content/docs/features.mdx","concepts/numbers":"content/docs/numbers.mdx","concepts/pixel-coders":"content/docs/pixel-coders.mdx","concepts/samplers":"content/docs/samplers.mdx","B/hello-world":"content/docs/B/hello-world.mdx"}}}},"__N_SSG":true}