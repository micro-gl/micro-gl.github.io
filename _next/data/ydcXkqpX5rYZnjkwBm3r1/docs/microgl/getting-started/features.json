{"pageProps":{"data":{"slug":"getting-started/features","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Language\"), \" \", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"C++11\")), \", does not use any \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"STL\")), \" library and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"standard library\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"headers only\"), \" library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"most functions are templates, which means you compile only what is used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"compile-time polymorphism (no runtime virtual methods)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support for 32 bits and 64 bits\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"self contained and modular.\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Graphics\"), \" \", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"very modular design. if something does not exist, you can implement your own\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"over 10 blending modes impemented, you can wrote your own and supply as well\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"porter-duff\")), \" alpha compositing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support for 2d sampler\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can support any pixel coding you need, we implemeted a lot out of the box\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can render 3d geometries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"we support 3d shaders\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no need for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"GPU\"), \", it is all \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"CPU\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no need for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"FPU\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support for any number system including \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q\")), \" numbers (fixed point), no need to use float points\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Geometry\"), \" \", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fast implementation for common shapes (rect, rounded rectangles, circles, triangles)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"batch traingles like \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"GPU\"), \" would\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support polygons of any type convex, simple, and complex polygons \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"path fills(with even-odd or zero-one fill rule)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stroke fills\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"quadrilaterals\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bezier patches\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"we providea dynamic array, but you can plug your own.\"))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Language</strong> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">C++11</div></strong>, does not use any <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">STL</div></strong> library and <strong class=\"css-10ircq3\">standard library</strong>.</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">headers only</strong> library</li><li class=\"css-b0qdn7\">most functions are templates, which means you compile only what is used</li><li class=\"css-b0qdn7\">compile-time polymorphism (no runtime virtual methods)</li><li class=\"css-b0qdn7\">support for 32 bits and 64 bits</li><li class=\"css-b0qdn7\">self contained and modular.</li></ul></blockquote><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Graphics</strong> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">very modular design. if something does not exist, you can implement your own</li><li class=\"css-b0qdn7\">over 10 blending modes impemented, you can wrote your own and supply as well</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">porter-duff</div></strong> alpha compositing</li><li class=\"css-b0qdn7\">support for 2d sampler</li><li class=\"css-b0qdn7\">can support any pixel coding you need, we implemeted a lot out of the box</li><li class=\"css-b0qdn7\">can render 3d geometries</li><li class=\"css-b0qdn7\">we support 3d shaders</li><li class=\"css-b0qdn7\">no need for <strong class=\"css-10ircq3\">GPU</strong>, it is all <strong class=\"css-10ircq3\">CPU</strong></li><li class=\"css-b0qdn7\">no need for <strong class=\"css-10ircq3\">FPU</strong></li><li class=\"css-b0qdn7\">support for any number system including <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">Q</div></strong> numbers (fixed point), no need to use float points</li></ul></blockquote><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Geometry</strong> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">fast implementation for common shapes (rect, rounded rectangles, circles, triangles)</li><li class=\"css-b0qdn7\">batch traingles like <strong class=\"css-10ircq3\">GPU</strong> would</li><li class=\"css-b0qdn7\">support polygons of any type convex, simple, and complex polygons </li><li class=\"css-b0qdn7\">path fills(with even-odd or zero-one fill rule)</li><li class=\"css-b0qdn7\">stroke fills</li><li class=\"css-b0qdn7\">quadrilaterals</li><li class=\"css-b0qdn7\">bezier patches</li><li class=\"css-b0qdn7\">we providea dynamic array, but you can plug your own.</li></ul></blockquote>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}