{"pageProps":{"data":{"slug":"drawing/rounded","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Rounded Shapes\"), \" come in three flavours:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Rounded Rectangles\"), \" (supports outline stroking)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Circles\"), \" (supports outline stroking)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Arcs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"all support fast anti-aliasing\")), mdx(\"p\", null, \"These basic shapes use minimal memory and do not allocate memory or use\\ntessalated geometry so they are very efficient for common usage.\"), mdx(\"h1\", null, \"Rounded Rectangle\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_rounded_rectangle.cpp\")))), mdx(\"div\", {\n    style: {\n      margin: \"auto\"\n    }\n  }, mdx(\"img\", {\n    src: \"/images/canvas_rounded_rect.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  }), mdx(\"img\", {\n    src: \"/images/canvas_rounded_2.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/fast_radial_gradient.h>\\n#include <microgl/samplers/linear_gradient_2_colors.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nfast_radial_gradient<float, 4, Canvas24::rgba> gradient{0.5, 0.5, 0.75};\\nlinear_gradient_2_colors<120, Canvas24::rgba> gradient2Colors{{255,0,255}, {255,0,0}};\\n\\nCanvas24 canvas(640, 480);\\n\\ngradient.addStop(0.0f, {255,0,0});\\ngradient.addStop(0.45f, {255,0,0});\\ngradient.addStop(0.50f, {0,255,0});\\ngradient.addStop(1.f, {255,0,255});\\n\\ncanvas.clear({255,255,255,255});\\ncanvas.drawRoundedRect<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true, number>(\\n        gradient,         // fill(interior) sampler\\n        gradient2Colors,  // stroke(boundary) sampler\\n        10, 10, 300, 300, // l,t,r,b\\n        50, 10);          // radius, stroke-size      \\n\\n\")), mdx(\"h1\", null, \"Circles\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_circles.cpp\")))), mdx(\"img\", {\n    src: \"/images/canvas_circle.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/fast_radial_gradient.h>\\n#include <microgl/samplers/linear_gradient_2_colors.h>\\n#include <microgl/samplers/flat_color.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n\\nusing namespace microgl;\\nusing namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nlinear_gradient_2_colors<120> gradient2Colors{{255,0,255},\\n                                                {255,0,0}};\\nflat_color<> flatColor{{133,133,133, 255}};\\nCanvas24 canvas(640, 480);\\n\\ncanvas.clear({255,255,255,255});\\ncanvas.drawCircle<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true, number>(\\n        flatColor, gradient2Colors,\\n        200, 200, // center x, y\\n        150, 10,  // radius, stroker size      \\n        255);     // opacity\\n\\n\")), mdx(\"h1\", null, \"Arcs\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_arcs.cpp\")))), mdx(\"img\", {\n    src: \"/images/arcs_1.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nlinear_gradient_2_colors<120> gradient2Colors{{255,0,255},\\n                                                {255,0,0}};\\nCanvas24 canvas(640, 480);\\n\\ncanvas.clear({255,255,255,255});\\ncanvas.drawArc<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true, number,  number>(\\n        gradient2Colors, // sampler\\n        200, 200,        // center x, y\\n        50,  20,         // radius, stroke-size\\n        90, 270,         // from angle degrees, to angle degrees\\n        true,            // clock-wise\\n        255);            // opacity        \\n\\n\")), mdx(\"h1\", null, \"Signature API\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n\\n    /**\\n     * Draw a rounded rectangle\\n     *\\n     * @tparam BlendMode        the blend mode struct\\n     * @tparam PorterDuff       the alpha compositing struct\\n     * @tparam antialias        antialiasing flag\\n     * @tparam number1          number type of position\\n     * @tparam number2          number type of uv coords\\n     * @tparam Sampler1         sampler type for fill\\n     * @tparam Sampler2         sampler type for stroke\\n     *\\n     * @param sampler_fill      fill sampler reference\\n     * @param sampler_stroke    stroke sampler reference\\n     * @param left              left distance\\n     * @param top               top distance\\n     * @param right             right distance\\n     * @param bottom            bottom distance\\n     * @param radius            radius of corners\\n     * @param stroke_size       stroke size in pixels\\n     * @param opacity           opacity [0..255]\\n     * @param u0                uv coord\\n     * @param v0                uv coord\\n     * @param u1                uv coord\\n     * @param v1                uv coord\\n     */\\n    template<typename BlendMode=blendmode::Normal,\\n             typename PorterDuff=porterduff::FastSourceOverOnOpaque, \\n             bool antialias=false, \\n             typename number1, typename number2=number1, \\n             typename Sampler1, typename Sampler2>\\n    void drawRoundedRect(const Sampler1 & sampler_fill,\\n                         const Sampler2 & sampler_stroke,\\n                         const number1 &left, const number1 &top,\\n                         const number1 &right, const number1 &bottom,\\n                         const number1 &radius, const number1 &stroke_size,\\n                         opacity_t opacity= 255,\\n                         const number2 &u0= number2(0), const number2 &v0= number2(1),\\n                         const number2 &u1= number2(1), const number2 &v1= number2(0));\\n\\n    /**\\n     * Draw a circle shape with fill and stroke\\n     *\\n     * @tparam BlendMode        the blend mode struct\\n     * @tparam PorterDuff       the alpha compositing struct\\n     * @tparam antialias        antialiasing flag\\n     * @tparam number1          number type of position\\n     * @tparam number2          number type of uv coords\\n     * @tparam Sampler1         sampler type for fill\\n     * @tparam Sampler2         sampler type for stroke\\n     *\\n     * @param sampler_fill      fill sampler reference\\n     * @param sampler_stroke    stroke sampler reference\\n     * @param centerX           the center x-coord of the circle\\n     * @param centerY           the center y-coord of the circle\\n     * @param radius            the radius of the circle\\n     * @param stroke_size       the stroke size in pixels\\n     * @param opacity           opacity [0..255]\\n     * @param u0                uv coord\\n     * @param v0                uv coord\\n     * @param u1                uv coord\\n     * @param v1                uv coord\\n     */\\n    template<typename BlendMode=blendmode::Normal,\\n             typename PorterDuff=porterduff::FastSourceOverOnOpaque, \\n             bool antialias=false,\\n             typename number1, typename number2=number1, \\n             typename Sampler1, typename Sampler2>\\n    void drawCircle(const Sampler1 & sampler_fill,\\n                    const Sampler2 & sampler_stroke,\\n                    const number1 &centerX, const number1 &centerY,\\n                    const number1 &radius, const number1 &stroke_size, \\n                    opacity_t opacity=255,\\n                    const number2 &u0=number2(0), const number2 &v0=number2(1),\\n                    const number2 &u1=number2(1), const number2 &v1=number2(0));\\n\\n\\n    /**\\n     * Draw a stroked arc.\\n     * Note: pay attention to the clock-wise argument, for example, clock-wise\\n     * arcs, that have negative arc will be interpreted as empty arcs. This is\\n     * done to support animations without quirks and bugs.\\n     * \\n     * @tparam BlendMode        the blend mode struct\\n     * @tparam PorterDuff       the alpha compositing struct\\n     * @tparam antialias        antialiasing flag\\n     * @tparam number1          number type of position\\n     * @tparam number2          number type of uv coords\\n     * @tparam Sampler1         sampler type for stroke\\n     * \\n     * @param sampler_fill      fill sampler reference\\n     * @param sampler_stroke    stroke sampler reference\\n     * @param centerX           the center x-coord of the circle\\n     * @param centerY           the center y-coord of the circle\\n     * @param radius            the radius of the circle\\n     * @param stroke_size       the stroke size in pixels\\n     * @param from_angle        arc start angle in degrees (not radians)\\n     * @param to_angle          arc end angle in degrees (not radians)\\n     * @param clock_wise        is it a clock-wise arc\\n     * @param opacity           opacity [0..255]\\n     * @param u0                uv coord\\n     * @param v0                uv coord\\n     * @param u1                uv coord\\n     * @param v1                uv coord\\n     * \\n     */\\n    template<typename BlendMode=blendmode::Normal,\\n            typename PorterDuff=porterduff::FastSourceOverOnOpaque, bool antialias=false,\\n            typename number1, typename number2=number1, \\n            typename Sampler>\\n    void drawArc(const Sampler & sampler_fill,\\n                    const number1 &centerX, const number1 &centerY,\\n                    const number1 &radius, const number1 &stroke_size,\\n                    number1 from_angle, number1 to_angle,\\n                    bool clock_wise=true,\\n                    opacity_t opacity=255,\\n                    const number2 &u0=number2(0), const number2 &v0=number2(1),\\n                    const number2 &u1=number2(1), const number2 &v1=number2(0));\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Rounded Shapes</strong> come in three flavours:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Rounded Rectangles</strong> (supports outline stroking)</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Circles</strong> (supports outline stroking)</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Arcs</strong></li><li class=\"css-b0qdn7\">all support fast anti-aliasing</li></ul><p class=\"css-0\">These basic shapes use minimal memory and do not allocate memory or use\ntessalated geometry so they are very efficient for common usage.</p><h1 class=\"css-0\">Rounded Rectangle</h1><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">Example at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">/examples/example_draw_rounded_rectangle.cpp</div></strong></p></blockquote><div style=\"margin:auto\"><img src=\"/images/canvas_rounded_rect.png\" style=\"height:250px;display:inline-block\"/><img src=\"/images/canvas_rounded_2.png\" style=\"height:250px;display:inline-block\"/></div><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/fast_radial_gradient.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/linear_gradient_2_colors.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_ARRAY.h&gt;</span><span>\n</span>\n<!-- -->\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span>fast_radial_gradient&lt;</span><span style=\"color:#B45EA4\">float</span><span>, </span><span style=\"color:#E7CE56\">4</span><span>, Canvas24::rgba&gt; gradient{</span><span style=\"color:#E7CE56\">0.5</span><span>, </span><span style=\"color:#E7CE56\">0.5</span><span>, </span><span style=\"color:#E7CE56\">0.75</span><span>};\n</span><span>linear_gradient_2_colors&lt;</span><span style=\"color:#E7CE56\">120</span><span>, Canvas24::rgba&gt; gradient2Colors{{</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>}, {</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>}};\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span>\n<span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.0f</span><span>, {</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.45f</span><span>, {</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.50f</span><span>, {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">1.f</span><span>, {</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span>\n<span>canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>canvas.drawRoundedRect&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">true</span><span>, number&gt;(\n</span><span>        gradient,         </span><span style=\"color:#B6B18B\">// fill(interior) sampler</span><span>\n</span><span>        gradient2Colors,  </span><span style=\"color:#B6B18B\">// stroke(boundary) sampler</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">10</span><span>, </span><span style=\"color:#E7CE56\">10</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>, </span><span style=\"color:#B6B18B\">// l,t,r,b</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">50</span><span>, </span><span style=\"color:#E7CE56\">10</span><span>);          </span><span style=\"color:#B6B18B\">// radius, stroke-size      </span><span>\n</span>\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Circles</h1><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">Example at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">/examples/example_draw_circles.cpp</div></strong></p></blockquote><img src=\"/images/canvas_circle.png\" style=\"height:250px;display:inline-block\"/><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/fast_radial_gradient.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/linear_gradient_2_colors.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_ARRAY.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span>linear_gradient_2_colors&lt;</span><span style=\"color:#E7CE56\">120</span><span>&gt; gradient2Colors{{</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span>                                                {</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>}};\n</span><span>flat_color&lt;&gt; flatColor{{</span><span style=\"color:#E7CE56\">133</span><span>,</span><span style=\"color:#E7CE56\">133</span><span>,</span><span style=\"color:#E7CE56\">133</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>}};\n</span><span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span>\n<span>canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>canvas.drawCircle&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">true</span><span>, number&gt;(\n</span>        flatColor, gradient2Colors,\n<span>        </span><span style=\"color:#E7CE56\">200</span><span>, </span><span style=\"color:#E7CE56\">200</span><span>, </span><span style=\"color:#B6B18B\">// center x, y</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">150</span><span>, </span><span style=\"color:#E7CE56\">10</span><span>,  </span><span style=\"color:#B6B18B\">// radius, stroker size      </span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">255</span><span>);     </span><span style=\"color:#B6B18B\">// opacity</span><span>\n</span>\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Arcs</h1><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">Example at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">/examples/example_draw_arcs.cpp</div></strong></p></blockquote><img src=\"/images/arcs_1.png\" style=\"height:250px;display:inline-block\"/><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span>linear_gradient_2_colors&lt;</span><span style=\"color:#E7CE56\">120</span><span>&gt; gradient2Colors{{</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span>                                                {</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>}};\n</span><span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span>\n<span>canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>canvas.drawArc&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">true</span><span>, number,  number&gt;(\n</span><span>        gradient2Colors, </span><span style=\"color:#B6B18B\">// sampler</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">200</span><span>, </span><span style=\"color:#E7CE56\">200</span><span>,        </span><span style=\"color:#B6B18B\">// center x, y</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">50</span><span>,  </span><span style=\"color:#E7CE56\">20</span><span>,         </span><span style=\"color:#B6B18B\">// radius, stroke-size</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">90</span><span>, </span><span style=\"color:#E7CE56\">270</span><span>,         </span><span style=\"color:#B6B18B\">// from angle degrees, to angle degrees</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">true</span><span>,            </span><span style=\"color:#B6B18B\">// clock-wise</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">255</span><span>);            </span><span style=\"color:#B6B18B\">// opacity        </span><span>\n</span>\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Signature API</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam bitmap_type  the bitmap type\n</span><span style=\"color:#B6B18B\"> * @tparam options      the options bitset\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> bitmap_type, </span><span style=\"color:#B45EA4\">uint8_t</span><span> options=CANVAS_OPT_default&gt;\n</span>class canvas {\n<span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span>\n<span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw a rounded rectangle\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @tparam BlendMode        the blend mode struct\n</span><span style=\"color:#B6B18B\">     * @tparam PorterDuff       the alpha compositing struct\n</span><span style=\"color:#B6B18B\">     * @tparam antialias        antialiasing flag\n</span><span style=\"color:#B6B18B\">     * @tparam number1          number type of position\n</span><span style=\"color:#B6B18B\">     * @tparam number2          number type of uv coords\n</span><span style=\"color:#B6B18B\">     * @tparam Sampler1         sampler type for fill\n</span><span style=\"color:#B6B18B\">     * @tparam Sampler2         sampler type for stroke\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param sampler_fill      fill sampler reference\n</span><span style=\"color:#B6B18B\">     * @param sampler_stroke    stroke sampler reference\n</span><span style=\"color:#B6B18B\">     * @param left              left distance\n</span><span style=\"color:#B6B18B\">     * @param top               top distance\n</span><span style=\"color:#B6B18B\">     * @param right             right distance\n</span><span style=\"color:#B6B18B\">     * @param bottom            bottom distance\n</span><span style=\"color:#B6B18B\">     * @param radius            radius of corners\n</span><span style=\"color:#B6B18B\">     * @param stroke_size       stroke size in pixels\n</span><span style=\"color:#B6B18B\">     * @param opacity           opacity [0..255]\n</span><span style=\"color:#B6B18B\">     * @param u0                uv coord\n</span><span style=\"color:#B6B18B\">     * @param v0                uv coord\n</span><span style=\"color:#B6B18B\">     * @param u1                uv coord\n</span><span style=\"color:#B6B18B\">     * @param v1                uv coord\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> BlendMode=blendmode::Normal,\n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> PorterDuff=porterduff::FastSourceOverOnOpaque, \n</span><span>             </span><span style=\"color:#B45EA4\">bool</span><span> antialias=</span><span style=\"color:#E7CE56\">false</span><span>, \n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> number1, </span><span style=\"color:#B45EA4\">typename</span><span> number2=number1, \n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> Sampler1, </span><span style=\"color:#B45EA4\">typename</span><span> Sampler2&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> drawRoundedRect(</span><span style=\"color:#B45EA4\">const</span><span> Sampler1 &amp; sampler_fill,\n</span><span>                         </span><span style=\"color:#B45EA4\">const</span><span> Sampler2 &amp; sampler_stroke,\n</span><span>                         </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;left, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;top,\n</span><span>                         </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;right, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;bottom,\n</span><span>                         </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;radius, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;stroke_size,\n</span><span>                         </span><span style=\"color:#B45EA4\">opacity_t</span><span> opacity= </span><span style=\"color:#E7CE56\">255</span><span>,\n</span><span>                         </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;u0= number2(</span><span style=\"color:#E7CE56\">0</span><span>), </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;v0= number2(</span><span style=\"color:#E7CE56\">1</span><span>),\n</span><span>                         </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;u1= number2(</span><span style=\"color:#E7CE56\">1</span><span>), </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;v1= number2(</span><span style=\"color:#E7CE56\">0</span><span>));\n</span>\n<span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw a circle shape with fill and stroke\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @tparam BlendMode        the blend mode struct\n</span><span style=\"color:#B6B18B\">     * @tparam PorterDuff       the alpha compositing struct\n</span><span style=\"color:#B6B18B\">     * @tparam antialias        antialiasing flag\n</span><span style=\"color:#B6B18B\">     * @tparam number1          number type of position\n</span><span style=\"color:#B6B18B\">     * @tparam number2          number type of uv coords\n</span><span style=\"color:#B6B18B\">     * @tparam Sampler1         sampler type for fill\n</span><span style=\"color:#B6B18B\">     * @tparam Sampler2         sampler type for stroke\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param sampler_fill      fill sampler reference\n</span><span style=\"color:#B6B18B\">     * @param sampler_stroke    stroke sampler reference\n</span><span style=\"color:#B6B18B\">     * @param centerX           the center x-coord of the circle\n</span><span style=\"color:#B6B18B\">     * @param centerY           the center y-coord of the circle\n</span><span style=\"color:#B6B18B\">     * @param radius            the radius of the circle\n</span><span style=\"color:#B6B18B\">     * @param stroke_size       the stroke size in pixels\n</span><span style=\"color:#B6B18B\">     * @param opacity           opacity [0..255]\n</span><span style=\"color:#B6B18B\">     * @param u0                uv coord\n</span><span style=\"color:#B6B18B\">     * @param v0                uv coord\n</span><span style=\"color:#B6B18B\">     * @param u1                uv coord\n</span><span style=\"color:#B6B18B\">     * @param v1                uv coord\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\">&lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> BlendMode</span><span>=blendmode::Normal,\n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> PorterDuff=porterduff::FastSourceOverOnOpaque, \n</span><span>             </span><span style=\"color:#B45EA4\">bool</span><span> antialias=</span><span style=\"color:#E7CE56\">false</span><span>,\n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> number1, </span><span style=\"color:#B45EA4\">typename</span><span> number2=number1, \n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> Sampler1, </span><span style=\"color:#B45EA4\">typename</span><span> Sampler2&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> drawCircle(</span><span style=\"color:#B45EA4\">const</span><span> Sampler1 &amp; sampler_fill,\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> Sampler2 &amp; sampler_stroke,\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;centerX, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;centerY,\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;radius, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;stroke_size, \n</span><span>                    </span><span style=\"color:#B45EA4\">opacity_t</span><span> opacity=</span><span style=\"color:#E7CE56\">255</span><span>,\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;u0=number2(</span><span style=\"color:#E7CE56\">0</span><span>), </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;v0=number2(</span><span style=\"color:#E7CE56\">1</span><span>),\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;u1=number2(</span><span style=\"color:#E7CE56\">1</span><span>), </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;v1=number2(</span><span style=\"color:#E7CE56\">0</span><span>));\n</span>\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw a stroked arc.\n</span><span style=\"color:#B6B18B\">     * Note: pay attention to the clock-wise argument, for example, clock-wise\n</span><span style=\"color:#B6B18B\">     * arcs, that have negative arc will be interpreted as empty arcs. This is\n</span><span style=\"color:#B6B18B\">     * done to support animations without quirks and bugs.\n</span><span style=\"color:#B6B18B\">     * \n</span><span style=\"color:#B6B18B\">     * @tparam BlendMode        the blend mode struct\n</span><span style=\"color:#B6B18B\">     * @tparam PorterDuff       the alpha compositing struct\n</span><span style=\"color:#B6B18B\">     * @tparam antialias        antialiasing flag\n</span><span style=\"color:#B6B18B\">     * @tparam number1          number type of position\n</span><span style=\"color:#B6B18B\">     * @tparam number2          number type of uv coords\n</span><span style=\"color:#B6B18B\">     * @tparam Sampler1         sampler type for stroke\n</span><span style=\"color:#B6B18B\">     * \n</span><span style=\"color:#B6B18B\">     * @param sampler_fill      fill sampler reference\n</span><span style=\"color:#B6B18B\">     * @param sampler_stroke    stroke sampler reference\n</span><span style=\"color:#B6B18B\">     * @param centerX           the center x-coord of the circle\n</span><span style=\"color:#B6B18B\">     * @param centerY           the center y-coord of the circle\n</span><span style=\"color:#B6B18B\">     * @param radius            the radius of the circle\n</span><span style=\"color:#B6B18B\">     * @param stroke_size       the stroke size in pixels\n</span><span style=\"color:#B6B18B\">     * @param from_angle        arc start angle in degrees (not radians)\n</span><span style=\"color:#B6B18B\">     * @param to_angle          arc end angle in degrees (not radians)\n</span><span style=\"color:#B6B18B\">     * @param clock_wise        is it a clock-wise arc\n</span><span style=\"color:#B6B18B\">     * @param opacity           opacity [0..255]\n</span><span style=\"color:#B6B18B\">     * @param u0                uv coord\n</span><span style=\"color:#B6B18B\">     * @param v0                uv coord\n</span><span style=\"color:#B6B18B\">     * @param u1                uv coord\n</span><span style=\"color:#B6B18B\">     * @param v1                uv coord\n</span><span style=\"color:#B6B18B\">     * \n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\">&lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> BlendMode</span><span>=blendmode::Normal,\n</span><span>            </span><span style=\"color:#B45EA4\">typename</span><span> PorterDuff=porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#B45EA4\">bool</span><span> antialias=</span><span style=\"color:#E7CE56\">false</span><span>,\n</span><span>            </span><span style=\"color:#B45EA4\">typename</span><span> number1, </span><span style=\"color:#B45EA4\">typename</span><span> number2=number1, \n</span><span>            </span><span style=\"color:#B45EA4\">typename</span><span> Sampler&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> drawArc(</span><span style=\"color:#B45EA4\">const</span><span> Sampler &amp; sampler_fill,\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;centerX, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;centerY,\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;radius, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;stroke_size,\n</span>                    number1 from_angle, number1 to_angle,\n<span>                    </span><span style=\"color:#B45EA4\">bool</span><span> clock_wise=</span><span style=\"color:#E7CE56\">true</span><span>,\n</span><span>                    </span><span style=\"color:#B45EA4\">opacity_t</span><span> opacity=</span><span style=\"color:#E7CE56\">255</span><span>,\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;u0=number2(</span><span style=\"color:#E7CE56\">0</span><span>), </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;v0=number2(</span><span style=\"color:#E7CE56\">1</span><span>),\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;u1=number2(</span><span style=\"color:#E7CE56\">1</span><span>), </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;v1=number2(</span><span style=\"color:#E7CE56\">0</span><span>));\n</span>\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/draw-3d.mdx"}]},{"title":"Geometry","items":[{"title":"Intro","route":"geometry/intro","path":"content/docs/wip.mdx"}]}],"__map":{"getting-started/setup":"content/docs/setup.mdx","getting-started/features":"content/docs/features.mdx","concepts/numbers":"content/docs/numbers.mdx","concepts/math":"content/docs/math.mdx","concepts/rgba":"content/docs/rgba.mdx","concepts/pixel-coders":"content/docs/pixel-coders.mdx","concepts/samplers":"content/docs/samplers.mdx","concepts/composition":"content/docs/composition.mdx","concepts/bitmaps":"content/docs/bitmaps.mdx","concepts/3d":"content/docs/3d.mdx","concepts/canvas":"content/docs/canvas.mdx","drawing/rectangles":"content/docs/rectangles.mdx","drawing/rounded":"content/docs/rounded.mdx","drawing/quadrilaterals":"content/docs/quadrilaterals.mdx","drawing/triangle":"content/docs/triangle.mdx","drawing/triangle-batches":"content/docs/triangle-batches.mdx","drawing/polygons":"content/docs/polygons.mdx","drawing/masks":"content/docs/masks.mdx","drawing/path-fills":"content/docs/path-fills.mdx","drawing/path-stroke":"content/docs/path-stroke.mdx","drawing/bezier-patches":"content/docs/patches.mdx","drawing/lines":"content/docs/lines.mdx","drawing/text":"content/docs/text.mdx","drawing/gradients":"content/docs/gradients.mdx","drawing/more-samplers":"content/docs/more-samplers.mdx","drawing/3d":"content/docs/draw-3d.mdx","geometry/intro":"content/docs/wip.mdx"}}}},"__N_SSG":true}