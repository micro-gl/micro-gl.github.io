{"pageProps":{"data":{"slug":"concepts/rgba","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, \"Currently, microgl works with the following objects to define color\"), mdx(\"h2\", null, \"RGBA info\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/rgba_t.h>\"), \", at the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"microgl\"), \" namespace\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rgba_t\"), \" template is roughly defined as \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"template<uint8_t R, uint8_t G, uint8_t B, uint8_t A>\\nstruct rgba_t {\\n    static constexpr uint8_t r = R;\\n    static constexpr uint8_t g = G;\\n    static constexpr uint8_t b = B;\\n    static constexpr uint8_t a = A;\\n};\\n\")), mdx(\"p\", null, \"This structure holds info about the bit depth and is used by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"pixel-coders\"\n  }, \"pixel encoder\"), \",\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"samplers\"\n  }, \"samplers\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"canvas\"\n  }, \"canvas\"), \" to know at compile time the bit depth of each channel\\nand perform correct and fast math operations.\"), mdx(\"p\", null, \"Usage is as simple as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/rgba_t.h>\\n\\nusing RGB_5650 = rgba_t<5,6,5,0>;\\n\\nauto r_bits = RGB_5650::r;\\nauto g_bits = RGB_5650::g;\\nauto b_bits = RGB_5650::b;\\n\")), mdx(\"h2\", null, \"Color\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/color.h>\"), \", at the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"color\"), \" namespace\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Color\"), \" is a simple struct that holds 4 channels of size 1 byte each.\\nthe color object does not hold the bit depth of the colors. It assumes,\\nthat it is known by the user.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"struct color_t {\\n    color_t(channel_t $r=0, channel_t $g=0, channel_t $b=0, channel_t $a=255)\\n    color_t(const color_t &val)\\n    uint8_t r, g, b, a;\\n};\\n\")), mdx(\"p\", null, \"color bit depth generally ranges from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" up to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(2^bits)-1\"), \", For example, if you have:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"8\"), \" bit channel, then the values it take range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0 to 255\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"7\"), \" bit channel, then the values it take range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0 to 127\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"6\"), \" bit channel, then the values it take range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0 to 63\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"5\"), \" bit channel, then the values it take range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0 to 31\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"4\"), \" bit channel, then the values it take range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0 to 15\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"3\"), \" bit channel, then the values it take range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0 to 7\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"2\"), \" bit channel, then the values it take range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0 to 3\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"1\"), \" bit channel, then the values it take range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0 to 1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"0\"), \" bit channel, then the values it take range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0 to 0\"))), mdx(\"p\", null, \"Usually, at most graphic systems, colors are stored as intensities ranging from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0..1\"), \" per\\nchannel, afterwards, when storing the intensity, it will be quantized or multiplied by\\nthe maximum value of the bit depth, for example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rgb(0.5, 1, 1) => rgb(128, 255, 255)\"), \",\\nBUT, in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \", colors are not processed as intensities at the the pipeline, because we\\nfeel it may hurt performance to add divisions/multiplications per read/write operations.\\nTherefore, atm, colors are not stored as intensities, but as actual quantized values.\\nThis might change in the future, while we explore performant ways to do it and also extend\\nthe type of the channels to contain more bytes if needed.\"), mdx(\"h2\", null, \"Intensity\"), mdx(\"p\", null, \"microgl also defines intensity template defined at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<microgl/intensity.h>\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/intensity.h>\\n\\nintensity<float> in{0.3f, 0.2f, 1.0f}\\nintensity<Q<15>> in{ Q<15>(1)/3, Q<15>(1)/5, Q<15>(1)}\\n\")), mdx(\"p\", null, \"We are exploring ways of making intensities more performant so we can use them more\\nin the pipeline.\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"microgl::color\"), \" namespace\"), mdx(\"p\", null, \"This namespace also defines the following utility methods\"), mdx(\"h3\", null, \"convert_color\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n* convert a color of one depth space into another \\n* \\n* @tparam rgba_from the rgba_t info of the input color \\n* @tparam rgba_to the rgba_t info of the output color\\n* @param input input color\\n* @param output output color\\n*/\\ntemplate<typename rgba_from, typename rgba_to>\\nvoid convert_color(const color_t &input, color_t &output)\\n\")), mdx(\"h3\", null, \"convert_intensity_to_color\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n* convert an intensity to color, example :\\n*\\n* Example: intensity<float>(0.5, 1.0, 1.0f) -> color_t{128, 255, 255}\\n*\\n* @tparam number the underlying type of the intensity\\n* @tparam rgba the rgba_t info we desire to quantize\\n* @param input the input intensity\\n* @param output output color\\n*/\\ntemplate <typename number, typename rgba>\\nvoid convert_intensity_to_color(const intensity<number> &input, color_t &output)\\n\")), mdx(\"h3\", null, \"convert_color_to_intensity\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n* convert a color into intensity object\\n*\\n* Example: color_t{128, 255, 255} -> intensity<float>(0.5, 1.0, 1.0f)\\n*\\n* @tparam number number the underlying type of the intensity\\n* @tparam rgba the rgba_t info of the color\\n* @param input input color\\n* @param output output intensity\\n*/\\ntemplate <typename number, typename rgba>\\nvoid convert_color_to_intensity(const color_t &input, intensity<number> &output)\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\">Currently, microgl works with the following objects to define color</p><h2 class=\"css-0\">RGBA info</h2><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Defined at <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/rgba_t.h&gt;</div>, at the <div class=\"css-qskmz3\">microgl</div> namespace</li></ul><p class=\"css-0\">The <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">rgba_t</div> template is roughly defined as </p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">uint8_t</span><span> R, </span><span style=\"color:#B45EA4\">uint8_t</span><span> G, </span><span style=\"color:#B45EA4\">uint8_t</span><span> B, </span><span style=\"color:#B45EA4\">uint8_t</span><span> A&gt;\n</span><span></span><span class=\"hljs-class\" style=\"color:#B45EA4\">struct</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">rgba_t</span><span class=\"hljs-class\"> {</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">uint8_t</span><span> r = R;\n</span><span>    </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">uint8_t</span><span> g = G;\n</span><span>    </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">uint8_t</span><span> b = B;\n</span><span>    </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">uint8_t</span><span> a = A;\n</span>};\n<!-- -->\n</code></pre></pre><p class=\"css-0\">This structure holds info about the bit depth and is used by <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"pixel-coders\">pixel encoder</a>,\n<a class=\"chakra-link css-1kc89wa\" href=\"samplers\">samplers</a> and <a class=\"chakra-link css-1kc89wa\" href=\"canvas\">canvas</a> to know at compile time the bit depth of each channel\nand perform correct and fast math operations.</p><p class=\"css-0\">Usage is as simple as</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/rgba_t.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> RGB_5650 = </span><span style=\"color:#B45EA4\">rgba_t</span><span>&lt;</span><span style=\"color:#E7CE56\">5</span><span>,</span><span style=\"color:#E7CE56\">6</span><span>,</span><span style=\"color:#E7CE56\">5</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>&gt;;\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> r_bits = RGB_5650::r;\n</span><span></span><span style=\"color:#B45EA4\">auto</span><span> g_bits = RGB_5650::g;\n</span><span></span><span style=\"color:#B45EA4\">auto</span><span> b_bits = RGB_5650::b;\n</span>\n</code></pre></pre><h2 class=\"css-0\">Color</h2><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/color.h&gt;</div>, at the <div class=\"css-qskmz3\">color</div> namespace</li></ul><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Color</strong> is a simple struct that holds 4 channels of size 1 byte each.\nthe color object does not hold the bit depth of the colors. It assumes,\nthat it is known by the user.</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span class=\"hljs-class\" style=\"color:#B45EA4\">struct</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">color_t</span><span class=\"hljs-class\"> {</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">color_t</span><span>(</span><span style=\"color:#B45EA4\">channel_t</span><span> $r=</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#B45EA4\">channel_t</span><span> $g=</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#B45EA4\">channel_t</span><span> $b=</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#B45EA4\">channel_t</span><span> $a=</span><span style=\"color:#E7CE56\">255</span><span>)\n</span><span>    </span><span style=\"color:#B45EA4\">color_t</span><span>(</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">color_t</span><span> &amp;val)\n</span><span>    </span><span style=\"color:#B45EA4\">uint8_t</span><span> r, g, b, a;\n</span>};\n<!-- -->\n</code></pre></pre><p class=\"css-0\">color bit depth generally ranges from <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">0</div> up to <div class=\"css-qskmz3\">(2^bits)-1</div>, For example, if you have:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">8</strong> bit channel, then the values it take range from <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">0 to 255</div></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">7</strong> bit channel, then the values it take range from <div class=\"css-qskmz3\">0 to 127</div></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">6</strong> bit channel, then the values it take range from <div class=\"css-qskmz3\">0 to 63</div></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">5</strong> bit channel, then the values it take range from <div class=\"css-qskmz3\">0 to 31</div></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">4</strong> bit channel, then the values it take range from <div class=\"css-qskmz3\">0 to 15</div></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">3</strong> bit channel, then the values it take range from <div class=\"css-qskmz3\">0 to 7</div></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">2</strong> bit channel, then the values it take range from <div class=\"css-qskmz3\">0 to 3</div></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">1</strong> bit channel, then the values it take range from <div class=\"css-qskmz3\">0 to 1</div></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">0</strong> bit channel, then the values it take range from <div class=\"css-qskmz3\">0 to 0</div></li></ul><p class=\"css-0\">Usually, at most graphic systems, colors are stored as intensities ranging from <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">0..1</div> per\nchannel, afterwards, when storing the intensity, it will be quantized or multiplied by\nthe maximum value of the bit depth, for example <div class=\"css-qskmz3\">rgb(0.5, 1, 1) =&gt; rgb(128, 255, 255)</div>,\nBUT, in <div class=\"css-qskmz3\">microgl</div>, colors are not processed as intensities at the the pipeline, because we\nfeel it may hurt performance to add divisions/multiplications per read/write operations.\nTherefore, atm, colors are not stored as intensities, but as actual quantized values.\nThis might change in the future, while we explore performant ways to do it and also extend\nthe type of the channels to contain more bytes if needed.</p><h2 class=\"css-0\">Intensity</h2><p class=\"css-0\">microgl also defines intensity template defined at <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/intensity.h&gt;</div></p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/intensity.h&gt;</span><span>\n</span>\n<span>intensity&lt;</span><span style=\"color:#B45EA4\">float</span><span>&gt; in{</span><span style=\"color:#E7CE56\">0.3f</span><span>, </span><span style=\"color:#E7CE56\">0.2f</span><span>, </span><span style=\"color:#E7CE56\">1.0f</span><span>}\n</span><span>intensity&lt;Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt;&gt; in{ Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt;(</span><span style=\"color:#E7CE56\">1</span><span>)/</span><span style=\"color:#E7CE56\">3</span><span>, Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt;(</span><span style=\"color:#E7CE56\">1</span><span>)/</span><span style=\"color:#E7CE56\">5</span><span>, Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt;(</span><span style=\"color:#E7CE56\">1</span><span>)}\n</span>\n</code></pre></pre><p class=\"css-0\">We are exploring ways of making intensities more performant so we can use them more\nin the pipeline.</p><h2 class=\"css-0\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl::color</div> namespace</h2><p class=\"css-0\">This namespace also defines the following utility methods</p><h3 class=\"css-0\">convert_color</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\">* convert a color of one depth space into another \n</span><span class=\"hljs-function\">* \n</span><span class=\"hljs-function\">* @tparam rgba_from the rgba_t info of the input color \n</span><span class=\"hljs-function\">* @tparam rgba_to the rgba_t info of the output color\n</span><span class=\"hljs-function\">* @param input input color\n</span><span class=\"hljs-function\">* @param output output color\n</span><span style=\"color:#B6B18B\">*/</span><span>\n</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\">&lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> rgba_from, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> rgba_to&gt;\n</span><span class=\"hljs-function\"></span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">convert_color</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;input, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;output)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span></code></pre></pre><h3 class=\"css-0\">convert_intensity_to_color</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\">* convert an intensity to color, example :\n</span><span class=\"hljs-function\">*\n</span><span class=\"hljs-function\">* Example: intensity&lt;float&gt;(0.5, 1.0, 1.0f) -&gt; color_t{128, 255, 255}\n</span><span class=\"hljs-function\">*\n</span><span class=\"hljs-function\">* @tparam number the underlying type of the intensity\n</span><span class=\"hljs-function\">* @tparam rgba the rgba_t info we desire to quantize\n</span><span class=\"hljs-function\">* @param input the input intensity\n</span><span class=\"hljs-function\">* @param output output color\n</span><span style=\"color:#B6B18B\">*/</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number, </span><span style=\"color:#B45EA4\">typename</span><span> rgba&gt;\n</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">convert_intensity_to_color</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> intensity&lt;number&gt; &amp;input, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;output)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span></code></pre></pre><h3 class=\"css-0\">convert_color_to_intensity</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\">* convert a color into intensity object\n</span><span class=\"hljs-function\">*\n</span><span class=\"hljs-function\">* Example: color_t{128, 255, 255} -&gt; intensity&lt;float&gt;(0.5, 1.0, 1.0f)\n</span><span class=\"hljs-function\">*\n</span><span class=\"hljs-function\">* @tparam number number the underlying type of the intensity\n</span><span class=\"hljs-function\">* @tparam rgba the rgba_t info of the color\n</span><span class=\"hljs-function\">* @param input input color\n</span><span class=\"hljs-function\">* @param output output intensity\n</span><span style=\"color:#B6B18B\">*/</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number, </span><span style=\"color:#B45EA4\">typename</span><span> rgba&gt;\n</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">convert_color_to_intensity</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;input, intensity&lt;number&gt; &amp;output)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span></code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/draw-3d.mdx"}]},{"title":"Geometry","items":[{"title":"Intro","route":"geometry/intro","path":"content/docs/wip.mdx"}]}],"__map":{"getting-started/setup":"content/docs/setup.mdx","getting-started/features":"content/docs/features.mdx","concepts/numbers":"content/docs/numbers.mdx","concepts/math":"content/docs/math.mdx","concepts/rgba":"content/docs/rgba.mdx","concepts/pixel-coders":"content/docs/pixel-coders.mdx","concepts/samplers":"content/docs/samplers.mdx","concepts/composition":"content/docs/composition.mdx","concepts/bitmaps":"content/docs/bitmaps.mdx","concepts/3d":"content/docs/3d.mdx","concepts/canvas":"content/docs/canvas.mdx","drawing/rectangles":"content/docs/rectangles.mdx","drawing/rounded":"content/docs/rounded.mdx","drawing/quadrilaterals":"content/docs/quadrilaterals.mdx","drawing/triangle":"content/docs/triangle.mdx","drawing/triangle-batches":"content/docs/triangle-batches.mdx","drawing/polygons":"content/docs/polygons.mdx","drawing/masks":"content/docs/masks.mdx","drawing/path-fills":"content/docs/path-fills.mdx","drawing/path-stroke":"content/docs/path-stroke.mdx","drawing/bezier-patches":"content/docs/patches.mdx","drawing/lines":"content/docs/lines.mdx","drawing/text":"content/docs/text.mdx","drawing/gradients":"content/docs/gradients.mdx","drawing/more-samplers":"content/docs/more-samplers.mdx","drawing/3d":"content/docs/draw-3d.mdx","geometry/intro":"content/docs/wip.mdx"}}}},"__N_SSG":true}