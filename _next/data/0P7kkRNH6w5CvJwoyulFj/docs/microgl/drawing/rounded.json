{"pageProps":{"data":{"logo":"/logos//microgl-512-logo.png","slug":"drawing/rounded","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Image} = _components;\n  if (!Image) _missingMdxReference(\"Image\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Rounded Shapes\"\n      }), \" come in three flavours:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Rounded Rectangles\"\n        }), \" (supports outline stroking)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Circles\"\n        }), \" (supports outline stroking)\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Arcs\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"all support fast anti-aliasing\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These basic shapes use minimal memory and do not allocate memory or use\\ntessalated geometry so they are very efficient for common usage.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Rounded Rectangle\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Example at \", _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"/examples/example_draw_rounded_rectangle.cpp\"\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(\"div\", {\n      className: \"w-full flex flex-row justify-center my-10 gap-10\",\n      children: [_jsx(Image, {\n        src: \"/images/canvas_rounded_rect.png\",\n        className: \"w-[250px] h-[250px] inline-block\",\n        imgClass: \"\"\n      }), _jsx(Image, {\n        src: \"/images/canvas_rounded_2.png\",\n        className: \"w-[250px] h-[250px] inline-block\",\n        imgClass: \"\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/fast_radial_gradient.h>\\n#include <microgl/samplers/linear_gradient_2_colors.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nfast_radial_gradient<float, 4, Canvas24::rgba> gradient{0.5, 0.5, 0.75};\\nlinear_gradient_2_colors<120, Canvas24::rgba> gradient2Colors{{255,0,255}, {255,0,0}};\\n\\nCanvas24 canvas(640, 480);\\n\\ngradient.addStop(0.0f, {255,0,0});\\ngradient.addStop(0.45f, {255,0,0});\\ngradient.addStop(0.50f, {0,255,0});\\ngradient.addStop(1.f, {255,0,255});\\n\\ncanvas.clear({255,255,255,255});\\ncanvas.drawRoundedRect<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true, number>(\\n        gradient,         // fill(interior) sampler\\n        gradient2Colors,  // stroke(boundary) sampler\\n        10, 10, 300, 300, // l,t,r,b\\n        50, 10);          // radius, stroke-size      \\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Circles\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Example at \", _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"/examples/example_draw_circles.cpp\"\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/canvas_circle.png\",\n      className: \"w-[250px] h-[250px] inline-block my-10 mx-auto\",\n      imgClass: \"\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/fast_radial_gradient.h>\\n#include <microgl/samplers/linear_gradient_2_colors.h>\\n#include <microgl/samplers/flat_color.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n\\nusing namespace microgl;\\nusing namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nlinear_gradient_2_colors<120> gradient2Colors{{255,0,255},\\n                                                {255,0,0}};\\nflat_color<> flatColor{{133,133,133, 255}};\\nCanvas24 canvas(640, 480);\\n\\ncanvas.clear({255,255,255,255});\\ncanvas.drawCircle<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true, number>(\\n        flatColor, gradient2Colors,\\n        200, 200, // center x, y\\n        150, 10,  // radius, stroker size      \\n        255);     // opacity\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Arcs\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Example at \", _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"/examples/example_draw_arcs.cpp\"\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/canvas_arc.png\",\n      className: \"w-[250px] h-[250px] my-10 mx-auto\",\n      imgClass: \"\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"using namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nlinear_gradient_2_colors<120> gradient2Colors{{255,0,255}, {255,0,0}};\\nCanvas24 canvas(640, 480);\\n\\ncanvas.clear({255,255,255,255});\\ncanvas.drawArc<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true, number,  number>(\\n        gradient2Colors, // sampler\\n        200, 200,        // center x, y\\n        50,  20,         // radius, stroke-size\\n        90, 270,         // from angle degrees, to angle degrees\\n        true,            // clock-wise\\n        255);            // opacity        \\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Pie\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Example at \", _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"/examples/example_draw_pie.cpp\"\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/canvas_pie.png\",\n      className: \"w-[250px] h-[250px] my-10 mx-auto\",\n      imgClass: \"\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"using namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nlinear_gradient_2_colors<120> gradient2Colors{{255,0,255}, {255,0,0}};\\nCanvas24 canvas(640, 480);\\n\\ncanvas.clear({255,255,255,255});\\ncanvas.drawPie<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true, number, number>(\\n        gradient2Colors, // sampler\\n        200, 200,        // center x, y\\n        150,             // radius\\n        90, 150,         // from angle degrees, to angle degrees\\n        true,            // clock-wise\\n        255);            //opacity\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Signature API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n\\n    /**\\n     * Draw a rounded rectangle\\n     *\\n     * @tparam BlendMode        the blend mode struct\\n     * @tparam PorterDuff       the alpha compositing struct\\n     * @tparam antialias        antialiasing flag\\n     * @tparam number1          number type of position\\n     * @tparam number2          number type of uv coords\\n     * @tparam Sampler1         sampler type for fill\\n     * @tparam Sampler2         sampler type for stroke\\n     *\\n     * @param sampler_fill      fill sampler reference\\n     * @param sampler_stroke    stroke sampler reference\\n     * @param left              left distance\\n     * @param top               top distance\\n     * @param right             right distance\\n     * @param bottom            bottom distance\\n     * @param radius            radius of corners\\n     * @param stroke_size       stroke size in pixels\\n     * @param opacity           opacity [0..255]\\n     * @param u0                uv coord\\n     * @param v0                uv coord\\n     * @param u1                uv coord\\n     * @param v1                uv coord\\n     */\\n    template<typename BlendMode=blendmode::Normal,\\n             typename PorterDuff=porterduff::FastSourceOverOnOpaque, \\n             bool antialias=false, \\n             typename number1, typename number2=number1, \\n             typename Sampler1, typename Sampler2>\\n    void drawRoundedRect(const Sampler1 & sampler_fill,\\n                         const Sampler2 & sampler_stroke,\\n                         const number1 &left, const number1 &top,\\n                         const number1 &right, const number1 &bottom,\\n                         const number1 &radius, const number1 &stroke_size,\\n                         opacity_t opacity= 255,\\n                         const number2 &u0= number2(0), const number2 &v0= number2(1),\\n                         const number2 &u1= number2(1), const number2 &v1= number2(0));\\n\\n    /**\\n     * Draw a circle shape with fill and stroke\\n     *\\n     * @tparam BlendMode        the blend mode struct\\n     * @tparam PorterDuff       the alpha compositing struct\\n     * @tparam antialias        antialiasing flag\\n     * @tparam number1          number type of position\\n     * @tparam number2          number type of uv coords\\n     * @tparam Sampler1         sampler type for fill\\n     * @tparam Sampler2         sampler type for stroke\\n     *\\n     * @param sampler_fill      fill sampler reference\\n     * @param sampler_stroke    stroke sampler reference\\n     * @param centerX           the center x-coord of the circle\\n     * @param centerY           the center y-coord of the circle\\n     * @param radius            the radius of the circle\\n     * @param stroke_size       the stroke size in pixels\\n     * @param opacity           opacity [0..255]\\n     * @param u0                uv coord\\n     * @param v0                uv coord\\n     * @param u1                uv coord\\n     * @param v1                uv coord\\n     */\\n    template<typename BlendMode=blendmode::Normal,\\n             typename PorterDuff=porterduff::FastSourceOverOnOpaque, \\n             bool antialias=false,\\n             typename number1, typename number2=number1, \\n             typename Sampler1, typename Sampler2>\\n    void drawCircle(const Sampler1 & sampler_fill,\\n                    const Sampler2 & sampler_stroke,\\n                    const number1 &centerX, const number1 &centerY,\\n                    const number1 &radius, const number1 &stroke_size, \\n                    opacity_t opacity=255,\\n                    const number2 &u0=number2(0), const number2 &v0=number2(1),\\n                    const number2 &u1=number2(1), const number2 &v1=number2(0));\\n\\n\\n    /**\\n     * Draw a stroked arc.\\n     * Note: pay attention to the clock-wise argument, for example, clock-wise\\n     * arcs, that have negative arc will be interpreted as empty arcs. This is\\n     * done to support animations without quirks and bugs.\\n     * \\n     * @tparam BlendMode        the blend mode struct\\n     * @tparam PorterDuff       the alpha compositing struct\\n     * @tparam antialias        antialiasing flag\\n     * @tparam number1          number type of position\\n     * @tparam number2          number type of uv coords\\n     * @tparam Sampler1         sampler type for stroke\\n     * \\n     * @param sampler_fill      fill sampler reference\\n     * @param sampler_stroke    stroke sampler reference\\n     * @param centerX           the center x-coord of the circle\\n     * @param centerY           the center y-coord of the circle\\n     * @param radius            the radius of the circle\\n     * @param stroke_size       the stroke size in pixels\\n     * @param from_angle        arc start angle in degrees (not radians)\\n     * @param to_angle          arc end angle in degrees (not radians)\\n     * @param clock_wise        is it a clock-wise arc\\n     * @param opacity           opacity [0..255]\\n     * @param u0                uv coord\\n     * @param v0                uv coord\\n     * @param u1                uv coord\\n     * @param v1                uv coord\\n     * \\n     */\\n    template<typename BlendMode=blendmode::Normal,\\n            typename PorterDuff=porterduff::FastSourceOverOnOpaque, bool antialias=false,\\n            typename number1, typename number2=number1, \\n            typename Sampler>\\n    void drawArc(const Sampler & sampler_fill,\\n                    const number1 &centerX, const number1 &centerY,\\n                    const number1 &radius, const number1 &stroke_size,\\n                    number1 from_angle, number1 to_angle,\\n                    bool clock_wise=true,\\n                    opacity_t opacity=255,\\n                    const number2 &u0=number2(0), const number2 &v0=number2(1),\\n                    const number2 &u1=number2(1), const number2 &v1=number2(0));\\n\\n    /**\\n     * Draw a Pie.\\n     * Note: pay attention to the clock-wise argument, for example, clock-wise\\n     * arcs, that have negative arc will be interpreted as empty arcs. This is\\n     * done to support animations without quirks and bugs.\\n     *\\n     * @tparam BlendMode        the blend mode struct\\n     * @tparam PorterDuff       the alpha compositing struct\\n     * @tparam antialias        antialiasing flag\\n     * @tparam number1          number type of position\\n     * @tparam number2          number type of uv coords\\n     * @tparam Sampler1         sampler type for stroke\\n     *\\n     * @param sampler_fill      fill sampler reference\\n     * @param sampler_stroke    stroke sampler reference\\n     * @param centerX           the center x-coord of the circle\\n     * @param centerY           the center y-coord of the circle\\n     * @param radius            the radius of the circle\\n     * @param from_angle        arc start angle in degrees (not radians)\\n     * @param to_angle          arc end angle in degrees (not radians)\\n     * @param clock_wise        is it a clock-wise arc\\n     * @param opacity           opacity [0..255]\\n     * @param u0                uv coord\\n     * @param v0                uv coord\\n     * @param u1                uv coord\\n     * @param v1                uv coord\\n     *\\n     */\\n    template<typename BlendMode=blendmode::Normal,\\n            typename PorterDuff=porterduff::FastSourceOverOnOpaque, bool antialias=false,\\n            typename number1, typename number2=number1, typename Sampler>\\n    void drawPie(const Sampler & sampler_fill,\\n                 const number1 &centerX, const number1 &centerY,\\n                 const number1 &radius,\\n                 number1 from_angle, number1 to_angle,\\n                 bool clock_wise=true,\\n                 opacity_t opacity=255,\\n                 const number2 &u0=number2(0), const number2 &v0=number2(1),\\n                 const number2 &u1=number2(1), const number2 &v1=number2(0));\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"frontMatter":{},"document":{"name":"docs","logo":"/logos//microgl-512-logo.png","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}