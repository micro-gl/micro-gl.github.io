{"pageProps":{"data":{"slug":"drawing/path-stroke","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Paths strokes\"\n      }), \" are vector graphics strokes defined by lines, bezier paths, elliptic arcs and more.\\n\", _jsx(_components.code, {\n        children: \"microgl\"\n      }), \" supports most SVG spec. We support:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"line joins\"\n        }), \" - none, miter, miter_clip, round, bevel\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"cap\"\n        }), \" - butt, round, square\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"dashes\"\n        }), \" - stroke dash patterns with offset (good for animation)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Stroke line-join enum\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"tessellation::stroke_line_join::none\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"tessellation::stroke_line_join::miter\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"tessellation::stroke_line_join::miter_clip\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"tessellation::stroke_line_join::round\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"tessellation::stroke_line_join::bevel\"\n          })\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Stroke cap enum\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"tessellation::stroke_cap::butt\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"tessellation::stroke_cap::round\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"tessellation::stroke_cap::square\"\n          })\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Examples at \", _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"/examples/example_draw_path_stroke.cpp\"\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(\"div\", {\n      style: {\n        margin: \"auto\"\n      },\n      children: [_jsx(\"img\", {\n        src: \"/images/canvas_stroke.png\",\n        style: {\n          height: \"250px\",\n          display: \"inline-block\"\n        }\n      }), _jsx(\"img\", {\n        src: \"/images/canvas_stroke_dash.png\",\n        style: {\n          height: \"250px\",\n          display: \"inline-block\"\n        }\n      })]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Usage Example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n\\nusing number = float;\\n// using number = double;\\n// using number = Q<12>;\\n// using number = Q<4>;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\n\\nsampling::flat_color<> color_grey {{22, 22, 22, 255}};\\nCanvas24 canvas(W, H);\\n\\npath<number, dynamic_array> path{};\\npath.lineTo({150, 150})\\n    .lineTo({450, 150})\\n    .lineTo({200,450})\\n    .lineTo({300,50})\\n    .lineTo({400,450})\\n    .closePath();\\n\\ncanvas.clear({255, 255, 255, 255});\\ncanvas.drawPathStroke<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true>(\\n        color_grey,\\n        matrix_3x3<number>::identity(),\\n        path,\\n        number{12},\\n        tessellation::stroke_cap::butt,\\n        // tessellation::stroke_cap::round,\\n        // tessellation::stroke_cap::square,\\n\\n        // tessellation::stroke_line_join::bevel,\\n        // tessellation::stroke_line_join::miter,\\n        // tessellation::stroke_line_join::miter_clip,\\n        tessellation::stroke_line_join::round,\\n        4, \\n        // {0, 0}, 0,   // no dash\\n        {50, 20}, 10,   // dash\\n        255);\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Signature API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n    /**\\n     * Draw vector Path stroke\\n     *\\n     * @tparam BlendMode            the blend mode struct\\n     * @tparam PorterDuff           the alpha compositing struct\\n     * @tparam antialias            enable/disable anti-aliasing, currently NOT supported\\n     * @tparam debug                debug mode ?\\n     * @tparam number1              number type of path\\n     * @tparam number2              number type of uv coords\\n     * @tparam Sampler              Sampler type\\n     * @tparam path_container_template the template of the container used by path\\n     *\\n     * @param sampler               sampler reference\\n     * @param transform             3x3 matrix for transform\\n     * @param path                  the path reference\\n     * @param stroke_width          stroke width in pixels\\n     * @param cap                   stroke cap enum {butt, round, square}\\n     * @param line_join             stroke line join {none, miter, miter_clip, round, bevel}\\n     * @param miter_limit           the miter limit\\n     * @param stroke_dash_array     stroke dash pattern, an iterable container of dash pattern\\n     * @param stroke_dash_offset    stroke dash offset\\n     * @param opacity               opacity [0..255]\\n     * @param u0                    uv coord\\n     * @param v0                    uv coord\\n     * @param u1                    uv coord\\n     * @param v1                    uv coord\\n     */\\n    template<typename BlendMode=blendmode::Normal, typename PorterDuff=porterduff::FastSourceOverOnOpaque,\\n            bool antialias=false, bool debug=false,\\n            typename number1=float, typename number2=float,\\n            typename Sampler, class Iterable, template<typename...> class path_container_template>\\n    void drawPathStroke(const Sampler &sampler,\\n                        const matrix_3x3<number1> &transform,\\n                        tessellation::path<number1, path_container_template> &path,\\n                        const number1 &stroke_width=number1(1),\\n                        const tessellation::stroke_cap &cap=tessellation::stroke_cap::butt,\\n                        const tessellation::stroke_line_join &line_join=tessellation::stroke_line_join::bevel,\\n                        int miter_limit=4,\\n                        const Iterable & stroke_dash_array={},\\n                        int stroke_dash_offset=0, opacity_t opacity=255,\\n                        number2 u0=number2(0), number2 v0=number2(1),\\n                        number2 u1=number2(1), number2 v1=number2(0));\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}