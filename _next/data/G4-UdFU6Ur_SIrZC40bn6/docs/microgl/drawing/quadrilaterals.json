{"pageProps":{"data":{"slug":"drawing/quadrilaterals","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Quadrilaterals\"\n      }), \" are polygons with 4 points, that render with perspective correction\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Example at \", _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"/examples/example_draw_quadrilaterals.cpp\"\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/images/canvas_quadri.png\",\n      style: {\n        height: \"250px\",\n        margin: \"auto\"\n      }\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Usage Example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing Texture24= sampling::texture<bitmap<coder::RGB888_ARRAY>>;\\nusing number = float;\\n//using number = Q<15>;\\n\\nCanvas24 canvas(W, H);\\nauto img_2 = resources.loadImageFromCompressedPath(\\\"images/uv_512.png\\\");\\n\\nTexture24 tex(new bitmap<coder::RGB888_ARRAY>(img_2.data, img_2.width, img_2.height));\\n\\ncanvas.clear(intensity<number>{1, 1, 1, 1});\\ncanvas.drawQuadrilateral<blendmode::Normal, porterduff::None<>, false, number, number>(\\n        tex,\\n        0,           0,       0, 1, // 1st x, y, u, v\\n        500,         0,       1, 1, // 2nd x, y, u, v\\n        400,         400,     1, 0, // 3rd x, y, u, v\\n        0,           400,     0, 0, // 4th x, y, u, v\\n        255);\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Signature API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n    /**\\n     * Draw a quadrilateral\\n     *\\n     * @tparam BlendMode        the blend mode struct\\n     * @tparam PorterDuff       the alpha compositing struct\\n     * @tparam antialias        antialiasing flag\\n     * @tparam number1          number type of position\\n     * @tparam number2          number type of uv coords\\n     * @tparam Sampler1         sampler type for fill\\n     * @tparam Sampler2         sampler type for stroke\\n     *\\n     * @param sampler           fill sampler reference\\n     * @param v0_x              1st point x value\\n     * @param v0_y              1st point y value\\n     * @param u0                1st point u value\\n     * @param v0                1st point v value\\n     *\\n     * @param v1_x              2nd point x value\\n     * @param v1_y              2nd point y value\\n     * @param u1                2nd point u value\\n     * @param v1                2nd point v value\\n     *\\n     * @param v2_x              3rd point x value\\n     * @param v2_y              3rd point y value\\n     * @param u2                3rd point u value\\n     * @param v2                3rd point v value\\n     *\\n     * @param v3_x              4th point x value\\n     * @param v3_y              4th point y value\\n     * @param u3                4th point u value\\n     * @param v3                4th point v value\\n     *\\n     * @param opacity           opacity [0..255]\\n     */\\n    template<typename BlendMode=blendmode::Normal,\\n             typename PorterDuff=porterduff::FastSourceOverOnOpaque,\\n             bool antialias=false, \\n             typename number1=float, typename number2=number1, \\n             class Sampler>\\n    void drawQuadrilateral(const Sampler &sampler,\\n                           const number1 & v0_x, const number1 & v0_y, const number2 & u0, const number2 & v0,\\n                           const number1 & v1_x, const number1 & v1_y, const number2 & u1, const number2 & v1,\\n                           const number1 & v2_x, const number1 & v2_y, const number2 & u2, const number2 & v2,\\n                           const number1 & v3_x, const number1 & v3_y, const number2 & u3, const number2 & v3,\\n                           opacity_t opacity = 255);\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}