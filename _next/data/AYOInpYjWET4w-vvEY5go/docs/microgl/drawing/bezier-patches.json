{"pageProps":{"data":{"slug":"drawing/bezier-patches","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bezier Patches\"), \" are cool vector graphics shapes defined by:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quadratic patches patches of size 3x3 \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cubic patches patches of size 4x4 \")), mdx(\"p\", null, \"User can control the count of horizontal and vertical samples for tessalation,\\nThe more, the better. This shape does not include fast anti-aliasing since we have\\ntried not computed the boundary info of the triangle batches it produces.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Examples at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_bezier_patch.cpp\")), \" \")), mdx(\"img\", {\n    src: \"/images/canvas_bezier_patch.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"h1\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n\\nusing number = float;\\n// using number = Q<16>;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing Texture24= sampling::texture<bitmap<coder::RGB888_ARRAY>, sampling::texture_filter::Bilinear>;\\nResources resources{};\\n\\nCanvas24 canvas(W, H);\\n\\nauto img_2 = resources.loadImageFromCompressedPath(\\\"images/uv_512.png\\\");\\nTexture24 tex_uv{new bitmap<coder::RGB888_ARRAY>(img_2.data, img_2.width, img_2.height)};\\n\\nvec3<number> patch[4*4] {\\n            {1.0f, 0.0f},\\n            {170.66f, 0.0f},\\n            {341.333f, 0.0f},\\n            {512.0f, 0.0f},\\n\\n            {1.0f,       170.66f},\\n            {293.44f,    162.78f},\\n            {746.68f,    144.65f},\\n            {512.0f,     170.66f},\\n\\n            {1.0f,       341.33f},\\n            {383.12f,    327.69f},\\n            {1042.79f,   296.31f},\\n            {512.0f,     341.33f},\\n\\n            {1.0f,       512.0f},\\n            {170.66f,    512.0f},\\n            {341.333f,   512.0f},\\n            {512.0f,     512.0f}\\n    };\\n\\nconstexpr int samples = 20;\\ncanvas.clear({255,255,255,255});\\ncanvas.drawBezierPatch<blendmode::Normal, porterduff::None<>, false, false, number, number>(\\n        tex_uv,\\n        matrix_3x3<number>::identity(),\\n        patch, 4, 4, samples, samples,\\n        0, 1, 1, 0,\\n        255);\\n};\\n\\n\")), mdx(\"h1\", null, \"Signature API\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n    /**\\n     * Draw a Quadratic or Cubic bezier patch\\n     *\\n     * @tparam BlendMode    the blend mode struct\\n     * @tparam PorterDuff   the alpha compositing struct\\n     * @tparam antialias    enable/disable anti-aliasing, currently NOT supported\\n     * @tparam debug        enable debug mode ?\\n     * @tparam number1      number type for vertices\\n     * @tparam number2      number type for uv coords\\n     * @tparam Sampler      type of sampler\\n     *\\n     * @param sampler       sampler reference\\n     * @param transform     3x3 matrix transform\\n     * @param mesh          4*4=16 or 3*3=9 patch\\n     * @param uOrder        3 or 4 (quadratic vs cubic)\\n     * @param vOrder        3 or 4 (quadratic vs cubic)\\n     * @param uSamples      the number of samples to take along U axis\\n     * @param vSamples      the number of samples to take along V axis\\n     * @param u0            uv coord\\n     * @param v0            uv coord\\n     * @param u1            uv coord\\n     * @param v1            uv coord\\n     * @param opacity       opacity [0..255]\\n     */\\n    template<typename BlendMode=blendmode::Normal, \\n             typename PorterDuff=porterduff::FastSourceOverOnOpaque,\\n             bool antialias=false, bool debug=false, \\n             typename number1, typename number2=number1, \\n             typename Sampler>\\n    void drawBezierPatch(const Sampler &sampler,\\n                         const matrix_3x3<number1> &transform,\\n                         const vec3<number1> *mesh,\\n                         unsigned uOrder, unsigned vOrder,\\n                         unsigned uSamples=20, unsigned vSamples=20,\\n                         number2 u0=number2(0), number2 v0=number2(1),\\n                         number2 u1=number2(1), number2 v1=number2(0),\\n                         opacity_t opacity=255);\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Bezier Patches</strong> are cool vector graphics shapes defined by:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Quadratic patches patches of size 3x3 </li><li class=\"css-b0qdn7\">Cubic patches patches of size 4x4 </li></ul><p class=\"css-0\">User can control the count of horizontal and vertical samples for tessalation,\nThe more, the better. This shape does not include fast anti-aliasing since we have\ntried not computed the boundary info of the triangle batches it produces.</p><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">Examples at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">/examples/example_draw_bezier_patch.cpp</div></strong> </p></blockquote><img src=\"/images/canvas_bezier_patch.png\" style=\"height:250px;margin:auto\"/><h1 class=\"css-0\">Usage Example</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_ARRAY.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;16&gt;;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Texture24= sampling::texture&lt;bitmap&lt;coder::RGB888_ARRAY&gt;, sampling::texture_filter::Bilinear&gt;;\n</span>Resources resources{};\n<!-- -->\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(W, H)</span><span>;\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> img_2 = resources.loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/uv_512.png&quot;</span><span>);\n</span><span>Texture24 tex_uv{</span><span style=\"color:#B45EA4\">new</span><span> bitmap&lt;coder::RGB888_ARRAY&gt;(img_2.data, img_2.width, img_2.height)};\n</span>\n<span>vec3&lt;number&gt; patch[</span><span style=\"color:#E7CE56\">4</span><span>*</span><span style=\"color:#E7CE56\">4</span><span>] {\n</span><span>            {</span><span style=\"color:#E7CE56\">1.0f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">170.66f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">341.333f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">512.0f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span>\n<span>            {</span><span style=\"color:#E7CE56\">1.0f</span><span>,       </span><span style=\"color:#E7CE56\">170.66f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">293.44f</span><span>,    </span><span style=\"color:#E7CE56\">162.78f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">746.68f</span><span>,    </span><span style=\"color:#E7CE56\">144.65f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">512.0f</span><span>,     </span><span style=\"color:#E7CE56\">170.66f</span><span>},\n</span>\n<span>            {</span><span style=\"color:#E7CE56\">1.0f</span><span>,       </span><span style=\"color:#E7CE56\">341.33f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">383.12f</span><span>,    </span><span style=\"color:#E7CE56\">327.69f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">1042.79f</span><span>,   </span><span style=\"color:#E7CE56\">296.31f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">512.0f</span><span>,     </span><span style=\"color:#E7CE56\">341.33f</span><span>},\n</span>\n<span>            {</span><span style=\"color:#E7CE56\">1.0f</span><span>,       </span><span style=\"color:#E7CE56\">512.0f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">170.66f</span><span>,    </span><span style=\"color:#E7CE56\">512.0f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">341.333f</span><span>,   </span><span style=\"color:#E7CE56\">512.0f</span><span>},\n</span><span>            {</span><span style=\"color:#E7CE56\">512.0f</span><span>,     </span><span style=\"color:#E7CE56\">512.0f</span><span>}\n</span>    };\n<!-- -->\n<span></span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">int</span><span> samples = </span><span style=\"color:#E7CE56\">20</span><span>;\n</span><span>canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>canvas.drawBezierPatch&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, </span><span style=\"color:#E7CE56\">false</span><span>, number, number&gt;(\n</span>        tex_uv,\n<!-- -->        matrix_3x3&lt;number&gt;::identity(),\n<span>        patch, </span><span style=\"color:#E7CE56\">4</span><span>, </span><span style=\"color:#E7CE56\">4</span><span>, samples, samples,\n</span><span>        </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>,\n</span><span>        </span><span style=\"color:#E7CE56\">255</span><span>);\n</span>};\n<!-- -->\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Signature API</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam bitmap_type  the bitmap type\n</span><span style=\"color:#B6B18B\"> * @tparam options      the options bitset\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> bitmap_type, </span><span style=\"color:#B45EA4\">uint8_t</span><span> options=CANVAS_OPT_default&gt;\n</span>class canvas {\n<span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw a Quadratic or Cubic bezier patch\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @tparam BlendMode    the blend mode struct\n</span><span style=\"color:#B6B18B\">     * @tparam PorterDuff   the alpha compositing struct\n</span><span style=\"color:#B6B18B\">     * @tparam antialias    enable/disable anti-aliasing, currently NOT supported\n</span><span style=\"color:#B6B18B\">     * @tparam debug        enable debug mode ?\n</span><span style=\"color:#B6B18B\">     * @tparam number1      number type for vertices\n</span><span style=\"color:#B6B18B\">     * @tparam number2      number type for uv coords\n</span><span style=\"color:#B6B18B\">     * @tparam Sampler      type of sampler\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param sampler       sampler reference\n</span><span style=\"color:#B6B18B\">     * @param transform     3x3 matrix transform\n</span><span style=\"color:#B6B18B\">     * @param mesh          4*4=16 or 3*3=9 patch\n</span><span style=\"color:#B6B18B\">     * @param uOrder        3 or 4 (quadratic vs cubic)\n</span><span style=\"color:#B6B18B\">     * @param vOrder        3 or 4 (quadratic vs cubic)\n</span><span style=\"color:#B6B18B\">     * @param uSamples      the number of samples to take along U axis\n</span><span style=\"color:#B6B18B\">     * @param vSamples      the number of samples to take along V axis\n</span><span style=\"color:#B6B18B\">     * @param u0            uv coord\n</span><span style=\"color:#B6B18B\">     * @param v0            uv coord\n</span><span style=\"color:#B6B18B\">     * @param u1            uv coord\n</span><span style=\"color:#B6B18B\">     * @param v1            uv coord\n</span><span style=\"color:#B6B18B\">     * @param opacity       opacity [0..255]\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> BlendMode=blendmode::Normal, \n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> PorterDuff=porterduff::FastSourceOverOnOpaque,\n</span><span>             </span><span style=\"color:#B45EA4\">bool</span><span> antialias=</span><span style=\"color:#E7CE56\">false</span><span>, </span><span style=\"color:#B45EA4\">bool</span><span> debug=</span><span style=\"color:#E7CE56\">false</span><span>, \n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> number1, </span><span style=\"color:#B45EA4\">typename</span><span> number2=number1, \n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> Sampler&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> drawBezierPatch(</span><span style=\"color:#B45EA4\">const</span><span> Sampler &amp;sampler,\n</span><span>                         </span><span style=\"color:#B45EA4\">const</span><span> matrix_3x3&lt;number1&gt; &amp;transform,\n</span><span>                         </span><span style=\"color:#B45EA4\">const</span><span> vec3&lt;number1&gt; *mesh,\n</span><span>                         </span><span style=\"color:#B45EA4\">unsigned</span><span> uOrder, </span><span style=\"color:#B45EA4\">unsigned</span><span> vOrder,\n</span><span>                         </span><span style=\"color:#B45EA4\">unsigned</span><span> uSamples=</span><span style=\"color:#E7CE56\">20</span><span>, </span><span style=\"color:#B45EA4\">unsigned</span><span> vSamples=</span><span style=\"color:#E7CE56\">20</span><span>,\n</span><span>                         number2 u0=number2(</span><span style=\"color:#E7CE56\">0</span><span>), number2 v0=number2(</span><span style=\"color:#E7CE56\">1</span><span>),\n</span><span>                         number2 u1=number2(</span><span style=\"color:#E7CE56\">1</span><span>), number2 v1=number2(</span><span style=\"color:#E7CE56\">0</span><span>),\n</span><span>                         </span><span style=\"color:#B45EA4\">opacity_t</span><span> opacity=</span><span style=\"color:#E7CE56\">255</span><span>);\n</span>\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}