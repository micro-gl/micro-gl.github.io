{"pageProps":{"data":{"slug":"drawing/masks","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Masks\"), \" drawing is self explanatory. with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \", you can use any \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"samplers\"\n  }, \"sampler\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rgba\"), \" channel with or without inversion as the source for the mask.\"), mdx(\"p\", null, \"More specificlly, using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"masks::chrome_mode\")), \" enum :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"red_channel\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"green_channel\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"blue_channel\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"alpha_channel\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"red_channel_inverted\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"green_channel_inverted\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"blue_channel_inverted\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"alpha_channel_inverted\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_masks.cpp\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you want to mask a sampler, please refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/drawing/more-samplers\"\n  }, \"masking sampler\"))), mdx(\"img\", {\n    src: \"/images/canvas_mask.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"h1\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n\\nusing namespace microgl::sampling;\\nusing Canvas24  = canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing Texture24 = texture<bitmap<coder::RGB888_ARRAY>>;\\nusing Texture32 = texture<bitmap<coder::RGBA8888_ARRAY>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nbool draw_first_mask = true;\\n\\nCanvas24 canvas(W, H);\\n\\nauto img_0 = resources.loadImageFromCompressedPath(\\\"images/dog_32bit.png\\\");\\nauto img_1 = resources.loadImageFromCompressedPath(\\\"images/charsprites.png\\\");\\nauto img_3 = resources.loadImageFromCompressedPath(\\\"images/bw_8bits.png\\\");\\n\\nTexture24 tex_1{new bitmap<coder::RGB888_ARRAY>(img_1.data, img_1.width, img_1.height)};\\nTexture24 tex_mask{new bitmap<coder::RGB888_ARRAY>(img_3.data, img_3.width, img_3.height)};\\nTexture32 tex_mask_2{new bitmap<coder::RGBA8888_ARRAY>(img_0.data, img_0.width, img_0.height)};\\n\\ncanvas.clear({255,255,255,255});\\ncanvas.drawRect<blendmode::Normal, porterduff::None<>>(\\n                tex_1, 0.0f, 0.0f, 300.0f, 300.0f);\\n\\nif(draw_first_mask)\\n    canvas.drawMask(masks::chrome_mode::alpha_channel, // use alpha channel\\n                tex_mask_2, 0.0f, 0.0f, 300.0f, 300.0f);\\nelse\\n    canvas.drawMask(masks::chrome_mode::red_channel,   // use red channel     \\n                tex_mask, 0.0f, 0.0f, 300.0f, 300.0f);\\n\\n\")), mdx(\"h1\", null, \"Signature API\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n    /**\\n     * Draw a mask on the canvas\\n     *\\n     * @tparam number1  number type of positions\\n     * @tparam number2  number type of uv coords\\n     * @tparam Sampler  sampler type\\n     *\\n     * @param mode      the mode/channel to use from the sampler as mask\\n     * @param sampler   the sampler reference\\n     * @param left      the left position\\n     * @param top       the top position\\n     * @param right     the right position\\n     * @param bottom    the bottom position\\n     * @param u0        uv coord\\n     * @param v0        uv coord\\n     * @param u1        uv coord\\n     * @param v1        uv coord\\n     * @param opacity   opacity [0..255]\\n     */\\n    template <typename number1, typename number2=number1, \\n              typename Sampler>\\n    void drawMask(const masks::chrome_mode &mode,\\n                  const Sampler &sampler,\\n                  number1 left, number1 top,\\n                  number1 right, number1 bottom,\\n                  number2 u0=number2(0), number2 v0=number2(1),\\n                  number2 u1=number2(1), number2 v1=number2(0),\\n                  opacity_t opacity = 255);\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Masks</strong> drawing is self explanatory. with <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div>, you can use any <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"samplers\">sampler</a>\n<div class=\"css-qskmz3\">rgba</div> channel with or without inversion as the source for the mask.</p><p class=\"css-0\">More specificlly, using the <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">masks::chrome_mode</div></strong> enum :</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">red_channel</strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">green_channel</strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">blue_channel</strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">alpha_channel</strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">red_channel_inverted</strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">green_channel_inverted</strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">blue_channel_inverted</strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">alpha_channel_inverted</strong></li></ul><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">Example at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">/examples/example_draw_masks.cpp</div></strong></p></blockquote><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">If you want to mask a sampler, please refer to <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"/docs/drawing/more-samplers\">masking sampler</a></p></blockquote><img src=\"/images/canvas_mask.png\" style=\"height:250px;margin:auto\"/><h1 class=\"css-0\">Usage Example</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_ARRAY.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24  = canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Texture24 = texture&lt;bitmap&lt;coder::RGB888_ARRAY&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Texture32 = texture&lt;bitmap&lt;coder::RGBA8888_ARRAY&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">bool</span><span> draw_first_mask = </span><span style=\"color:#E7CE56\">true</span><span>;\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(W, H)</span><span>;\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> img_0 = resources.loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/dog_32bit.png&quot;</span><span>);\n</span><span></span><span style=\"color:#B45EA4\">auto</span><span> img_1 = resources.loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/charsprites.png&quot;</span><span>);\n</span><span></span><span style=\"color:#B45EA4\">auto</span><span> img_3 = resources.loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/bw_8bits.png&quot;</span><span>);\n</span>\n<span>Texture24 tex_1{</span><span style=\"color:#B45EA4\">new</span><span> bitmap&lt;coder::RGB888_ARRAY&gt;(img_1.data, img_1.width, img_1.height)};\n</span><span>Texture24 tex_mask{</span><span style=\"color:#B45EA4\">new</span><span> bitmap&lt;coder::RGB888_ARRAY&gt;(img_3.data, img_3.width, img_3.height)};\n</span><span>Texture32 tex_mask_2{</span><span style=\"color:#B45EA4\">new</span><span> bitmap&lt;coder::RGBA8888_ARRAY&gt;(img_0.data, img_0.width, img_0.height)};\n</span>\n<span>canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span>canvas.drawRect&lt;blendmode::Normal, porterduff::None&lt;&gt;&gt;(\n<span>                tex_1, </span><span style=\"color:#E7CE56\">0.0f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>, </span><span style=\"color:#E7CE56\">300.0f</span><span>, </span><span style=\"color:#E7CE56\">300.0f</span><span>);\n</span>\n<span></span><span style=\"color:#B45EA4\">if</span><span>(draw_first_mask)\n</span><span>    canvas.drawMask(masks::chrome_mode::alpha_channel, </span><span style=\"color:#B6B18B\">// use alpha channel</span><span>\n</span><span>                tex_mask_2, </span><span style=\"color:#E7CE56\">0.0f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>, </span><span style=\"color:#E7CE56\">300.0f</span><span>, </span><span style=\"color:#E7CE56\">300.0f</span><span>);\n</span><span></span><span style=\"color:#B45EA4\">else</span><span>\n</span><span>    canvas.drawMask(masks::chrome_mode::red_channel,   </span><span style=\"color:#B6B18B\">// use red channel     </span><span>\n</span><span>                tex_mask, </span><span style=\"color:#E7CE56\">0.0f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>, </span><span style=\"color:#E7CE56\">300.0f</span><span>, </span><span style=\"color:#E7CE56\">300.0f</span><span>);\n</span>\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Signature API</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam bitmap_type  the bitmap type\n</span><span style=\"color:#B6B18B\"> * @tparam options      the options bitset\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> bitmap_type, </span><span style=\"color:#B45EA4\">uint8_t</span><span> options=CANVAS_OPT_default&gt;\n</span>class canvas {\n<span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw a mask on the canvas\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @tparam number1  number type of positions\n</span><span style=\"color:#B6B18B\">     * @tparam number2  number type of uv coords\n</span><span style=\"color:#B6B18B\">     * @tparam Sampler  sampler type\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param mode      the mode/channel to use from the sampler as mask\n</span><span style=\"color:#B6B18B\">     * @param sampler   the sampler reference\n</span><span style=\"color:#B6B18B\">     * @param left      the left position\n</span><span style=\"color:#B6B18B\">     * @param top       the top position\n</span><span style=\"color:#B6B18B\">     * @param right     the right position\n</span><span style=\"color:#B6B18B\">     * @param bottom    the bottom position\n</span><span style=\"color:#B6B18B\">     * @param u0        uv coord\n</span><span style=\"color:#B6B18B\">     * @param v0        uv coord\n</span><span style=\"color:#B6B18B\">     * @param u1        uv coord\n</span><span style=\"color:#B6B18B\">     * @param v1        uv coord\n</span><span style=\"color:#B6B18B\">     * @param opacity   opacity [0..255]\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number1, </span><span style=\"color:#B45EA4\">typename</span><span> number2=number1, \n</span><span>              </span><span style=\"color:#B45EA4\">typename</span><span> Sampler&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> drawMask(</span><span style=\"color:#B45EA4\">const</span><span> masks::chrome_mode &amp;mode,\n</span><span>                  </span><span style=\"color:#B45EA4\">const</span><span> Sampler &amp;sampler,\n</span>                  number1 left, number1 top,\n<!-- -->                  number1 right, number1 bottom,\n<span>                  number2 u0=number2(</span><span style=\"color:#E7CE56\">0</span><span>), number2 v0=number2(</span><span style=\"color:#E7CE56\">1</span><span>),\n</span><span>                  number2 u1=number2(</span><span style=\"color:#E7CE56\">1</span><span>), number2 v1=number2(</span><span style=\"color:#E7CE56\">0</span><span>),\n</span><span>                  </span><span style=\"color:#B45EA4\">opacity_t</span><span> opacity = </span><span style=\"color:#E7CE56\">255</span><span>);\n</span>\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}