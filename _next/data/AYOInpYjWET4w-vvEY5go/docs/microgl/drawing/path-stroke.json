{"pageProps":{"data":{"slug":"drawing/path-stroke","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Paths strokes\"), \" are vector graphics strokes defined by lines, bezier paths, elliptic arcs and more.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" supports most SVG spec. We support:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"line joins\"), \" - none, miter, miter_clip, round, bevel\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"cap\"), \" - butt, round, square\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"dashes\"), \" - stroke dash patterns with offset (good for animation)\")), mdx(\"h3\", null, \"Stroke line-join enum\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellation::stroke_line_join::none\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellation::stroke_line_join::miter\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellation::stroke_line_join::miter_clip\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellation::stroke_line_join::round\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellation::stroke_line_join::bevel\")))), mdx(\"h3\", null, \"Stroke cap enum\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellation::stroke_cap::butt\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellation::stroke_cap::round\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellation::stroke_cap::square\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Examples at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_path_stroke.cpp\")), \" \")), mdx(\"div\", {\n    style: {\n      margin: \"auto\"\n    }\n  }, mdx(\"img\", {\n    src: \"/images/canvas_stroke.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  }), mdx(\"img\", {\n    src: \"/images/canvas_stroke_dash.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  })), mdx(\"h1\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n\\nusing number = float;\\n// using number = double;\\n// using number = Q<12>;\\n// using number = Q<4>;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\n\\nsampling::flat_color<> color_grey {{22, 22, 22, 255}};\\nCanvas24 canvas(W, H);\\n\\npath<number, dynamic_array> path{};\\npath.lineTo({150, 150})\\n    .lineTo({450, 150})\\n    .lineTo({200,450})\\n    .lineTo({300,50})\\n    .lineTo({400,450})\\n    .closePath();\\n\\ncanvas.clear({255, 255, 255, 255});\\ncanvas.drawPathStroke<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true>(\\n        color_grey,\\n        matrix_3x3<number>::identity(),\\n        path,\\n        number{12},\\n        tessellation::stroke_cap::butt,\\n        // tessellation::stroke_cap::round,\\n        // tessellation::stroke_cap::square,\\n\\n        // tessellation::stroke_line_join::bevel,\\n        // tessellation::stroke_line_join::miter,\\n        // tessellation::stroke_line_join::miter_clip,\\n        tessellation::stroke_line_join::round,\\n        4, \\n        // {0, 0}, 0,   // no dash\\n        {50, 20}, 10,   // dash\\n        255);\\n\\n\")), mdx(\"h1\", null, \"Signature API\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n    /**\\n     * Draw vector Path stroke\\n     *\\n     * @tparam BlendMode            the blend mode struct\\n     * @tparam PorterDuff           the alpha compositing struct\\n     * @tparam antialias            enable/disable anti-aliasing, currently NOT supported\\n     * @tparam debug                debug mode ?\\n     * @tparam number1              number type of path\\n     * @tparam number2              number type of uv coords\\n     * @tparam Sampler              Sampler type\\n     * @tparam path_container_template the template of the container used by path\\n     *\\n     * @param sampler               sampler reference\\n     * @param transform             3x3 matrix for transform\\n     * @param path                  the path reference\\n     * @param stroke_width          stroke width in pixels\\n     * @param cap                   stroke cap enum {butt, round, square}\\n     * @param line_join             stroke line join {none, miter, miter_clip, round, bevel}\\n     * @param miter_limit           the miter limit\\n     * @param stroke_dash_array     stroke dash pattern, an iterable container of dash pattern\\n     * @param stroke_dash_offset    stroke dash offset\\n     * @param opacity               opacity [0..255]\\n     * @param u0                    uv coord\\n     * @param v0                    uv coord\\n     * @param u1                    uv coord\\n     * @param v1                    uv coord\\n     */\\n    template<typename BlendMode=blendmode::Normal, typename PorterDuff=porterduff::FastSourceOverOnOpaque,\\n            bool antialias=false, bool debug=false,\\n            typename number1=float, typename number2=float,\\n            typename Sampler, class Iterable, template<typename...> class path_container_template>\\n    void drawPathStroke(const Sampler &sampler,\\n                        const matrix_3x3<number1> &transform,\\n                        tessellation::path<number1, path_container_template> &path,\\n                        const number1 &stroke_width=number1(1),\\n                        const tessellation::stroke_cap &cap=tessellation::stroke_cap::butt,\\n                        const tessellation::stroke_line_join &line_join=tessellation::stroke_line_join::bevel,\\n                        int miter_limit=4,\\n                        const Iterable & stroke_dash_array={},\\n                        int stroke_dash_offset=0, opacity_t opacity=255,\\n                        number2 u0=number2(0), number2 v0=number2(1),\\n                        number2 u1=number2(1), number2 v1=number2(0));\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Paths strokes</strong> are vector graphics strokes defined by lines, bezier paths, elliptic arcs and more.\n<style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div> supports most SVG spec. We support:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">line joins</strong> - none, miter, miter_clip, round, bevel</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">cap</strong> - butt, round, square</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">dashes</strong> - stroke dash patterns with offset (good for animation)</li></ul><h3 class=\"css-0\">Stroke line-join enum</h3><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">tessellation::stroke_line_join::none</div></strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">tessellation::stroke_line_join::miter</div></strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">tessellation::stroke_line_join::miter_clip</div></strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">tessellation::stroke_line_join::round</div></strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">tessellation::stroke_line_join::bevel</div></strong></li></ul><h3 class=\"css-0\">Stroke cap enum</h3><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">tessellation::stroke_cap::butt</div></strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">tessellation::stroke_cap::round</div></strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">tessellation::stroke_cap::square</div></strong></li></ul><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">Examples at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">/examples/example_draw_path_stroke.cpp</div></strong> </p></blockquote><div style=\"margin:auto\"><img src=\"/images/canvas_stroke.png\" style=\"height:250px;display:inline-block\"/><img src=\"/images/canvas_stroke_dash.png\" style=\"height:250px;display:inline-block\"/></div><h1 class=\"css-0\">Usage Example</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = double;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;4&gt;;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span>\n<span>sampling::flat_color&lt;&gt; color_grey {{</span><span style=\"color:#E7CE56\">22</span><span>, </span><span style=\"color:#E7CE56\">22</span><span>, </span><span style=\"color:#E7CE56\">22</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>}};\n</span><span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(W, H)</span><span>;\n</span>\n<!-- -->path&lt;number, dynamic_array&gt; path{};\n<span>path.lineTo({</span><span style=\"color:#E7CE56\">150</span><span>, </span><span style=\"color:#E7CE56\">150</span><span>})\n</span><span>    .lineTo({</span><span style=\"color:#E7CE56\">450</span><span>, </span><span style=\"color:#E7CE56\">150</span><span>})\n</span><span>    .lineTo({</span><span style=\"color:#E7CE56\">200</span><span>,</span><span style=\"color:#E7CE56\">450</span><span>})\n</span><span>    .lineTo({</span><span style=\"color:#E7CE56\">300</span><span>,</span><span style=\"color:#E7CE56\">50</span><span>})\n</span><span>    .lineTo({</span><span style=\"color:#E7CE56\">400</span><span>,</span><span style=\"color:#E7CE56\">450</span><span>})\n</span>    .closePath();\n<!-- -->\n<span>canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>canvas.drawPathStroke&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">true</span><span>&gt;(\n</span>        color_grey,\n<!-- -->        matrix_3x3&lt;number&gt;::identity(),\n<!-- -->        path,\n<span>        number{</span><span style=\"color:#E7CE56\">12</span><span>},\n</span>        tessellation::stroke_cap::butt,\n<span>        </span><span style=\"color:#B6B18B\">// tessellation::stroke_cap::round,</span><span>\n</span><span>        </span><span style=\"color:#B6B18B\">// tessellation::stroke_cap::square,</span><span>\n</span>\n<span>        </span><span style=\"color:#B6B18B\">// tessellation::stroke_line_join::bevel,</span><span>\n</span><span>        </span><span style=\"color:#B6B18B\">// tessellation::stroke_line_join::miter,</span><span>\n</span><span>        </span><span style=\"color:#B6B18B\">// tessellation::stroke_line_join::miter_clip,</span><span>\n</span>        tessellation::stroke_line_join::round,\n<span>        </span><span style=\"color:#E7CE56\">4</span><span>, \n</span><span>        </span><span style=\"color:#B6B18B\">// {0, 0}, 0,   // no dash</span><span>\n</span><span>        {</span><span style=\"color:#E7CE56\">50</span><span>, </span><span style=\"color:#E7CE56\">20</span><span>}, </span><span style=\"color:#E7CE56\">10</span><span>,   </span><span style=\"color:#B6B18B\">// dash</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">255</span><span>);\n</span>\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Signature API</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam bitmap_type  the bitmap type\n</span><span style=\"color:#B6B18B\"> * @tparam options      the options bitset\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> bitmap_type, </span><span style=\"color:#B45EA4\">uint8_t</span><span> options=CANVAS_OPT_default&gt;\n</span>class canvas {\n<span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw vector Path stroke\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @tparam BlendMode            the blend mode struct\n</span><span style=\"color:#B6B18B\">     * @tparam PorterDuff           the alpha compositing struct\n</span><span style=\"color:#B6B18B\">     * @tparam antialias            enable/disable anti-aliasing, currently NOT supported\n</span><span style=\"color:#B6B18B\">     * @tparam debug                debug mode ?\n</span><span style=\"color:#B6B18B\">     * @tparam number1              number type of path\n</span><span style=\"color:#B6B18B\">     * @tparam number2              number type of uv coords\n</span><span style=\"color:#B6B18B\">     * @tparam Sampler              Sampler type\n</span><span style=\"color:#B6B18B\">     * @tparam path_container_template the template of the container used by path\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param sampler               sampler reference\n</span><span style=\"color:#B6B18B\">     * @param transform             3x3 matrix for transform\n</span><span style=\"color:#B6B18B\">     * @param path                  the path reference\n</span><span style=\"color:#B6B18B\">     * @param stroke_width          stroke width in pixels\n</span><span style=\"color:#B6B18B\">     * @param cap                   stroke cap enum {butt, round, square}\n</span><span style=\"color:#B6B18B\">     * @param line_join             stroke line join {none, miter, miter_clip, round, bevel}\n</span><span style=\"color:#B6B18B\">     * @param miter_limit           the miter limit\n</span><span style=\"color:#B6B18B\">     * @param stroke_dash_array     stroke dash pattern, an iterable container of dash pattern\n</span><span style=\"color:#B6B18B\">     * @param stroke_dash_offset    stroke dash offset\n</span><span style=\"color:#B6B18B\">     * @param opacity               opacity [0..255]\n</span><span style=\"color:#B6B18B\">     * @param u0                    uv coord\n</span><span style=\"color:#B6B18B\">     * @param v0                    uv coord\n</span><span style=\"color:#B6B18B\">     * @param u1                    uv coord\n</span><span style=\"color:#B6B18B\">     * @param v1                    uv coord\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> BlendMode=blendmode::Normal, </span><span style=\"color:#B45EA4\">typename</span><span> PorterDuff=porterduff::FastSourceOverOnOpaque,\n</span><span>            </span><span style=\"color:#B45EA4\">bool</span><span> antialias=</span><span style=\"color:#E7CE56\">false</span><span>, </span><span style=\"color:#B45EA4\">bool</span><span> debug=</span><span style=\"color:#E7CE56\">false</span><span>,\n</span><span>            </span><span style=\"color:#B45EA4\">typename</span><span> number1=</span><span style=\"color:#B45EA4\">float</span><span>, </span><span style=\"color:#B45EA4\">typename</span><span> number2=</span><span style=\"color:#B45EA4\">float</span><span>,\n</span><span>            </span><span style=\"color:#B45EA4\">typename</span><span> Sampler, class Iterable, </span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span>...&gt; class path_container_template&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> drawPathStroke(</span><span style=\"color:#B45EA4\">const</span><span> Sampler &amp;sampler,\n</span><span>                        </span><span style=\"color:#B45EA4\">const</span><span> matrix_3x3&lt;number1&gt; &amp;transform,\n</span>                        tessellation::path&lt;number1, path_container_template&gt; &amp;path,\n<span>                        </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;stroke_width=number1(</span><span style=\"color:#E7CE56\">1</span><span>),\n</span><span>                        </span><span style=\"color:#B45EA4\">const</span><span> tessellation::stroke_cap &amp;cap=tessellation::stroke_cap::butt,\n</span><span>                        </span><span style=\"color:#B45EA4\">const</span><span> tessellation::stroke_line_join &amp;line_join=tessellation::stroke_line_join::bevel,\n</span><span>                        </span><span style=\"color:#B45EA4\">int</span><span> miter_limit=</span><span style=\"color:#E7CE56\">4</span><span>,\n</span><span>                        </span><span style=\"color:#B45EA4\">const</span><span> Iterable &amp; stroke_dash_array={},\n</span><span>                        </span><span style=\"color:#B45EA4\">int</span><span> stroke_dash_offset=</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#B45EA4\">opacity_t</span><span> opacity=</span><span style=\"color:#E7CE56\">255</span><span>,\n</span><span>                        number2 u0=number2(</span><span style=\"color:#E7CE56\">0</span><span>), number2 v0=number2(</span><span style=\"color:#E7CE56\">1</span><span>),\n</span><span>                        number2 u1=number2(</span><span style=\"color:#E7CE56\">1</span><span>), number2 v1=number2(</span><span style=\"color:#E7CE56\">0</span><span>));\n</span>\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}