{"pageProps":{"data":{"slug":"concepts/math","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \", for each new \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/numbers\"\n  }, \"number\"), \" type you use, a corresponding set of math functions overloads\\nhave to be defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl::math\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"namespace\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" supports any user-defined number type, that conforms\\nto the definitions and operators of a number type. This way \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" becomes number type agnostic and does not assume\\nany number type, which makes it for example easy to implement graphics without \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FPU\"), \" or with any type of precision.\"), mdx(\"h2\", null, \"Math functions\"), mdx(\"p\", null, \"We require to implement the following math functions overloads per a number type\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c++\"\n  }, \"using number = ... // your type\\n\\nnamesapce microgl {\\n  namesapce math {\\n    number to_fixed(const number val, unsigned char precision)\\n    number sqrt(const number val)\\n    number sin(const number radians)\\n    number cos(const number radians)\\n    number tan(const number radians)\\n    number mod(number numer, number denom)\\n  }\\n}\\n\")), mdx(\"p\", null, \"Out of the box, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" implements 4 math variations:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"non_std_q_math.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Q\"), \" numbers math functions, that \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"don't\"), \" use the standard library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"std_q_math.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Q\"), \" numbers math functions, that use the standard library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"non_std_float_math.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"float and double\"), \" numbers math functions, that don't use the standard library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"std_float_math.h\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"float and double\"), \" numbers math functions, that use the standard library\")), mdx(\"p\", null, \"You can decide to use them or avoid/mute them using the following:\"), mdx(\"h4\", null, \"Avoiding builtin math functions\"), mdx(\"p\", null, \"Declare the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"MICROGL_AVOID_BUILTIN_MATH\")), \" macro \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BEFORE\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" header files in your source files.\\nThis way you can provide your own implementation for float/double/Q numbers. For example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You use a micro-controller, that has a special \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"FPU\"), \" and you want to use it for float point types.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You want to use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Q\"), \" numbers and use lookup tables for trigonometric functions etc...\")), mdx(\"h4\", null, \"Use builtin math with standard c++ library\"), mdx(\"p\", null, \"Declare the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"MICROGL_USE_STD_MATH\")), \" macro \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BEFORE\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" header files in your source files.\\nThis will use the standard c++ library math functions, which can lead to better performance on systems\\nthat implement the standard library.\"), mdx(\"h4\", null, \"Use builtin math without standard c++ library\"), mdx(\"p\", null, \"Default behaviour (nothing to declare). By default, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" implements \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CPU\"), \" algorithms for math\\nfunctions, which may perform fine for performance and accuracy.\"), mdx(\"h2\", null, \"Overriding builtin Math functions example\"), mdx(\"p\", null, \"So suppose you are developing for an embedded system that has a custom FPU or maybe you want to use\\na lookup-table for computing trigonometric function, then you will have to give your own implementation\\nof math function for your desired number type.\"), mdx(\"p\", null, \"For simplicity, suppose you want to override \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"float\"), \" point math.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"First\"), \", create an implementation of the math functions, example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// hw_float_math.h\\nnamespace microgl {\\n    namespace math {\\n        inline int to_fixed(const float val, unsigned char precision) {\\n            return int(val * float(int(1) << precision));\\n        }\\n        inline float mod(float numer, float denom) {\\n            return _fancy_hardware_mod(numer, denom);\\n        }\\n        inline float sqrt(const float val) {\\n            return _fancy_hardware_sqrt(val);\\n        }\\n        inline float sin(const float radians) {\\n            return _fancy_hardware_sine(radians);\\n        }\\n        inline float cos(const float radians) {\\n            return _fancy_hardware_cos(radians);\\n        }\\n        inline float tan(const float radians) {\\n            return _fancy_hardware_tan(radians);\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Second\"), \", define the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MICROGL_AVOID_BUILTIN_MATH\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BEFORE\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" header files in your source files\\n(this will make \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" not to include it's own float point math files) and include your math declarations\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BEFORE\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" header files in your source files, Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"hw_float_math.h\\\"\\n// define this, so we will not clash with microgl default implementations\\n#define MICROGL_AVOID_BUILTIN_MATH\\n\\n#include <microgl/canvas.h>\\n\\n....\\n\")), mdx(\"h2\", null, \"Using a new number type\"), mdx(\"p\", null, \" We implement the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<microgl/Q.h>\"), \" number type and give it some default math function which you can override\\nwith the same technique as above. But, suppose you copied or created a copy of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Q\"), \" in your own source files,\\nthen it becomes a new type, therefore you will have to implement you own math functions as well. Essentially,\\nfor any new type you create, you have to provide math functions overloads like so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"my_number_math.h\\\"\\n#include <microgl/canvas.h>\\n\\n\")), mdx(\"p\", null, \"You always include your declarations \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BEFORE\"), \" any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" header files\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\">In <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div>, for each new <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"/docs/concepts/numbers\">number</a> type you use, a corresponding set of math functions overloads\nhave to be defined in the <div class=\"css-qskmz3\">microgl::math</div> <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">namespace</strong>. <div class=\"css-qskmz3\">microgl</div> supports any user-defined number type, that conforms\nto the definitions and operators of a number type. This way <div class=\"css-qskmz3\">microgl</div> becomes number type agnostic and does not assume\nany number type, which makes it for example easy to implement graphics without <strong class=\"css-10ircq3\">FPU</strong> or with any type of precision.</p><h2 class=\"css-0\">Math functions</h2><p class=\"css-0\">We require to implement the following math functions overloads per a number type</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-c++\" style=\"white-space:pre\"><span>using </span><span style=\"color:#E7CE56\">number</span><span> = ... // your type\n</span>\n<!-- -->namesapce microgl {\n<!-- -->  namesapce math {\n<span>    </span><span style=\"color:#E7CE56\">number</span><span> to_fixed(</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#E7CE56\">number</span><span> val, unsigned char precision)\n</span><span>    </span><span style=\"color:#E7CE56\">number</span><span> </span><span style=\"color:#E7CE56\">sqrt</span><span>(</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#E7CE56\">number</span><span> val)\n</span><span>    </span><span style=\"color:#E7CE56\">number</span><span> </span><span style=\"color:#E7CE56\">sin</span><span>(</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#E7CE56\">number</span><span> radians)\n</span><span>    </span><span style=\"color:#E7CE56\">number</span><span> </span><span style=\"color:#E7CE56\">cos</span><span>(</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#E7CE56\">number</span><span> radians)\n</span><span>    </span><span style=\"color:#E7CE56\">number</span><span> </span><span style=\"color:#E7CE56\">tan</span><span>(</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#E7CE56\">number</span><span> radians)\n</span><span>    </span><span style=\"color:#E7CE56\">number</span><span> </span><span style=\"color:#E7CE56\">mod</span><span>(</span><span style=\"color:#E7CE56\">number</span><span> numer, </span><span style=\"color:#E7CE56\">number</span><span> denom)\n</span>  }\n<!-- -->}\n<!-- -->\n</code></pre></pre><p class=\"css-0\">Out of the box, <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div> implements 4 math variations:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">non_std_q_math.h</div> - <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Q</strong> numbers math functions, that <strong class=\"css-10ircq3\">don&#x27;t</strong> use the standard library</li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">std_q_math.h</div> - <strong class=\"css-10ircq3\">Q</strong> numbers math functions, that use the standard library</li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">non_std_float_math.h</div> - <strong class=\"css-10ircq3\">float and double</strong> numbers math functions, that don&#x27;t use the standard library</li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">std_float_math.h</div> - <strong class=\"css-10ircq3\">float and double</strong> numbers math functions, that use the standard library</li></ul><p class=\"css-0\">You can decide to use them or avoid/mute them using the following:</p><h4 class=\"css-0\">Avoiding builtin math functions</h4><p class=\"css-0\">Declare the <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">MICROGL_AVOID_BUILTIN_MATH</div></strong> macro <strong class=\"css-10ircq3\">BEFORE</strong> the <div class=\"css-qskmz3\">microgl</div> header files in your source files.\nThis way you can provide your own implementation for float/double/Q numbers. For example:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">You use a micro-controller, that has a special <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">FPU</strong> and you want to use it for float point types.</li><li class=\"css-b0qdn7\">You want to use <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">Q</div> numbers and use lookup tables for trigonometric functions etc...</li></ul><h4 class=\"css-0\">Use builtin math with standard c++ library</h4><p class=\"css-0\">Declare the <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">MICROGL_USE_STD_MATH</div></strong> macro <strong class=\"css-10ircq3\">BEFORE</strong> the <div class=\"css-qskmz3\">microgl</div> header files in your source files.\nThis will use the standard c++ library math functions, which can lead to better performance on systems\nthat implement the standard library.</p><h4 class=\"css-0\">Use builtin math without standard c++ library</h4><p class=\"css-0\">Default behaviour (nothing to declare). By default, <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div> implements <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">CPU</strong> algorithms for math\nfunctions, which may perform fine for performance and accuracy.</p><h2 class=\"css-0\">Overriding builtin Math functions example</h2><p class=\"css-0\">So suppose you are developing for an embedded system that has a custom FPU or maybe you want to use\na lookup-table for computing trigonometric function, then you will have to give your own implementation\nof math function for your desired number type.</p><p class=\"css-0\">For simplicity, suppose you want to override <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">float</strong> point math.</p><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">First</strong>, create an implementation of the math functions, example:</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">// hw_float_math.h</span><span>\n</span><span></span><span style=\"color:#B45EA4\">namespace</span><span> microgl {\n</span><span>    </span><span style=\"color:#B45EA4\">namespace</span><span> math {\n</span><span>        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">to_fixed</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> val, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">unsigned</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">char</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> precision)</span><span class=\"hljs-function\"> </span><span>{\n</span><span>            </span><span style=\"color:#B45EA4\">return</span><span> </span><span style=\"color:#B45EA4\">int</span><span>(val * </span><span style=\"color:#B45EA4\">float</span><span>(</span><span style=\"color:#B45EA4\">int</span><span>(</span><span style=\"color:#E7CE56\">1</span><span>) &lt;&lt; precision));\n</span>        }\n<span>        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">mod</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> numer, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> denom)</span><span class=\"hljs-function\"> </span><span>{\n</span><span>            </span><span style=\"color:#B45EA4\">return</span><span> _fancy_hardware_mod(numer, denom);\n</span>        }\n<span>        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">sqrt</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> val)</span><span class=\"hljs-function\"> </span><span>{\n</span><span>            </span><span style=\"color:#B45EA4\">return</span><span> _fancy_hardware_sqrt(val);\n</span>        }\n<span>        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">sin</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> radians)</span><span class=\"hljs-function\"> </span><span>{\n</span><span>            </span><span style=\"color:#B45EA4\">return</span><span> _fancy_hardware_sine(radians);\n</span>        }\n<span>        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">cos</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> radians)</span><span class=\"hljs-function\"> </span><span>{\n</span><span>            </span><span style=\"color:#B45EA4\">return</span><span> _fancy_hardware_cos(radians);\n</span>        }\n<span>        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">tan</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">float</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> radians)</span><span class=\"hljs-function\"> </span><span>{\n</span><span>            </span><span style=\"color:#B45EA4\">return</span><span> _fancy_hardware_tan(radians);\n</span>        }\n<!-- -->    }\n<!-- -->}\n<!-- -->\n</code></pre></pre><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Second</strong>, define the <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">MICROGL_AVOID_BUILTIN_MATH</div> <strong class=\"css-10ircq3\">BEFORE</strong> the <div class=\"css-qskmz3\">microgl</div> header files in your source files\n(this will make <div class=\"css-qskmz3\">microgl</div> not to include it&#x27;s own float point math files) and include your math declarations\n<strong class=\"css-10ircq3\">BEFORE</strong> the <div class=\"css-qskmz3\">microgl</div> header files in your source files, Example:</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;hw_float_math.h&quot;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// define this, so we will not clash with microgl default implementations</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> MICROGL_AVOID_BUILTIN_MATH</span><span>\n</span>\n<span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span>\n<!-- -->....\n<!-- -->\n</code></pre></pre><h2 class=\"css-0\">Using a new number type</h2><p class=\"css-0\"> We implement the <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/Q.h&gt;</div> number type and give it some default math function which you can override\nwith the same technique as above. But, suppose you copied or created a copy of <div class=\"css-qskmz3\">Q</div> in your own source files,\nthen it becomes a new type, therefore you will have to implement you own math functions as well. Essentially,\nfor any new type you create, you have to provide math functions overloads like so:</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;my_number_math.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span>\n<!-- -->\n</code></pre></pre><p class=\"css-0\">You always include your declarations <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">BEFORE</strong> any <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div> header files</p>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}