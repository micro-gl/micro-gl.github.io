{"pageProps":{"data":{"slug":"concepts/bitmaps","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bitmaps\"), \" are objects that store a pixel array and an accompanying \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"pixel-coders\"\n  }, \"Pixel Coder\"), \".\\nOn top of that, Bitmaps have a simple interface to :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get/set a pixel by position\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get/set a color by position\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get/set intensity by position\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"clear/fill the bitmap with a pixel value\")), mdx(\"p\", null, \"All bitmaps inherit from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/base_bitmap.h>\")), \" via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"crpt\"), \" pattern (compile time polymorphism).\\nall bitmaps have the following interface through compile-time inheritance \"), mdx(\"h2\", null, \"Base Bitmap methods\"), mdx(\"p\", null, \"All bitmaps inherit from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"base_bitmap\")), \", which is an abstract defined base class used\\nwith \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"crpt\"), \" design pattern.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam impl implemenation type of derived class\\n * @tparam pixel_coder_ the pixel coder type of the bitmap\\n * @tparam buffer_element_type the type of the elements stored in the pixel array\\n */\\ntemplate <typename impl, typename pixel_coder_, typename buffer_element_type=typename pixel_coder_::pixel>\\nclass base_bitmap : public crpt<impl> {\\npublic:\\n    using pixel_coder = ... // pixel coder type\\n    using pixel = ... // pixel type\\n    using rgba = ... // rgba info type\\n\\n    static constexpr bool hasNativeAlphaChannel()\\n    static constexpr bool nativeAlphaChannelBits()\\n    static constexpr int maxNativeAlphaChannelValue()\\n\\n    int width() const\\n    int height() const\\n    int size() const\\n    pixel * data() // pointer to pixel array\\n    // get pixel coder reference\\n    const pixel_coder &coder() const\\n\\n    int locate(int x, int y) const\\n    // read pixels at position\\n    pixel pixelAt(int x, int y) const\\n    pixel pixelAt(int index) const\\n    // write pixels at position\\n    void writeAt(int x, int y, const pixel &value)\\n    void writeAt(int index, const pixel &value)\\n    void fill(const pixel &value)\\n\\n    // decode a pixel at position into color\\n    void decode(int x, int y, microgl::color::color_t &output) const\\n    void decode(int index, microgl::color::color_t &output) const\\n\\n    // decode a pixel at position into intensity\\n    template <typename number>\\n    void decode(int x, int y, microgl::color::intensity<number> &output) const\\n    template <typename number>\\n    void decode(int index, microgl::color::intensity<number> &output) const\\n\\n    // encode a color into pixel and then write it to the bitmap\\n    void writeColor(int index, const microgl::color::color_t &color)\\n    void writeColor(int x, int y, const microgl::color::color_t &color)\\n\\n    // encode intensity into pixel and then write it to the bitmap\\n    template <typename number>\\n    void writeColor(int index, const microgl::color::intensity<number> &color)\\n    template <typename number>\\n    void writeColor(int x, int y, const microgl::color::intensity<number> &color)\\n}    \\n\")), mdx(\"h1\", null, \"Bitmaps\"), mdx(\"h2\", null, \"Regular Bitmap\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implemented at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/bitmaps/bitmap.h>\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_sampler_texture.cpp\")))), mdx(\"p\", null, \"Regular bitmap inherits from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"base_bitmap\")), \" and also adds the following interface\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This bitmap is the most common implemenation of a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"base_bitmap\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam pixel_coder_ the pixel coder\\n */\\ntemplate <typename pixel_coder_>\\nclass bitmap : public base_bitmap ....  {\\npublic:\\n\\n    // convert this bitmap to another bitmap\\n    template<typename CODER2>\\n    bitmap<CODER2> * convertToBitmap()\\n\\n    // copy this bitmap to another bitmap\\n    template<typename CODER2>\\n    void copyToBitmap(bitmap<CODER2> & bmp)\\n\\n    // constructors\\n    bitmap(int w, int h)\\n    bitmap(void * $pixels, int w, int h)\\n}\\n\")), mdx(\"h2\", null, \"Packed Bitmap\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implemented at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/bitmaps/PackedBitmap.h>\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_bitmap_packed.cpp\")))), mdx(\"p\", null, \"A packed bitmap is a memory efficient bitmap, that encodes pixels as group of bits\\nof size 1, 2, 4, 8 bits. This is good for single channel storage like text. Using this\\nscheme can compress your simgle channel bitmaps by great deal.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam BPP bits per pixel (1|2|4|8)\\n * @tparam CODER the pixel coder to decode the pixels\\n * @tparam reverse_elements_pos_in_byte this can help with endian-ness issues\\n */\\ntemplate <unsigned BPP, typename CODER, bool reverse_elements_pos_in_byte=false>\\nclass PackedBitmap : public base_bitmap<.....> {\\npublic:\\n    /**\\n     * construct a bitmap with a given pixel array\\n     *\\n     * @param $pixels the pixels array\\n     * @param w the bitmap width\\n     * @param h the bitmap height\\n     */\\n    PackedBitmap(void* $pixels, int w, int h)\\n    /**\\n     * construct a bitmap and allocate a pixel array\\n     *\\n     * @param w the bitmap width\\n     * @param h the bitmap height\\n     */\\n    PackedBitmap(int w, int h)\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"the pixel coder must have a pixel type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unsigned char\"), \" (uint8_t)\")), mdx(\"h2\", null, \"Indexed/Palette Bitmap\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Implemented at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/bitmaps/PaletteBitmap.h>\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_bitmap_indexed_palette.cpp\"))), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A bitmap that uses a palette of pixels of size 2, 4, 16 or 256. This way,\\nthe pixels array is just an index array into the palette, therefore the indices\\ncan be packed as 1, 2, 4 or 8 bits respectively. This is memory efficient.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam PALETTE_SIZE 2, 4, 16, 256 size\\n * @tparam CODER the pixel coder for the palette\\n * @tparam reverse_elements_pos_in_byte can help with endian-ness issues\\n */\\ntemplate <unsigned PALETTE_SIZE, typename CODER, bool reverse_elements_pos_in_byte=false>\\nclass PaletteBitmap : public base_bitmap<....> {\\npublic:\\n\\n    /**\\n     * construct a bitmap with a given indices array and pixel palette.\\n     * @param $indices the indices array\\n     * @param palette the palette\\n     * @param w the bitmap width\\n     * @param h the bitmap height\\n     */\\n    PaletteBitmap(void* $indices, void *palette, int w, int h)\\n    /**\\n     * construct a bitmap, allocate indices array.\\n     * @param w the bitmap width\\n     * @param h the bitmap height\\n     */\\n    PaletteBitmap(int w, int h)\\n\\n    // get palette size\\n    unsigned paletteSize()\\n    // update palette\\n    void updatePalette(pixel * $palette)\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Bitmaps</strong> are objects that store a pixel array and an accompanying <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"pixel-coders\">Pixel Coder</a>.\nOn top of that, Bitmaps have a simple interface to :</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">get/set a pixel by position</li><li class=\"css-b0qdn7\">get/set a color by position</li><li class=\"css-b0qdn7\">get/set intensity by position</li><li class=\"css-b0qdn7\">clear/fill the bitmap with a pixel value</li></ul><p class=\"css-0\">All bitmaps inherit from <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/base_bitmap.h&gt;</div></strong> via <div class=\"css-qskmz3\">crpt</div> pattern (compile time polymorphism).\nall bitmaps have the following interface through compile-time inheritance </p><h2 class=\"css-0\">Base Bitmap methods</h2><p class=\"css-0\">All bitmaps inherit from <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">base_bitmap</div></strong>, which is an abstract defined base class used\nwith <div class=\"css-qskmz3\">crpt</div> design pattern.</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam impl implemenation type of derived class\n</span><span style=\"color:#B6B18B\"> * @tparam pixel_coder_ the pixel coder type of the bitmap\n</span><span style=\"color:#B6B18B\"> * @tparam buffer_element_type the type of the elements stored in the pixel array\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> impl, </span><span style=\"color:#B45EA4\">typename</span><span> pixel_coder_, </span><span style=\"color:#B45EA4\">typename</span><span> buffer_element_type=</span><span style=\"color:#B45EA4\">typename</span><span> pixel_coder_::pixel&gt;\n</span><span>class base_bitmap : </span><span style=\"color:#B45EA4\">public</span><span> crpt&lt;impl&gt; {\n</span><span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> pixel_coder = ... </span><span style=\"color:#B6B18B\">// pixel coder type</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> pixel = ... </span><span style=\"color:#B6B18B\">// pixel type</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> rgba = ... </span><span style=\"color:#B6B18B\">// rgba info type</span><span>\n</span>\n<span>    </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">bool</span><span> hasNativeAlphaChannel()\n</span><span>    </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">bool</span><span> nativeAlphaChannelBits()\n</span><span>    </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">int</span><span> maxNativeAlphaChannelValue()\n</span>\n<span>    </span><span style=\"color:#B45EA4\">int</span><span> width() </span><span style=\"color:#B45EA4\">const</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">int</span><span> height() </span><span style=\"color:#B45EA4\">const</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">int</span><span> size() </span><span style=\"color:#B45EA4\">const</span><span>\n</span><span>    pixel * data() </span><span style=\"color:#B6B18B\">// pointer to pixel array</span><span>\n</span><span>    </span><span style=\"color:#B6B18B\">// get pixel coder reference</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">const</span><span> pixel_coder &amp;coder() </span><span style=\"color:#B45EA4\">const</span><span>\n</span>\n<span>    </span><span style=\"color:#B45EA4\">int</span><span> locate(</span><span style=\"color:#B45EA4\">int</span><span> x, </span><span style=\"color:#B45EA4\">int</span><span> y) </span><span style=\"color:#B45EA4\">const</span><span>\n</span><span>    </span><span style=\"color:#B6B18B\">// read pixels at position</span><span>\n</span><span>    pixel pixelAt(</span><span style=\"color:#B45EA4\">int</span><span> x, </span><span style=\"color:#B45EA4\">int</span><span> y) </span><span style=\"color:#B45EA4\">const</span><span>\n</span><span>    pixel pixelAt(</span><span style=\"color:#B45EA4\">int</span><span> index) </span><span style=\"color:#B45EA4\">const</span><span>\n</span><span>    </span><span style=\"color:#B6B18B\">// write pixels at position</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> writeAt(</span><span style=\"color:#B45EA4\">int</span><span> x, </span><span style=\"color:#B45EA4\">int</span><span> y, </span><span style=\"color:#B45EA4\">const</span><span> pixel &amp;value)\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> writeAt(</span><span style=\"color:#B45EA4\">int</span><span> index, </span><span style=\"color:#B45EA4\">const</span><span> pixel &amp;value)\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> fill(</span><span style=\"color:#B45EA4\">const</span><span> pixel &amp;value)\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// decode a pixel at position into color</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> decode(</span><span style=\"color:#B45EA4\">int</span><span> x, </span><span style=\"color:#B45EA4\">int</span><span> y, microgl::color::</span><span style=\"color:#B45EA4\">color_t</span><span> &amp;output) </span><span style=\"color:#B45EA4\">const</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> decode(</span><span style=\"color:#B45EA4\">int</span><span> index, microgl::color::</span><span style=\"color:#B45EA4\">color_t</span><span> &amp;output) </span><span style=\"color:#B45EA4\">const</span><span>\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// decode a pixel at position into intensity</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> decode(</span><span style=\"color:#B45EA4\">int</span><span> x, </span><span style=\"color:#B45EA4\">int</span><span> y, microgl::color::intensity&lt;number&gt; &amp;output) </span><span style=\"color:#B45EA4\">const</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> decode(</span><span style=\"color:#B45EA4\">int</span><span> index, microgl::color::intensity&lt;number&gt; &amp;output) </span><span style=\"color:#B45EA4\">const</span><span>\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// encode a color into pixel and then write it to the bitmap</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> writeColor(</span><span style=\"color:#B45EA4\">int</span><span> index, </span><span style=\"color:#B45EA4\">const</span><span> microgl::color::</span><span style=\"color:#B45EA4\">color_t</span><span> &amp;color)\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> writeColor(</span><span style=\"color:#B45EA4\">int</span><span> x, </span><span style=\"color:#B45EA4\">int</span><span> y, </span><span style=\"color:#B45EA4\">const</span><span> microgl::color::</span><span style=\"color:#B45EA4\">color_t</span><span> &amp;color)\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// encode intensity into pixel and then write it to the bitmap</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> writeColor(</span><span style=\"color:#B45EA4\">int</span><span> index, </span><span style=\"color:#B45EA4\">const</span><span> microgl::color::intensity&lt;number&gt; &amp;color)\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> writeColor(</span><span style=\"color:#B45EA4\">int</span><span> x, </span><span style=\"color:#B45EA4\">int</span><span> y, </span><span style=\"color:#B45EA4\">const</span><span> microgl::color::intensity&lt;number&gt; &amp;color)\n</span>}    \n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Bitmaps</h1><h2 class=\"css-0\">Regular Bitmap</h2><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Implemented at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/bitmaps/bitmap.h&gt;</div></strong></li><li class=\"css-b0qdn7\">Example at <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">/examples/example_sampler_texture.cpp</div></strong></li></ul><p class=\"css-0\">Regular bitmap inherits from <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">base_bitmap</div></strong> and also adds the following interface<div class=\"css-0\"></div>\n<!-- -->This bitmap is the most common implemenation of a <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">base_bitmap</div></strong></p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\"> * @tparam pixel_coder_ the pixel coder\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> pixel_coder_&gt;\n</span><span></span><span class=\"hljs-class\" style=\"color:#B45EA4\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">bitmap</span><span class=\"hljs-class\"> :</span><span> </span><span style=\"color:#B45EA4\">public</span><span> base_bitmap ....  {\n</span><span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// convert this bitmap to another bitmap</span><span>\n</span><span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\">&lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> CODER2&gt;\n</span><span class=\"hljs-function\">    bitmap&lt;CODER2&gt; * </span><span class=\"hljs-function\" style=\"color:#78BB65\">convertToBitmap</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B6B18B\">// copy this bitmap to another bitmap</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\">&lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> CODER2&gt;\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">copyToBitmap</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(bitmap&lt;CODER2&gt; &amp; bmp)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B6B18B\">// constructors</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#78BB65\">bitmap</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> w, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> h)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#78BB65\">bitmap</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> * $pixels, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> w, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> h)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">}\n</span><span class=\"hljs-function\">\n</span></code></pre></pre><h2 class=\"css-0\">Packed Bitmap</h2><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Implemented at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/bitmaps/PackedBitmap.h&gt;</div></strong></li><li class=\"css-b0qdn7\">Example at <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">/examples/example_draw_bitmap_packed.cpp</div></strong></li></ul><p class=\"css-0\">A packed bitmap is a memory efficient bitmap, that encodes pixels as group of bits\nof size 1, 2, 4, 8 bits. This is good for single channel storage like text. Using this\nscheme can compress your simgle channel bitmaps by great deal.</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam BPP bits per pixel (1|2|4|8)\n</span><span style=\"color:#B6B18B\"> * @tparam CODER the pixel coder to decode the pixels\n</span><span style=\"color:#B6B18B\"> * @tparam reverse_elements_pos_in_byte this can help with endian-ness issues\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">unsigned</span><span> BPP, </span><span style=\"color:#B45EA4\">typename</span><span> CODER, </span><span style=\"color:#B45EA4\">bool</span><span> reverse_elements_pos_in_byte=</span><span style=\"color:#E7CE56\">false</span><span>&gt;\n</span><span>class PackedBitmap : </span><span style=\"color:#B45EA4\">public</span><span> base_bitmap&lt;.....&gt; {\n</span><span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * construct a bitmap with a given pixel array\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param $pixels the pixels array\n</span><span style=\"color:#B6B18B\">     * @param w the bitmap width\n</span><span style=\"color:#B6B18B\">     * @param h the bitmap height\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    PackedBitmap(</span><span style=\"color:#B45EA4\">void</span><span>* $pixels, </span><span style=\"color:#B45EA4\">int</span><span> w, </span><span style=\"color:#B45EA4\">int</span><span> h)\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * construct a bitmap and allocate a pixel array\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param w the bitmap width\n</span><span style=\"color:#B6B18B\">     * @param h the bitmap height\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    PackedBitmap(</span><span style=\"color:#B45EA4\">int</span><span> w, </span><span style=\"color:#B45EA4\">int</span><span> h)\n</span>\n</code></pre></pre><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">the pixel coder must have a pixel type of <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">unsigned char</div> (uint8_t)</p></blockquote><h2 class=\"css-0\">Indexed/Palette Bitmap</h2><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><p class=\"css-0\">Implemented at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/bitmaps/PaletteBitmap.h&gt;</div></strong></p></li><li class=\"css-b0qdn7\"><p class=\"css-0\">Example at <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">/examples/example_draw_bitmap_indexed_palette.cpp</div></strong></p><p class=\"css-0\">A bitmap that uses a palette of pixels of size 2, 4, 16 or 256. This way,\nthe pixels array is just an index array into the palette, therefore the indices\ncan be packed as 1, 2, 4 or 8 bits respectively. This is memory efficient.</p></li></ul><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam PALETTE_SIZE 2, 4, 16, 256 size\n</span><span style=\"color:#B6B18B\"> * @tparam CODER the pixel coder for the palette\n</span><span style=\"color:#B6B18B\"> * @tparam reverse_elements_pos_in_byte can help with endian-ness issues\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">unsigned</span><span> PALETTE_SIZE, </span><span style=\"color:#B45EA4\">typename</span><span> CODER, </span><span style=\"color:#B45EA4\">bool</span><span> reverse_elements_pos_in_byte=</span><span style=\"color:#E7CE56\">false</span><span>&gt;\n</span><span>class PaletteBitmap : </span><span style=\"color:#B45EA4\">public</span><span> base_bitmap&lt;....&gt; {\n</span><span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span>\n<span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * construct a bitmap with a given indices array and pixel palette.\n</span><span style=\"color:#B6B18B\">     * @param $indices the indices array\n</span><span style=\"color:#B6B18B\">     * @param palette the palette\n</span><span style=\"color:#B6B18B\">     * @param w the bitmap width\n</span><span style=\"color:#B6B18B\">     * @param h the bitmap height\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    PaletteBitmap(</span><span style=\"color:#B45EA4\">void</span><span>* $indices, </span><span style=\"color:#B45EA4\">void</span><span> *palette, </span><span style=\"color:#B45EA4\">int</span><span> w, </span><span style=\"color:#B45EA4\">int</span><span> h)\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * construct a bitmap, allocate indices array.\n</span><span style=\"color:#B6B18B\">     * @param w the bitmap width\n</span><span style=\"color:#B6B18B\">     * @param h the bitmap height\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    PaletteBitmap(</span><span style=\"color:#B45EA4\">int</span><span> w, </span><span style=\"color:#B45EA4\">int</span><span> h)\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// get palette size</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">unsigned</span><span> paletteSize()\n</span><span>    </span><span style=\"color:#B6B18B\">// update palette</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> updatePalette(pixel * $palette)\n</span>\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}