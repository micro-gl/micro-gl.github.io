{"pageProps":{"data":{"slug":"algorithms/elliptic-arc-divider","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Elliptic Arc Divider\"), \" can split/intepolate points on a full/partial Ellipse and therefore also\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"on a circle.\"), mdx(\"h4\", null, \"Algorithm input\"), mdx(\"p\", null, \"Input is\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Output\"), \" container for created vertices\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"X/Y center\"), \" coords of the ellipse\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Horizontal/Vertical radius\"), \" of the ellipse\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Rotation\"), \" value about the pivot\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Start and End angle\"), \" in radians\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The number of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"divisons\"), \" to create\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Clock-wise\"), \" or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Anti Clock-wise\"), \" direction\")), mdx(\"h2\", null, \"Example\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"taken from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"examples/example_geometry_elliptic_arc_divider.cpp\"))), mdx(\"img\", {\n    src: \"/images/tess/elliptic-arc-divider.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"The example demonstrates usage of different linear containers (including the packaged non standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dynamic_array\"), \").\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The example also demonstrates different number types such as fixed point integer(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Q\"), \" numbers), float and doubles.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Tessellation computation is only \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"16\"), \" lines of code.  \"), mdx(\"p\", null, \"I use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" project to render the tessellation.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The algorithm output:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"output_points\"), \" container, which holds the subdivisions vertices\")), mdx(\"p\", null, \"Tessellation is happening at lines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#33\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#56\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c++-lines_numbers\"\n  }, \"#define MICROGL_USE_EXTERNAL_MICRO_TESS\\n#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/bitmaps/bitmap.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/flat_color.h>\\n#include <microgl/math/Q.h>\\n\\n#include <micro-tess/elliptic_arc_divider.h>\\n#include <micro-tess/static_array.h>\\n#include <micro-tess/dynamic_array.h>\\n#include <vector>\\n\\ntemplate<typename item_type>\\nusing container = static_array<item_type, 100>;\\n//using container = dynamic_array<item_type>;\\n//using container = std::vector<item_type>;\\n\\nint main() {\\n    // using number = float;\\n    using number = Q<15>;\\n\\n    // microgl drawing setup START\\n    using Canvas24 = canvas<bitmap<coder::RGB888_PACKED_32>>;\\n    sampling::flat_color<> color_red{{255,0,0,255}};\\n    Canvas24 canvas(640, 480);\\n    // microgl drawing setup END\\n\\n    const auto render_arc_internal = [&]() {\\n        // Algorithm START\\n        // inputs to algorithm\\n        container<vertex2<number>> output_points;\\n        number start_angle_rad = math::deg_to_rad(0.0f);\\n        number end_angle_rad = math::deg_to_rad(-45.0f);\\n        number rotation = math::deg_to_rad(45.0f);\\n        number radius_x = 50, radius_y = 75;\\n        number center_x = 200, center_y=200;\\n        unsigned int divisions_count = 32;\\n        const bool anti_clock_wise = false;\\n        // define algorithm\\n        using ellipse = microtess::elliptic_arc_divider<\\n                            number, decltype(output_points)>;\\n        // compute algorithm\\n        ellipse::compute(\\n                output_points,    // output points\\n                center_x,         // x center of elliptic arc\\n                center_y,         // y center of elliptic arc\\n                radius_x,         // horizontal radius of elliptic arc\\n                radius_y,         // vertical radius of elliptic arc\\n                rotation,         // rotation about center\\n                start_angle_rad,  // starting angle radians\\n                end_angle_rad,    // end angle radians\\n                divisions_count,  // how many divisions\\n                anti_clock_wise   // anti clock-wise ?\\n        );\\n        // Algorithm END\\n\\n        canvas.clear({255,255,255,255});\\n        for (uint ix = 0; ix < output_points.size() - 0; ++ix) {\\n            canvas.drawCircle<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true>(\\n                    color_red, color_red,\\n                    output_points[ix].x,\\n                    output_points[ix].y,\\n                    number(4), number(1),\\n                    120);\\n        }\\n\\n        canvas.drawWuLinePath(\\n                {0,0,0,255},\\n                output_points.data(),\\n                output_points.size(),\\n                false);\\n\\n    };\\n\\n    auto render = [&](void*, void*, void*) -> void {\\n        render_arc_internal();\\n    };\\n\\n    example_run(&canvas, render);\\n}\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Elliptic Arc Divider</strong> can split/intepolate points on a full/partial Ellipse and therefore also<div class=\"css-0\"></div>\n<!-- -->on a circle.</p><h4 class=\"css-0\">Algorithm input</h4><p class=\"css-0\">Input is</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Output</strong> container for created vertices</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">X/Y center</strong> coords of the ellipse</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Horizontal/Vertical radius</strong> of the ellipse</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Rotation</strong> value about the pivot</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Start and End angle</strong> in radians</li><li class=\"css-b0qdn7\">The number of <strong class=\"css-10ircq3\">divisons</strong> to create</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Clock-wise</strong> or <strong class=\"css-10ircq3\">Anti Clock-wise</strong> direction</li></ul><h2 class=\"css-0\">Example</h2><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">taken from <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">examples/example_geometry_elliptic_arc_divider.cpp</div></p></blockquote><img src=\"/images/tess/elliptic-arc-divider.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">The example demonstrates usage of different linear containers (including the packaged non standard <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">dynamic_array</div>).<div class=\"css-0\"></div>\n<!-- -->The example also demonstrates different number types such as fixed point integer(<div class=\"css-qskmz3\">Q</div> numbers), float and doubles.<div class=\"css-0\"></div>\n<!-- -->Tessellation computation is only <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">16</strong> lines of code.  </p><p class=\"css-0\">I use the <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div> project to render the tessellation.<div class=\"css-0\"></div>\n<!-- -->The algorithm output:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Will fill The <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">output_points</div> container, which holds the subdivisions vertices</li></ul><p class=\"css-0\">Tessellation is happening at lines <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">#33</div>-<div class=\"css-qskmz3\">#56</div></p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-c++\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">1</span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> MICROGL_USE_EXTERNAL_MICRO_TESS</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">2</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/Resources.h&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">3</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">4</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">5</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/bitmaps/bitmap.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">6</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">7</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">8</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/math/Q.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">9</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">10</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/elliptic_arc_divider.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">11</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/static_array.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">12</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/dynamic_array.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">13</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;vector&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">14</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">15</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> item_type&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">16</span><span></span><span style=\"color:#B45EA4\">using</span><span> container = static_array&lt;item_type, </span><span style=\"color:#E7CE56\">100</span><span>&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">17</span><span></span><span style=\"color:#B6B18B\">//using container = dynamic_array&lt;item_type&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">18</span><span></span><span style=\"color:#B6B18B\">//using container = std::vector&lt;item_type&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">19</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">20</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">main</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span class=\"hljs-function\"> </span><span>{\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">21</span><span>    </span><span style=\"color:#B6B18B\">// using number = float;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">22</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> number = Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">23</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">24</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">25</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> Canvas24 = canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">26</span><span>    sampling::flat_color&lt;&gt; color_red{{</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>}};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">27</span><span>    </span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">28</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">29</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">30</span><span>    </span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">auto</span><span> render_arc_internal = [&amp;]() {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">31</span><span>        </span><span style=\"color:#B6B18B\">// Algorithm START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">32</span><span>        </span><span style=\"color:#B6B18B\">// inputs to algorithm</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">33</span>        container&lt;vertex2&lt;number&gt;&gt; output_points;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">34</span><span>        number start_angle_rad = math::deg_to_rad(</span><span style=\"color:#E7CE56\">0.0f</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">35</span><span>        number end_angle_rad = math::deg_to_rad(</span><span style=\"color:#E7CE56\">-45.0f</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">36</span><span>        number rotation = math::deg_to_rad(</span><span style=\"color:#E7CE56\">45.0f</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">37</span><span>        number radius_x = </span><span style=\"color:#E7CE56\">50</span><span>, radius_y = </span><span style=\"color:#E7CE56\">75</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">38</span><span>        number center_x = </span><span style=\"color:#E7CE56\">200</span><span>, center_y=</span><span style=\"color:#E7CE56\">200</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">39</span><span>        </span><span style=\"color:#B45EA4\">unsigned</span><span> </span><span style=\"color:#B45EA4\">int</span><span> divisions_count = </span><span style=\"color:#E7CE56\">32</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">40</span><span>        </span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">bool</span><span> anti_clock_wise = </span><span style=\"color:#E7CE56\">false</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">41</span><span>        </span><span style=\"color:#B6B18B\">// define algorithm</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">42</span><span>        </span><span style=\"color:#B45EA4\">using</span><span> ellipse = microtess::elliptic_arc_divider&lt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">43</span><span>                            number, </span><span style=\"color:#B45EA4\">decltype</span><span>(output_points)&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">44</span><span>        </span><span style=\"color:#B6B18B\">// compute algorithm</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">45</span>        ellipse::compute(\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">46</span><span>                output_points,    </span><span style=\"color:#B6B18B\">// output points</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">47</span><span>                center_x,         </span><span style=\"color:#B6B18B\">// x center of elliptic arc</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">48</span><span>                center_y,         </span><span style=\"color:#B6B18B\">// y center of elliptic arc</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">49</span><span>                radius_x,         </span><span style=\"color:#B6B18B\">// horizontal radius of elliptic arc</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">50</span><span>                radius_y,         </span><span style=\"color:#B6B18B\">// vertical radius of elliptic arc</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">51</span><span>                rotation,         </span><span style=\"color:#B6B18B\">// rotation about center</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">52</span><span>                start_angle_rad,  </span><span style=\"color:#B6B18B\">// starting angle radians</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">53</span><span>                end_angle_rad,    </span><span style=\"color:#B6B18B\">// end angle radians</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">54</span><span>                divisions_count,  </span><span style=\"color:#B6B18B\">// how many divisions</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">55</span><span>                anti_clock_wise   </span><span style=\"color:#B6B18B\">// anti clock-wise ?</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">56</span>        );\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">57</span><span>        </span><span style=\"color:#B6B18B\">// Algorithm END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">58</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">59</span><span>        canvas.</span><span style=\"color:#E7CE56\">clear</span><span>({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">60</span><span>        </span><span style=\"color:#B45EA4\">for</span><span> (uint ix = </span><span style=\"color:#E7CE56\">0</span><span>; ix &lt; output_points.</span><span style=\"color:#E7CE56\">size</span><span>() - </span><span style=\"color:#E7CE56\">0</span><span>; ++ix) {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">61</span><span>            canvas.drawCircle&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">true</span><span>&gt;(\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">62</span>                    color_red, color_red,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">63</span>                    output_points[ix].x,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">64</span>                    output_points[ix].y,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">65</span><span>                    number(</span><span style=\"color:#E7CE56\">4</span><span>), number(</span><span style=\"color:#E7CE56\">1</span><span>),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">66</span><span>                    </span><span style=\"color:#E7CE56\">120</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">67</span>        }\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">68</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">69</span>        canvas.drawWuLinePath(\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">70</span><span>                {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">71</span>                output_points.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">72</span><span>                output_points.</span><span style=\"color:#E7CE56\">size</span><span>(),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">73</span><span>                </span><span style=\"color:#E7CE56\">false</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">74</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">75</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">76</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">77</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;](</span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*) -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">78</span>        render_arc_internal();\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">79</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">80</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">81</span>    example_run(&amp;canvas, render);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">82</span>}\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">83</span>\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}