{"pageProps":{"data":{"slug":"algorithms/stroke","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Stroke\"), \" Tesselation triangulates a sequence of points into a stroke. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports dashes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports stroke caps\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports stroke joins\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Self contained\")), mdx(\"h3\", null, \"Stroke Caps\"), mdx(\"p\", null, \"These can be chosen by the Enum \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microtess::stroke_cap\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"stroke_cap::butt\")), \" - No cap is used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"stroke_cap::square\")), \" - Add a square cap\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"stroke_cap::round\")), \" - Adds a rounded cap\")), mdx(\"h3\", null, \"Line Joins\"), mdx(\"p\", null, \"These can be chosen by the Enum \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microtess::stroke_line_join\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"stroke_line_join::miter\")), \" - Use miter line join\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"stroke_line_join::miter_clip\")), \" - Use miter line join with clipping (specified later)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"stroke_line_join::bevel\")), \" - Use bevel line join to fill the gap\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"stroke_line_join::round\")), \" - Use rounded line join to fill the gap\")), mdx(\"h2\", null, \"Example\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"taken from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"examples/example_geometry_stroke_dash_tessellation.cpp\"))), mdx(\"div\", {\n    style: {\n      margin: \"auto\"\n    }\n  }, mdx(\"img\", {\n    src: \"/images/tess/stroke-1.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  }), mdx(\"img\", {\n    src: \"/images/tess/stroke-2.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  })), mdx(\"p\", null, \"The example demonstrates usage of different linear containers (including the packaged non standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dynamic_array\"), \").\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The example also demonstrates different number types such as fixed point integer(\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q\")), \" numbers), float and doubles.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Tessellation computation is only \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"16\"), \" lines of code.  \"), mdx(\"p\", null, \"I use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microgl\")), \" project to render the tessellation.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The algorithm output:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output_triangles_type\")), \" for you to know how to iterate the triangles (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"TRIANGLES/FAN/STRIP\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill the user supplied \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output_vertices\")), \" container with triangulation vertices.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill the user supplied \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output_indices\")), \" container with triangulation indices.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will (optionally) fill the user supplied \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output_boundary_info\")), \" container for you to know how to identify the boundary.\")), mdx(\"p\", null, \"Tessellation is happening at lines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#45\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#65\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c++-lines_numbers\"\n  }, \"#define MICROGL_USE_EXTERNAL_MICRO_TESS\\n#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/bitmaps/bitmap.h>\\n#include <microgl/math/Q.h>\\n#include <microgl/samplers/flat_color.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n\\n#include <micro-tess/stroke_tessellation.h>\\n#include <micro-tess/static_array.h>\\n#include <micro-tess/dynamic_array.h>\\n#include <vector>\\n\\ntemplate<typename item>\\n//using container = dynamic_array<item>;\\n//using container = std::vector<item>;\\nusing container = static_array<item, 10000>;\\n\\ntemplate <typename number>\\ncontainer<vertex2<number>> path_rect() {\\n    using il = std::initializer_list<vertex2<number>>;\\n    vertex2<number> p0 = {100, 200};\\n    vertex2<number> p1 = {420, 100};\\n    vertex2<number> p2 = {200, 100};\\n    vertex2<number> p3 = {50, 50};\\n    return il{p0, p1, p2, p3};\\n}\\n\\nint main() {\\n    using number = float;\\n    // using number = double;\\n    // using number = Q<12>;\\n    // using number = Q<4>;\\n\\n    // microgl drawing setup START\\n    using Canvas24 = canvas<bitmap<coder::RGB888_PACKED_32>>;\\n    sampling::flat_color<> color_red{{255,0,0,255}};\\n    Canvas24 canvas(640, 480);\\n    // microgl drawing setup END\\n\\n    number t = 0;\\n    auto render_path = [&](const container<vertex2<number>> & path, \\n                           number stroke_width, bool close_path) {\\n        using index = unsigned int;\\n\\n        t+=number(0.28f);\\n\\n        // Algorithm START\\n        // output vertices attributes\\n        container<vertex2<number>> output_vertices;\\n        // output indices\\n        container<index> output_indices;\\n        // output boundary info\\n        container<boundary_info> output_boundary_buffer;\\n        // output triangles type\\n        microtess::triangles::indices output_triangles_type;\\n        // define algorithm\\n        using stroke_tess = microtess::stroke_tessellation<number,\\n                container<vertex2<number>>, container<index>,\\n                container<boundary_info>>;\\n        // compute algorithm\\n        stroke_tess::compute_with_dashes(\\n                stroke_width,\\n                close_path,\\n                microtess::stroke_cap::round,\\n                microtess::stroke_line_join::round,\\n                8,\\n                std::initializer_list<int>{50, 50}, t,\\n                path.data(),\\n                path.size(),\\n                output_vertices,\\n                output_indices,\\n                output_triangles_type,\\n                &output_boundary_buffer);\\n         // Algorithm END\\n\\n        // draw triangles batch\\n        canvas.clear({255,255,255,255});\\n        canvas.drawTriangles<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true>(\\n                color_red,\\n                matrix_3x3<number>::identity(),\\n                output_vertices.data(),\\n                (vertex2<number> *)nullptr,\\n                output_indices.data(),\\n                output_boundary_buffer.data(),\\n                output_indices.size(),\\n                output_triangles_type,\\n                127);\\n\\n        canvas.drawTrianglesWireframe(\\n                {0,0,0,255},\\n                matrix_3x3<number>::identity(),\\n                output_vertices.data(),\\n                output_indices.data(),\\n                output_indices.size(),\\n                output_triangles_type,\\n                63);\\n    };\\n\\n    auto render = [&](void*, void*, void*) -> void {\\n        static auto path = path_1<number>();\\n        render_path(path, 40.0f, false);\\n    };\\n\\n    example_run(&canvas, render);\\n}\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Stroke</strong> Tesselation triangulates a sequence of points into a stroke. </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Supports dashes</li><li class=\"css-b0qdn7\">Supports stroke caps</li><li class=\"css-b0qdn7\">Supports stroke joins</li><li class=\"css-b0qdn7\">Self contained</li></ul><h3 class=\"css-0\">Stroke Caps</h3><p class=\"css-0\">These can be chosen by the Enum <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microtess::stroke_cap</div></strong></p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">stroke_cap::butt</div></strong> - No cap is used</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">stroke_cap::square</div></strong> - Add a square cap</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">stroke_cap::round</div></strong> - Adds a rounded cap</li></ul><h3 class=\"css-0\">Line Joins</h3><p class=\"css-0\">These can be chosen by the Enum <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microtess::stroke_line_join</div></strong></p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">stroke_line_join::miter</div></strong> - Use miter line join</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">stroke_line_join::miter_clip</div></strong> - Use miter line join with clipping (specified later)</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">stroke_line_join::bevel</div></strong> - Use bevel line join to fill the gap</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">stroke_line_join::round</div></strong> - Use rounded line join to fill the gap</li></ul><h2 class=\"css-0\">Example</h2><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">taken from <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">examples/example_geometry_stroke_dash_tessellation.cpp</div></p></blockquote><div style=\"margin:auto\"><img src=\"/images/tess/stroke-1.png\" style=\"height:250px;display:inline-block\"/><img src=\"/images/tess/stroke-2.png\" style=\"height:250px;display:inline-block\"/></div><p class=\"css-0\">The example demonstrates usage of different linear containers (including the packaged non standard <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">dynamic_array</div>).<div class=\"css-0\"></div>\n<!-- -->The example also demonstrates different number types such as fixed point integer(<style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">Q</div></strong> numbers), float and doubles.<div class=\"css-0\"></div>\n<!-- -->Tessellation computation is only <strong class=\"css-10ircq3\">16</strong> lines of code.  </p><p class=\"css-0\">I use the <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div></strong> project to render the tessellation.<div class=\"css-0\"></div>\n<!-- -->The algorithm output:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Will fill The <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">output_triangles_type</div></strong> for you to know how to iterate the triangles (<em>TRIANGLES/FAN/STRIP</em>)</li><li class=\"css-b0qdn7\">Will fill the user supplied <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">output_vertices</div></strong> container with triangulation vertices.</li><li class=\"css-b0qdn7\">Will fill the user supplied <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">output_indices</div></strong> container with triangulation indices.</li><li class=\"css-b0qdn7\">Will (optionally) fill the user supplied <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">output_boundary_info</div></strong> container for you to know how to identify the boundary.</li></ul><p class=\"css-0\">Tessellation is happening at lines <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">#45</div>-<div class=\"css-qskmz3\">#65</div></p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-c++\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">1</span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> MICROGL_USE_EXTERNAL_MICRO_TESS</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">2</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">3</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">4</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/bitmaps/bitmap.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">5</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/math/Q.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">6</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">7</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">8</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">9</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/stroke_tessellation.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">10</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/static_array.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">11</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/dynamic_array.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">12</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;vector&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">13</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">14</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> item&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">15</span><span></span><span style=\"color:#B6B18B\">//using container = dynamic_array&lt;item&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">16</span><span></span><span style=\"color:#B6B18B\">//using container = std::vector&lt;item&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">17</span><span></span><span style=\"color:#B45EA4\">using</span><span> container = static_array&lt;item, </span><span style=\"color:#E7CE56\">10000</span><span>&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">18</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">19</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">20</span>container&lt;vertex2&lt;number&gt;&gt; path_rect() {\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">21</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> il = </span><span style=\"color:#E7CE56\">std</span><span>::</span><span style=\"color:#E7CE56\">initializer_list</span><span>&lt;vertex2&lt;number&gt;&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">22</span><span>    vertex2&lt;number&gt; p0 = {</span><span style=\"color:#E7CE56\">100</span><span>, </span><span style=\"color:#E7CE56\">200</span><span>};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">23</span><span>    vertex2&lt;number&gt; p1 = {</span><span style=\"color:#E7CE56\">420</span><span>, </span><span style=\"color:#E7CE56\">100</span><span>};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">24</span><span>    vertex2&lt;number&gt; p2 = {</span><span style=\"color:#E7CE56\">200</span><span>, </span><span style=\"color:#E7CE56\">100</span><span>};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">25</span><span>    vertex2&lt;number&gt; p3 = {</span><span style=\"color:#E7CE56\">50</span><span>, </span><span style=\"color:#E7CE56\">50</span><span>};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">26</span><span>    </span><span style=\"color:#B45EA4\">return</span><span> il{p0, p1, p2, p3};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">27</span>}\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">28</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">29</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">main</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span class=\"hljs-function\"> </span><span>{\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">30</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">31</span><span>    </span><span style=\"color:#B6B18B\">// using number = double;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">32</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">33</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;4&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">34</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">35</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">36</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> Canvas24 = canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">37</span><span>    sampling::flat_color&lt;&gt; color_red{{</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>}};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">38</span><span>    </span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">39</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">40</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">41</span><span>    number t = </span><span style=\"color:#E7CE56\">0</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">42</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> render_path = [&amp;](</span><span style=\"color:#B45EA4\">const</span><span> container&lt;vertex2&lt;number&gt;&gt; &amp; path, \n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">43</span><span>                           number stroke_width, </span><span style=\"color:#B45EA4\">bool</span><span> close_path) {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">44</span><span>        </span><span style=\"color:#B45EA4\">using</span><span> index = </span><span style=\"color:#B45EA4\">unsigned</span><span> </span><span style=\"color:#B45EA4\">int</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">45</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">46</span><span>        t+=number(</span><span style=\"color:#E7CE56\">0.28f</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">47</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">48</span><span>        </span><span style=\"color:#B6B18B\">// Algorithm START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">49</span><span>        </span><span style=\"color:#B6B18B\">// output vertices attributes</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">50</span>        container&lt;vertex2&lt;number&gt;&gt; output_vertices;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">51</span><span>        </span><span style=\"color:#B6B18B\">// output indices</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">52</span>        container&lt;index&gt; output_indices;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">53</span><span>        </span><span style=\"color:#B6B18B\">// output boundary info</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">54</span>        container&lt;boundary_info&gt; output_boundary_buffer;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">55</span><span>        </span><span style=\"color:#B6B18B\">// output triangles type</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">56</span>        microtess::triangles::indices output_triangles_type;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">57</span><span>        </span><span style=\"color:#B6B18B\">// define algorithm</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">58</span><span>        </span><span style=\"color:#B45EA4\">using</span><span> stroke_tess = microtess::stroke_tessellation&lt;number,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">59</span>                container&lt;vertex2&lt;number&gt;&gt;, container&lt;index&gt;,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">60</span>                container&lt;boundary_info&gt;&gt;;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">61</span><span>        </span><span style=\"color:#B6B18B\">// compute algorithm</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">62</span>        stroke_tess::compute_with_dashes(\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">63</span>                stroke_width,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">64</span>                close_path,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">65</span>                microtess::stroke_cap::round,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">66</span>                microtess::stroke_line_join::round,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">67</span><span>                </span><span style=\"color:#E7CE56\">8</span><span>,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">68</span><span>                </span><span style=\"color:#E7CE56\">std</span><span>::</span><span style=\"color:#E7CE56\">initializer_list</span><span>&lt;</span><span style=\"color:#B45EA4\">int</span><span>&gt;{</span><span style=\"color:#E7CE56\">50</span><span>, </span><span style=\"color:#E7CE56\">50</span><span>}, t,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">69</span>                path.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">70</span><span>                path.</span><span style=\"color:#E7CE56\">size</span><span>(),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">71</span>                output_vertices,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">72</span>                output_indices,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">73</span>                output_triangles_type,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">74</span>                &amp;output_boundary_buffer);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">75</span><span>         </span><span style=\"color:#B6B18B\">// Algorithm END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">76</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">77</span><span>        </span><span style=\"color:#B6B18B\">// draw triangles batch</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">78</span><span>        canvas.</span><span style=\"color:#E7CE56\">clear</span><span>({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">79</span><span>        canvas.drawTriangles&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">true</span><span>&gt;(\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">80</span>                color_red,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">81</span>                matrix_3x3&lt;number&gt;::identity(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">82</span>                output_vertices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">83</span><span>                (vertex2&lt;number&gt; *)</span><span style=\"color:#E7CE56\">nullptr</span><span>,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">84</span>                output_indices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">85</span>                output_boundary_buffer.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">86</span><span>                output_indices.</span><span style=\"color:#E7CE56\">size</span><span>(),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">87</span>                output_triangles_type,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">88</span><span>                </span><span style=\"color:#E7CE56\">127</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">89</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">90</span>        canvas.drawTrianglesWireframe(\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">91</span><span>                {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">92</span>                matrix_3x3&lt;number&gt;::identity(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">93</span>                output_vertices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">94</span>                output_indices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">95</span><span>                output_indices.</span><span style=\"color:#E7CE56\">size</span><span>(),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">96</span>                output_triangles_type,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">97</span><span>                </span><span style=\"color:#E7CE56\">63</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">98</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">99</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">100</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;](</span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*) -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">101</span><span>        </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">auto</span><span> path = path_1&lt;number&gt;();\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">102</span><span>        render_path(path, </span><span style=\"color:#E7CE56\">40.0f</span><span>, </span><span style=\"color:#E7CE56\">false</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">103</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">104</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">105</span>    example_run(&amp;canvas, render);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">106</span>}\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">107</span>\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}