{"pageProps":{"data":{"slug":"algorithms/path-fill","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Path Fill\"), \" Tessellates any collection of polygons of any type\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Path\"), \" is a modern interface for vector graphics, where you can define multiple paths with tools such as:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Lines, Rectangles\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Bezier curves\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Elliptic arcs\\nAnd then you can tessellate them automatically using:\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Fill Tessellation \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"planar-subdivision\"\n  }, \"Planar Subdivision\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Stroke Tessellation \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"stroke\"\n  }, \"Stroke Tessellation\"))), mdx(\"p\", null, \"It is best to see the example of usage below.\"), mdx(\"h3\", null, \"Notes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Self contained and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"does not require stdlib\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After Fill or Stroke Tessellation, internal buffers are cached, so re-tessellation\\nwill happen only if something is invalid. This is done to save energy.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Internal cache buffers can be drained using the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"drainBuffers()\")), \" method\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Fill Rules\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"even-odd\")), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"non-zero\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Numerically stable\"), \". Can tessellate with any number \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"precision\"), \": \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q\")), \" (fixed point), \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"float\")), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"double\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Includes geometric optimizations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Allocator-aware\"), \" so you can use it in any computer memory model (even on the stack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"3\"), \" Configurable tessellation \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"qualities\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Debuggable messages flag with macro definition (this will require stdlib)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Debuggable optional approximate trapezes output\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optional boundary info output\")), mdx(\"h3\", null, \"Input\"), mdx(\"p\", null, \"Input to the algorithm is\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fill rule enum \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microtess::fill_rule\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tess quality enum \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microtess::tess_quality\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"extra flags for debug info and boundary info\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can decide which template for internal container is used (such as std::vector)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can decide which allocator is used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can even use an array that is on the stack with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"static_array\"))), mdx(\"h3\", null, \"Output\"), mdx(\"p\", null, \"The algorithm outputs a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"buffers\")), \" struct which holds containers for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"vertices\")), \",\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"indices\")), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"triangles type\")), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"boundary info\")), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"debug trapezes\"))), mdx(\"h3\", null, \"Debugging\"), mdx(\"p\", null, \"If you are seeing bugs with the tessellation, try the following\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"APPLY_MERGE\")), \" template argument to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \" in \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellateFill\")), \" method, this optimization might be producing problems.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Try increasing \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"MAX_ITERATIONS\")), \" template argument in \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tessellateFill\")), \" method. Your algorithm might need more iterations if\\none of your polygons is huge. This argument is a fail safe way to exit an infinite loop if one shoudl occur.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"#define MICROTESS_PLANAR_DEBUG_MESSAGES\")), \" before all other includes. This should give messages and throw\\nexceptions when the algorithm 'feels' things are wrong, so this can give you info.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Try increasing the precision of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"number\"), \" type of the vertices:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If using \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q\")), \", try increasing precision bits. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Q<8> -> Q<15>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If using \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"float\")), \", then try \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"double\")), \" etc..\")))), mdx(\"h2\", null, \"Example\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"taken from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"examples/example_draw_path_fill.cpp\"))), mdx(\"div\", {\n    style: {\n      margin: \"auto\"\n    }\n  }, mdx(\"img\", {\n    src: \"/images/tess/path-fill-1.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  })), mdx(\"p\", null, \"The example demonstrates usage of different linear containers (including the packaged non standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dynamic_array\"), \"),\\nalso a usage with a static array, that manages all memory on the stack.  \"), mdx(\"p\", null, \"The example also demonstrates different number types such as fixed point\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"integer(\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q\")), \" numbers), float and doubles. Of particular interest is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q<4>\")), \", a very low 4 bit precision,\\nthat can compute the tessellation, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"This is the first published tessellator, that can do that\"), \".\\nTessellation computation is only few lines of code.  \"), mdx(\"p\", null, \"I use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microgl\")), \" project to render the tessellation.  \"), mdx(\"p\", null, \"Tessellation is happening at line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#71\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c++-lines_numbers\"\n  }, \"#define MICROGL_USE_STD_MATH\\n#define MICROGL_USE_EXTERNAL_MICRO_TESS\\n\\n#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/bitmaps/bitmap.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/flat_color.h>\\n#include <microgl/math/Q.h>\\n\\n#include <micro-tess/path.h>\\n#include <micro-tess/std_rebind_allocator.h>\\n#include <micro-tess/dynamic_array.h>\\n#include <micro-tess/static_array.h>\\n#include <vector>\\n\\nusing microtess::path;\\nfloat t = 0;\\n\\n// stack container with fake allocator\\ntemplate<class item, class fake_allocator>\\nusing static_array_with_fake_allocator = static_array<item, 10000, fake_allocator>;\\n\\ntemplate<typename number>\\n//using path_t = path<number, static_array_with_fake_allocator>;\\n//using path_t = path<number, std::vector>;\\nusing path_t = path<number, dynamic_array>;\\n\\ntemplate <typename number>\\npath_t<number> path_arc_animation() {\\n    path_t<number> path{};\\n    int div=32;\\n    path.arc({200,200}, 100,\\n             microgl::math::deg_to_rad(0.0f),\\n             microgl::math::deg_to_rad(360.0f),\\n             false, div).closePath();\\n    path.arc({250,200}, 50,\\n             microgl::math::deg_to_rad(0.0f),\\n             microgl::math::deg_to_rad(360.0f),\\n             true, div).closePath();\\n    t+=1.82f;\\n    path.moveTo({150,150})\\n        .arc({150+0,150}, 50+t-0,\\n             math::deg_to_rad(0.0f),\\n             math::deg_to_rad(360.0f),\\n             false, div);\\n    return path;\\n}\\n\\nint main() {\\n    using number = float;\\n    // using number = double;\\n    // using number = Q<15, long long>;\\n    // using number = Q<8, int32_t, int64_t, 0>;\\n    // using number = Q<2, int64_t>;\\n    // using number = Q<4, int32_t>;\\n    // using number = Q<12>;\\n\\n    // microgl drawing setup START\\n    using index = unsigned int;\\n    using Canvas24= canvas<bitmap<RGB888_PACKED_32>>;\\n    sampling::flat_color<> color_red {{255,0,255,255}};\\n    Canvas24 canvas(640, 480);\\n    // microgl drawing setup END\\n\\n    constexpr auto debug = true;\\n\\n    auto render_path = [&](path_t<number> & path) {\\n\\n        // Algorithm START\\n        const auto & buffers= path.tessellateFill(\\n                microtess::fill_rule::even_odd,\\n                microtess::tess_quality::prettier_with_extra_vertices,\\n                true, debug);\\n        // Algorithm END\\n\\n        canvas.clear({255, 255, 255, 255});\\n        canvas.drawTriangles<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true>(\\n                color_red,\\n                matrix_3x3<number>::identity(),\\n                buffers.output_vertices.data(),\\n                static_cast<vertex2<number> *>(nullptr),\\n                buffers.output_indices.data(),\\n                buffers.output_boundary.data(),\\n                buffers.output_indices.size(),\\n                buffers.output_indices_type,\\n                255);\\n\\n        if(debug) {\\n            canvas.drawTrianglesWireframe(\\n                   {0, 0, 0, 255}, matrix_3x3<number>::identity(),\\n                   buffers.output_vertices.data(),\\n                   buffers.output_indices.data(),\\n                   buffers.output_indices.size(),\\n                   buffers.output_indices_type,\\n                   40);\\n            for (index ix = 0; ix < buffers.DEBUG_output_trapezes.size(); ix+=4)\\n                canvas.drawWuLinePath<number>({0, 0, 0, 255},\\n                                 &buffers.DEBUG_output_trapezes[ix], 4, true);\\n        }\\n    };\\n\\n    auto render = [&](void*, void*, void*) -> void {\\n        auto path = path_arc_animation<number>();\\n        render_path(path);\\n    };\\n\\n    example_run(&canvas, render);\\n}\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Path Fill</strong> Tessellates any collection of polygons of any type<div class=\"css-0\"></div>\n<strong class=\"css-10ircq3\">Path</strong> is a modern interface for vector graphics, where you can define multiple paths with tools such as:</p><ol class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Lines, Rectangles</li><li class=\"css-b0qdn7\">Bezier curves</li><li class=\"css-b0qdn7\">Elliptic arcs\nAnd then you can tessellate them automatically using:</li><li class=\"css-b0qdn7\">Fill Tessellation <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"planar-subdivision\">Planar Subdivision</a></li><li class=\"css-b0qdn7\">Stroke Tessellation <a class=\"chakra-link css-1kc89wa\" href=\"stroke\">Stroke Tessellation</a></li></ol><p class=\"css-0\">It is best to see the example of usage below.</p><h3 class=\"css-0\">Notes:</h3><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Self contained and <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">does not require stdlib</div></strong></li><li class=\"css-b0qdn7\">After Fill or Stroke Tessellation, internal buffers are cached, so re-tessellation\nwill happen only if something is invalid. This is done to save energy.</li><li class=\"css-b0qdn7\">Internal cache buffers can be drained using the <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">drainBuffers()</div></strong> method</li><li class=\"css-b0qdn7\">Supports <strong class=\"css-10ircq3\">Fill Rules</strong> - <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">even-odd</div></strong> and <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">non-zero</div></strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Numerically stable</strong>. Can tessellate with any number <strong class=\"css-10ircq3\">precision</strong>: <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">Q</div></strong> (fixed point), <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">float</div></strong> and <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">double</div></strong></li><li class=\"css-b0qdn7\">Includes geometric optimizations</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Allocator-aware</strong> so you can use it in any computer memory model (even on the stack)</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">3</strong> Configurable tessellation <strong class=\"css-10ircq3\">qualities</strong></li><li class=\"css-b0qdn7\">Debuggable messages flag with macro definition (this will require stdlib)</li><li class=\"css-b0qdn7\">Debuggable optional approximate trapezes output</li><li class=\"css-b0qdn7\">Optional boundary info output</li></ul><h3 class=\"css-0\">Input</h3><p class=\"css-0\">Input to the algorithm is</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Fill rule enum <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microtess::fill_rule</div></strong></li><li class=\"css-b0qdn7\">Tess quality enum <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">microtess::tess_quality</div></strong></li><li class=\"css-b0qdn7\">extra flags for debug info and boundary info</li><li class=\"css-b0qdn7\">You can decide which template for internal container is used (such as std::vector)</li><li class=\"css-b0qdn7\">You can decide which allocator is used</li><li class=\"css-b0qdn7\">You can even use an array that is on the stack with <div class=\"css-qskmz3\">static_array</div></li></ul><h3 class=\"css-0\">Output</h3><p class=\"css-0\">The algorithm outputs a <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">buffers</div></strong> struct which holds containers for <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">vertices</div></strong>,\n<strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">indices</div></strong>, <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">triangles type</div></strong>, <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">boundary info</div></strong>, <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">debug trapezes</div></strong></p><h3 class=\"css-0\">Debugging</h3><p class=\"css-0\">If you are seeing bugs with the tessellation, try the following</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Set <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">APPLY_MERGE</div></strong> template argument to <div class=\"css-qskmz3\">false</div> in <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">tessellateFill</div></strong> method, this optimization might be producing problems.</li><li class=\"css-b0qdn7\">Try increasing <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">MAX_ITERATIONS</div></strong> template argument in <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">tessellateFill</div></strong> method. Your algorithm might need more iterations if\none of your polygons is huge. This argument is a fail safe way to exit an infinite loop if one shoudl occur.</li><li class=\"css-b0qdn7\">Add <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">#define MICROTESS_PLANAR_DEBUG_MESSAGES</div></strong> before all other includes. This should give messages and throw\nexceptions when the algorithm &#x27;feels&#x27; things are wrong, so this can give you info.</li><li class=\"css-b0qdn7\">Try increasing the precision of the <div class=\"css-qskmz3\">number</div> type of the vertices:<ul class=\"css-0\"><li class=\"css-b0qdn7\">If using <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">Q</div></strong>, try increasing precision bits. <strong class=\"css-10ircq3\">Q&lt;8&gt; -&gt; Q&lt;15&gt;</strong></li><li class=\"css-b0qdn7\">If using <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">float</div></strong>, then try <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">double</div></strong> etc..</li></ul></li></ul><h2 class=\"css-0\">Example</h2><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">taken from <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">examples/example_draw_path_fill.cpp</div></p></blockquote><div style=\"margin:auto\"><img src=\"/images/tess/path-fill-1.png\" style=\"height:250px;margin:auto\"/></div><p class=\"css-0\">The example demonstrates usage of different linear containers (including the packaged non standard <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">dynamic_array</div>),\nalso a usage with a static array, that manages all memory on the stack.  </p><p class=\"css-0\">The example also demonstrates different number types such as fixed point<div class=\"css-0\"></div>\n<!-- -->integer(<style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">Q</div></strong> numbers), float and doubles. Of particular interest is <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">Q&lt;4&gt;</div></strong>, a very low 4 bit precision,\nthat can compute the tessellation, <strong class=\"css-10ircq3\">This is the first published tessellator, that can do that</strong>.\nTessellation computation is only few lines of code.  </p><p class=\"css-0\">I use the <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div></strong> project to render the tessellation.  </p><p class=\"css-0\">Tessellation is happening at line <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">#71</div></p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-c++\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">1</span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> MICROGL_USE_STD_MATH</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">2</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> MICROGL_USE_EXTERNAL_MICRO_TESS</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">3</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">4</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">5</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">6</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/bitmaps/bitmap.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">7</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">8</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">9</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/math/Q.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">10</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">11</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/path.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">12</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/std_rebind_allocator.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">13</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/dynamic_array.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">14</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/static_array.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">15</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;vector&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">16</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">17</span><span></span><span style=\"color:#B45EA4\">using</span><span> microtess::path;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">18</span><span></span><span style=\"color:#B45EA4\">float</span><span> t = </span><span style=\"color:#E7CE56\">0</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">19</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">20</span><span></span><span style=\"color:#B6B18B\">// stack container with fake allocator</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">21</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span class=\"hljs-class\" style=\"color:#B45EA4\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">item</span><span class=\"hljs-class\">, </span><span class=\"hljs-class\" style=\"color:#B45EA4\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">fake_allocator</span><span class=\"hljs-class\">&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">22</span><span></span><span style=\"color:#B45EA4\">using</span><span> static_array_with_fake_allocator = static_array&lt;item, </span><span style=\"color:#E7CE56\">10000</span><span>, fake_allocator&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">23</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">24</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">25</span><span></span><span style=\"color:#B6B18B\">//using path_t = path&lt;number, static_array_with_fake_allocator&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">26</span><span></span><span style=\"color:#B6B18B\">//using path_t = path&lt;number, std::vector&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">27</span><span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">path_t</span><span> = path&lt;number, dynamic_array&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">28</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">29</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">30</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">path_t</span><span class=\"hljs-function\">&lt;number&gt; </span><span class=\"hljs-function\" style=\"color:#78BB65\">path_arc_animation</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span class=\"hljs-function\"> </span><span>{\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">31</span><span>    </span><span style=\"color:#B45EA4\">path_t</span><span>&lt;number&gt; path{};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">32</span><span>    </span><span style=\"color:#B45EA4\">int</span><span> div=</span><span style=\"color:#E7CE56\">32</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">33</span><span>    path.arc({</span><span style=\"color:#E7CE56\">200</span><span>,</span><span style=\"color:#E7CE56\">200</span><span>}, </span><span style=\"color:#E7CE56\">100</span><span>,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">34</span><span>             microgl::math::deg_to_rad(</span><span style=\"color:#E7CE56\">0.0f</span><span>),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">35</span><span>             microgl::math::deg_to_rad(</span><span style=\"color:#E7CE56\">360.0f</span><span>),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">36</span><span>             </span><span style=\"color:#E7CE56\">false</span><span>, div).closePath();\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">37</span><span>    path.arc({</span><span style=\"color:#E7CE56\">250</span><span>,</span><span style=\"color:#E7CE56\">200</span><span>}, </span><span style=\"color:#E7CE56\">50</span><span>,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">38</span><span>             microgl::math::deg_to_rad(</span><span style=\"color:#E7CE56\">0.0f</span><span>),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">39</span><span>             microgl::math::deg_to_rad(</span><span style=\"color:#E7CE56\">360.0f</span><span>),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">40</span><span>             </span><span style=\"color:#E7CE56\">true</span><span>, div).closePath();\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">41</span><span>    t+=</span><span style=\"color:#E7CE56\">1.82f</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">42</span><span>    path.moveTo({</span><span style=\"color:#E7CE56\">150</span><span>,</span><span style=\"color:#E7CE56\">150</span><span>})\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">43</span><span>        .arc({</span><span style=\"color:#E7CE56\">150</span><span>+</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">150</span><span>}, </span><span style=\"color:#E7CE56\">50</span><span>+t</span><span style=\"color:#E7CE56\">-0</span><span>,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">44</span><span>             math::deg_to_rad(</span><span style=\"color:#E7CE56\">0.0f</span><span>),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">45</span><span>             math::deg_to_rad(</span><span style=\"color:#E7CE56\">360.0f</span><span>),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">46</span><span>             </span><span style=\"color:#E7CE56\">false</span><span>, div);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">47</span><span>    </span><span style=\"color:#B45EA4\">return</span><span> path;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">48</span>}\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">49</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">50</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">main</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span class=\"hljs-function\"> </span><span>{\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">51</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">52</span><span>    </span><span style=\"color:#B6B18B\">// using number = double;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">53</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;15, long long&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">54</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;8, int32_t, int64_t, 0&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">55</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;2, int64_t&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">56</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;4, int32_t&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">57</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">58</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">59</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">60</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> index = </span><span style=\"color:#B45EA4\">unsigned</span><span> </span><span style=\"color:#B45EA4\">int</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">61</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;RGB888_PACKED_32&gt;&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">62</span><span>    sampling::flat_color&lt;&gt; color_red {{</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>}};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">63</span><span>    </span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">64</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">65</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">66</span><span>    </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">auto</span><span> debug = </span><span style=\"color:#E7CE56\">true</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">67</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">68</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> render_path = [&amp;](</span><span style=\"color:#B45EA4\">path_t</span><span>&lt;number&gt; &amp; path) {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">69</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">70</span><span>        </span><span style=\"color:#B6B18B\">// Algorithm START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">71</span><span>        </span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">auto</span><span> &amp; buffers= path.tessellateFill(\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">72</span>                microtess::fill_rule::even_odd,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">73</span>                microtess::tess_quality::prettier_with_extra_vertices,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">74</span><span>                </span><span style=\"color:#E7CE56\">true</span><span>, debug);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">75</span><span>        </span><span style=\"color:#B6B18B\">// Algorithm END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">76</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">77</span><span>        canvas.</span><span style=\"color:#E7CE56\">clear</span><span>({</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">78</span><span>        canvas.drawTriangles&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">true</span><span>&gt;(\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">79</span>                color_red,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">80</span>                matrix_3x3&lt;number&gt;::identity(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">81</span>                buffers.output_vertices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">82</span><span>                </span><span style=\"color:#B45EA4\">static_cast</span><span>&lt;vertex2&lt;number&gt; *&gt;(</span><span style=\"color:#E7CE56\">nullptr</span><span>),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">83</span>                buffers.output_indices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">84</span>                buffers.output_boundary.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">85</span><span>                buffers.output_indices.</span><span style=\"color:#E7CE56\">size</span><span>(),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">86</span>                buffers.output_indices_type,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">87</span><span>                </span><span style=\"color:#E7CE56\">255</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">88</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">89</span><span>        </span><span style=\"color:#B45EA4\">if</span><span>(debug) {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">90</span>            canvas.drawTrianglesWireframe(\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">91</span><span>                   {</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>}, matrix_3x3&lt;number&gt;::identity(),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">92</span>                   buffers.output_vertices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">93</span>                   buffers.output_indices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">94</span><span>                   buffers.output_indices.</span><span style=\"color:#E7CE56\">size</span><span>(),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">95</span>                   buffers.output_indices_type,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">96</span><span>                   </span><span style=\"color:#E7CE56\">40</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">97</span><span>            </span><span style=\"color:#B45EA4\">for</span><span> (index ix = </span><span style=\"color:#E7CE56\">0</span><span>; ix &lt; buffers.DEBUG_output_trapezes.</span><span style=\"color:#E7CE56\">size</span><span>(); ix+=</span><span style=\"color:#E7CE56\">4</span><span>)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">98</span><span>                canvas.drawWuLinePath&lt;number&gt;({</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">99</span><span>                                 &amp;buffers.DEBUG_output_trapezes[ix], </span><span style=\"color:#E7CE56\">4</span><span>, </span><span style=\"color:#E7CE56\">true</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">100</span>        }\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">101</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">102</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">103</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;](</span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*) -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">104</span><span>        </span><span style=\"color:#B45EA4\">auto</span><span> path = path_arc_animation&lt;number&gt;();\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">105</span>        render_path(path);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">106</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">107</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">108</span>    example_run(&amp;canvas, render);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">109</span>}\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">110</span>\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}