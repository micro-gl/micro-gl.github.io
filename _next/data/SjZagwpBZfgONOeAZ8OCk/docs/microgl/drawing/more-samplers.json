{"pageProps":{"data":{"slug":"drawing/more-samplers","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Besides\"), \" of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/drawing/gradients\"\n  }, \"Gradients\"), \" samplers shipped with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \",\\nthere are more samplers packed in.\"), mdx(\"h1\", null, \"Texture Sampler\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/samplers/texture.h>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_texture.cpp\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_texture_wrap.cpp\"))), mdx(\"img\", {\n    src: \"/images/sampler_texture.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"This sampler holds a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"bitmap\"\n  }, \"bitmap\"), \" and samples from it\"), mdx(\"h2\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n#include <microgl/pixel_coders/RGBA8888_ARRAY.h>\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing Texture32= sampling::texture<bitmap<coder::RGBA8888_ARRAY>>;\\n//    using number = Q<12>;\\nusing number = float;\\n\\nResources resources{};\\nCanvas24 canvas(640, 480);\\n\\nauto img_1 = resources.loadImageFromCompressedPath(\\\"images/dog_32bit.png\\\");\\n\\nTexture32 tex_uv_32{new bitmap<coder::RGBA8888_ARRAY>(img_1.data, img_1.width, img_1.height)};\\n\\nauto render = [&]() -> void {\\n    canvas.clear({255,255,255,255});\\n    canvas.drawRect<blendmode::Normal, porterduff::FastSourceOverOnOpaque, false, number>(\\n            tex_uv_32,\\n            0, 0, 300, 300);\\n};\\n\\nexample_run(&canvas, render);\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"a texture will automatically use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"rgba\"), \" info of the bitmap it samples from \")), mdx(\"h1\", null, \"Checker Board Sampler\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/samplers/checker_board.h>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_checkerboard.cpp\"))), mdx(\"img\", {\n    src: \"/images/sampler_checker_board.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"This sampler can draw a checker board pattern with\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Configurable two colors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Configurable horizontal and vertical splits\")), mdx(\"h3\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/checker_board.h>\\n\\n#define W 640\\n#define H 480\\n\\nusing namespace microgl::sampling;\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nCanvas24 canvas(W, H);\\nchecker_board<> sampler{{0, 0, 0, 255},\\n                        {255, 255, 255, 255},\\n                        8, 8};\\n \\n// this sampler is a bit faster, but requires powers of two\\nchecker_board_pot<3,3> sampler_pot{{0, 0, 0, 255},\\n                        {255, 255, 255, 255}};\\n\\nauto render = [&]() -> void {\\n    canvas.clear({255,200,255,255});\\n    canvas.drawRect<blendmode::Normal, porterduff::None<>, false, number>(\\n            sampler,\\n            0, 0, 300, 300);\\n};\\n\\nexample_run(&canvas, render);\\n\")), mdx(\"h1\", null, \"Flat Color Sampler\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/samplers/flat_color.h>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_flat_color.cpp\"))), mdx(\"img\", {\n    src: \"/images/sampler_flat.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"this is a very trivial sampler that samples a single color, it's declaration is\"), mdx(\"h3\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/flat_color.h>\\n\\nusing namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nCanvas24 canvas(640, 480);\\nflat_color<> color_sampler{{255,122,0}};\\n\\nauto render = [&]() -> void {\\n    canvas.clear({255,255,255,255});\\n    canvas.drawRect<blendmode::Normal, porterduff::None<>, false, number>(\\n            color_sampler,\\n            0, 0, 400, 400);\\n};\\n\\nexample_run(&canvas, render);\\n\")), mdx(\"h1\", null, \"Mask Sampler\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/samplers/mask_sampler.h>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_masking_sampler.cpp\"))), mdx(\"img\", {\n    src: \"/images/sampler_masking.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"This sampler can mask a sampler with a different sampler, this is very useful if you want to\\ndraw a masked image on the canvas.\"), mdx(\"h3\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n#include <microgl/pixel_coders/RGBA8888_ARRAY.h>\\n#include <microgl/samplers/mask_sampler.h>\\n#include <microgl/samplers/flat_color.h>\\n\\nusing namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing Texture24= texture<bitmap<coder::RGB888_ARRAY>>;\\nusing Texture32= texture<bitmap<coder::RGBA8888_ARRAY>>;\\nusing MaskingSampler= mask_sampler<masks::chrome_mode::alpha_channel_inverted, Texture24, Texture32>;\\n\\nusing number = float;\\n// using number = Q<12>;\\n\\nResources resources{};\\nCanvas24 canvas(640, 480);\\n\\nauto img_2 = resources.loadImageFromCompressedPath(\\\"images/uv_256.png\\\");\\nauto img_mask = resources.loadImageFromCompressedPath(\\\"images/dog_32bit.png\\\");\\n\\nTexture24 tex_uv{new bitmap<coder::RGB888_ARRAY>(img_2.data, img_2.width, img_2.height)};\\nTexture32 tex_mask{new bitmap<coder::RGBA8888_ARRAY>(img_mask.data, img_mask.width, img_mask.height)};\\n\\nMaskingSampler ms{tex_uv, tex_mask};\\n\\nflat_color<rgba_t<8,8,8,0>> color_red{{255, 255, 0}};\\n\\nauto render = [&]() -> void {\\n    canvas.clear({255, 255, 255, 255});\\n    canvas.drawRect<blendmode::Normal, porterduff::None<>, false, number>(\\n            color_red,\\n            0, 0, 300, 300);\\n    canvas.drawRect<blendmode::Normal, porterduff::FastSourceOverOnOpaque, false, number>(\\n            ms,\\n            0, 0, 300, 300);\\n};\\n\\nexample_run(&canvas, render);\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Besides</strong> of the <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"/docs/drawing/gradients\">Gradients</a> samplers shipped with <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div>,\nthere are more samplers packed in.</p><h1 class=\"css-0\">Texture Sampler</h1><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/samplers/texture.h&gt;</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-qskmz3\">/examples/example_sampler_texture.cpp</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-qskmz3\">/examples/example_sampler_texture_wrap.cpp</div></li></ul><img src=\"/images/sampler_texture.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">This sampler holds a <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"bitmap\">bitmap</a> and samples from it</p><h2 class=\"css-0\">Usage Example</h2><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/Resources.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_ARRAY.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGBA8888_ARRAY.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Texture32= sampling::texture&lt;bitmap&lt;coder::RGBA8888_ARRAY&gt;&gt;;\n</span><span></span><span style=\"color:#B6B18B\">//    using number = Q&lt;12&gt;;</span><span>\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span>\n<!-- -->Resources resources{};\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> img_1 = resources.loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/dog_32bit.png&quot;</span><span>);\n</span>\n<span>Texture32 tex_uv_32{</span><span style=\"color:#B45EA4\">new</span><span> bitmap&lt;coder::RGBA8888_ARRAY&gt;(img_1.data, img_1.width, img_1.height)};\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawRect&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>            tex_uv_32,\n<span>            </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>);\n</span>};\n<!-- -->\n<!-- -->example_run(&amp;canvas, render);\n<!-- -->\n</code></pre></pre><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">a texture will automatically use the <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">rgba</strong> info of the bitmap it samples from </p></blockquote><h1 class=\"css-0\">Checker Board Sampler</h1><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/samplers/checker_board.h&gt;</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-qskmz3\">/examples/example_sampler_checkerboard.cpp</div></li></ul><img src=\"/images/sampler_checker_board.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">This sampler can draw a checker board pattern with</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Configurable two colors</li><li class=\"css-b0qdn7\">Configurable horizontal and vertical splits</li></ul><h3 class=\"css-0\">Usage Example</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/checker_board.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> W 640</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> H 480</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(W, H)</span><span>;\n</span><span>checker_board&lt;&gt; sampler{{</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span>                        {</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span>                        </span><span style=\"color:#E7CE56\">8</span><span>, </span><span style=\"color:#E7CE56\">8</span><span>};\n</span> \n<span></span><span style=\"color:#B6B18B\">// this sampler is a bit faster, but requires powers of two</span><span>\n</span><span>checker_board_pot&lt;</span><span style=\"color:#E7CE56\">3</span><span>,</span><span style=\"color:#E7CE56\">3</span><span>&gt; sampler_pot{{</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span>                        {</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>}};\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">200</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawRect&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>            sampler,\n<span>            </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>);\n</span>};\n<!-- -->\n<!-- -->example_run(&amp;canvas, render);\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Flat Color Sampler</h1><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/samplers/flat_color.h&gt;</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-qskmz3\">/examples/example_sampler_flat_color.cpp</div></li></ul><img src=\"/images/sampler_flat.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">this is a very trivial sampler that samples a single color, it&#x27;s declaration is</p><h3 class=\"css-0\">Usage Example</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span>flat_color&lt;&gt; color_sampler{{</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">122</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>}};\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawRect&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>            color_sampler,\n<span>            </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>);\n</span>};\n<!-- -->\n<!-- -->example_run(&amp;canvas, render);\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Mask Sampler</h1><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/samplers/mask_sampler.h&gt;</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-qskmz3\">/examples/example_sampler_masking_sampler.cpp</div></li></ul><img src=\"/images/sampler_masking.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">This sampler can mask a sampler with a different sampler, this is very useful if you want to\ndraw a masked image on the canvas.</p><h3 class=\"css-0\">Usage Example</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_ARRAY.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGBA8888_ARRAY.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/mask_sampler.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Texture24= texture&lt;bitmap&lt;coder::RGB888_ARRAY&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Texture32= texture&lt;bitmap&lt;coder::RGBA8888_ARRAY&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> MaskingSampler= mask_sampler&lt;masks::chrome_mode::alpha_channel_inverted, Texture24, Texture32&gt;;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<!-- -->Resources resources{};\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> img_2 = resources.loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/uv_256.png&quot;</span><span>);\n</span><span></span><span style=\"color:#B45EA4\">auto</span><span> img_mask = resources.loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/dog_32bit.png&quot;</span><span>);\n</span>\n<span>Texture24 tex_uv{</span><span style=\"color:#B45EA4\">new</span><span> bitmap&lt;coder::RGB888_ARRAY&gt;(img_2.data, img_2.width, img_2.height)};\n</span><span>Texture32 tex_mask{</span><span style=\"color:#B45EA4\">new</span><span> bitmap&lt;coder::RGBA8888_ARRAY&gt;(img_mask.data, img_mask.width, img_mask.height)};\n</span>\n<!-- -->MaskingSampler ms{tex_uv, tex_mask};\n<!-- -->\n<span>flat_color&lt;</span><span style=\"color:#B45EA4\">rgba_t</span><span>&lt;</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>&gt;&gt; color_red{{</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>}};\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawRect&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>            color_red,\n<span>            </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>);\n</span><span>    canvas.drawRect&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>            ms,\n<span>            </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>);\n</span>};\n<!-- -->\n<!-- -->example_run(&amp;canvas, render);\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}