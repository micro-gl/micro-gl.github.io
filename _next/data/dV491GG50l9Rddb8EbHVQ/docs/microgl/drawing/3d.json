{"pageProps":{"data":{"logo":"/logos//microgl-512-logo.png","slug":"drawing/3d","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    pre: \"pre\",\n    a: \"a\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {Image} = _components;\n  if (!Image) _missingMdxReference(\"Image\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"3D\"\n      }), \" is fully supported in \", _jsx(_components.code, {\n        children: \"microgl\"\n      }), \". with the following objects:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Matrix\"\n        }), \" transformations, both Affine and projection\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Camera\"\n        }), \" utilities for creating \", _jsx(_components.strong, {\n          children: \"View\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"Projection\"\n        }), \" matrices\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Modern \", _jsx(_components.strong, {\n          children: \"3D Shaders\"\n        }), \" support\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Face Culling\"\n        }), \" algorithms\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"3D Clipping\"\n        }), \" algorithms\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Z Buffering\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Camera utils is at at \", _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"<microgl/camera.h>\"\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Color Shader Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This shader interpolates per vertex color and produces \", _jsx(_components.strong, {\n        children: \"gradients\"\n      })]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/3d_shader_color.png\",\n      className: \"w-[250px] h-[250px] mx-auto my-10\",\n      imgClass: \"\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/camera.h>\\n#include <microgl/canvas.h>\\n#include <microgl/z_buffer.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/shaders/color_shader.h>\\n#include \\\"data/model_3d_cube.h\\\"\\n\\nusing number = float;\\n//    using number = Q<5>;\\n//    using number = Q<10>;\\n//    using number = Q<15>;\\n//    using number = Q<16>;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nCanvas24 canvas(640, 480);\\nfloat t = -30.0;\\n\\nauto test_shader_texture_3d = [&](const model_3d<number> & object) {\\n\\n    using vertex = vec3<number>;\\n    using camera = microgl::camera;\\n    using mat4 = matrix_4x4<number>;\\n    using math = microgl::math;\\n    using shader_ = color_shader<number, rgba_t<8,8,8,0>>;\\n    using vertex_attributes = shader_::vertex_attributes;\\n\\n    t-=0.0425;\\n\\n    // setup mvp matrix\\n    number radians = math::deg_to_rad(t / 2);\\n    vertex rotation = {radians, radians, radians};\\n    vertex translation = {-5,0, 0};\\n    vertex scale = {10,10,10};\\n    mat4 model = mat4::transform(rotation, translation, scale);\\n    mat4 view = camera::lookAt<number>({0, 0, 70}, {0,0, 0}, {0,1,0});\\n    mat4 projection = camera::perspective<number>(math::deg_to_rad(60),\\n                                canvas.width(), canvas.height(), 20, 100);\\n    mat4 mvp= projection * view * model;\\n\\n    // setup shader\\n    shader_ shader;\\n    shader.matrix= mvp;\\n\\n    // model to vertex buffers\\n    dynamic_array<vertex_attributes> vertex_buffer{object.vertices.size()};\\n    for (unsigned ix = 0; ix < object.vertices.size(); ++ix) {\\n        shader_::vertex_attributes v{};\\n        channel_t r= (ix%3)==0 ? 255:0;\\n        channel_t g= (ix%3)==1 ? 255:0;\\n        channel_t b= (ix%3)==2 ? 255:0;\\n        v.point= object.vertices[ix];\\n        v.color={r,g,b,255};\\n        vertex_buffer.push_back(v);\\n    }\\n\\n    // draw model_1\\n    canvas.clear({255,255,255,255});\\n    canvas.drawTriangles<blendmode::Normal, porterduff::None<>, true, true, false>(\\n            shader,\\n            canvas.width(), canvas.height(),\\n            vertex_buffer.data(),\\n            object.indices.data(),\\n            object.indices.size(),\\n            object.type,\\n            triangles::face_culling::ccw,\\n            (z_buffer<0> *)nullptr);\\n};\\n\\nauto render = [&]() {\\n    test_shader_texture_3d(cube_3d<number>);\\n};\\n\\nexample_run(&canvas, render);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Sampler Shader Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This shader can use any \", _jsx(_components.a, {\n        href: \"/docs/concepts/samplers\",\n        children: \"sampler\"\n      }), \" object such as the ones implemented\\nat \", _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"<microgl/samplers/>\"\n        })\n      }), \" (or your own custom sampler)\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/3d_shader_sampler.png\",\n      className: \"w-[250px] h-[250px] mx-auto my-10\",\n      imgClass: \"\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example demos the \", _jsx(_components.strong, {\n        children: \"sampler\"\n      }), \" shader to draw a texture, it also uses the \", _jsx(_components.strong, {\n        children: \"Z-Buffer\"\n      }), \",\\nto draw two overlapping 3d cubes\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/camera.h>\\n#include <microgl/z_buffer.h>\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n#include <microgl/shaders/sampler_shader.h>\\n#include <microgl/samplers/texture.h>\\n#include \\\"data/model_3d_cube.h\\\"\\n\\nusing number = float;\\n// using number = Q<5>;\\n// using number = Q<10>;\\n// using number = Q<15>;\\n// using number = Q<16>;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>, CANVAS_OPT_2d_raster_FORCE_32_BIT>;\\nusing Texture24= sampling::texture<bitmap<coder::RGB888_ARRAY>, sampling::texture_filter::NearestNeighboor>;\\n\\nCanvas24 canvas(W, H);\\nResources resources{};\\n\\nauto img = resources.loadImageFromCompressedPath(\\\"images/uv_256.png\\\");\\nTexture24 tex{new bitmap<coder::RGB888_ARRAY>(img.data, img.width, img.height)};\\nz_buffer<12> depth_buffer(canvas.width(), canvas.height());\\n\\nfloat t = -0.0;\\nconstexpr bool enable_z_buffer = true;\\n\\nauto test_shader_texture_3d = [&](const model_3d<number> & object) {\\n\\n    using vertex = vec3<number>;\\n    using camera = microgl::camera;\\n    using mat4 = matrix_4x4<number>;\\n    using math = microgl::math;\\n    using Shader = sampler_shader<number, Texture24>;\\n    using vertex_attributes = Shader::vertex_attributes;\\n\\n    t-=0.425;\\n\\n    // setup mvp matrix\\n    number radians = math::deg_to_rad(t / 2);\\n    vertex rotation = {radians, radians, radians};\\n    vertex translation = {-5,0, -t/30.f};\\n    vertex scale = {10,10,10};\\n\\n    mat4 model_1 = mat4::transform(rotation, translation, scale);\\n    mat4 model_2 = mat4::transform(rotation*2, translation + vertex{10,0,0}, scale);\\n    mat4 view = camera::lookAt<number>({0, 0, 70}, {0,0, 0}, {0,1,0});\\n    mat4 projection = camera::perspective<number>(math::deg_to_rad(60),\\n                                                canvas.width(), canvas.height(), 20, 100);\\n\\n    mat4 mvp_1= projection*view*model_1;\\n    mat4 mvp_2= projection*view*model_2;\\n\\n    // setup shader\\n    Shader shader;\\n    shader.matrix= mvp_1;\\n    shader.sampler= &tex;\\n\\n    // model to vertex buffers\\n    dynamic_array<vertex_attributes> vertex_buffer{object.vertices.size()};\\n    for (unsigned ix = 0; ix < object.vertices.size(); ++ix) {\\n        vertex_attributes v{};\\n        v.point= object.vertices[ix];\\n        v.uv= object.uvs[ix];\\n        vertex_buffer.push_back(v);\\n    }\\n\\n    canvas.clear({255,255,255,255});\\n    depth_buffer.clear();\\n    // draw model_1\\n    canvas.drawTriangles<blendmode::Normal, porterduff::None<>, true, true, enable_z_buffer>(\\n            shader,\\n            canvas.width(), canvas.height(),\\n            vertex_buffer.data(),\\n            object.indices.data(),\\n            object.indices.size(),\\n            object.type,\\n            triangles::face_culling::ccw,\\n            &depth_buffer);\\n\\n    // draw model_2\\n    shader.matrix= mvp_2;\\n    canvas.drawTriangles<blendmode::Normal, porterduff::None<>, true, true, enable_z_buffer>(\\n            shader,\\n            canvas.width(), canvas.height(),\\n            vertex_buffer.data(),\\n            object.indices.data(),\\n            object.indices.size(),\\n            object.type,\\n            triangles::face_culling::ccw,\\n            &depth_buffer);\\n\\n};\\n\\nauto render = [&]() {\\n    test_shader_texture_3d(cube_3d<number>);\\n};\\n\\nexample_run(&canvas, render);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Flat Color Shader Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This only outputs a \", _jsx(_components.strong, {\n        children: \"single color\"\n      }), \" and therefore is very fast\"]\n    }), \"\\n\", _jsx(Image, {\n      src: \"/images/3d_shader_flat.png\",\n      className: \"w-[250px] h-[250px]\",\n      imgClass: \"\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/camera.h>\\n#include <microgl/canvas.h>\\n#include <microgl/z_buffer.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/shaders/flat_color_shader.h>\\n#include <microgl/samplers/texture.h>\\n#include \\\"data/model_3d_cube.h\\\"\\n\\nusing number = float;\\n// using number = Q<5>;\\n// using number = Q<10>;\\n// using number = Q<15>;\\n// using number = Q<16>;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\n\\nCanvas24 canvas(640, 480);\\nfloat t = -30.0;\\n\\nauto test_shader_texture_3d = [&](const model_3d<number> & object) {\\n\\n    using vertex = vec3<number>;\\n    using camera = microgl::camera;\\n    using mat4 = matrix_4x4<number>;\\n    using math = microgl::math;\\n    using Shader = flat_color_shader<number, rgba_t<8,8,8,0>>;\\n    using vertex_attributes = Shader::vertex_attributes;\\n\\n    t-=0.0425;\\n\\n    // setup mvp matrix\\n    number radians = math::deg_to_rad(t / 2);\\n    vertex rotation = {radians, radians, radians};\\n    vertex translation = {-5, 0, 0};\\n    vertex scale = {10, 10, 10};\\n\\n    mat4 model = mat4::transform(rotation, translation, scale);\\n    mat4 view = camera::lookAt<number>({0, 0, 70}, {0,0, 0}, {0,1,0});\\n    mat4 projection = camera::perspective<number>(math::deg_to_rad(60),\\n                                          canvas.width(), canvas.height(), 20, 100);\\n    // mat4 projection= camera::orthographic<number>(-canvas->width()/2, canvas->width()/2,\\n                                            //  -canvas->height()/2, canvas->height()/2, 1, 500);\\n    mat4 mvp = projection * view * model;\\n\\n    // setup shader\\n    Shader shader;\\n    shader.matrix= mvp;\\n    shader.color= {0, 255, 255, 255};\\n\\n    // model to vertex buffers\\n    dynamic_array<vertex_attributes> vertex_buffer{object.vertices.size()};\\n    for (unsigned ix = 0; ix < object.vertices.size(); ++ix) {\\n        vertex_attributes v{};\\n        v.point= object.vertices[ix];\\n        vertex_buffer.push_back(v);\\n    }\\n\\n    // draw model_1\\n    canvas.clear({255, 255, 255, 255});\\n    canvas.drawTriangles<blendmode::Normal, porterduff::None<>, true, true, false>(\\n            shader,\\n            canvas.width(), canvas.height(),\\n            vertex_buffer.data(),\\n            object.indices.data(),\\n            object.indices.size(),\\n            object.type,\\n            triangles::face_culling::ccw,\\n            (z_buffer<0> *)nullptr);\\n};\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"frontMatter":{},"document":{"name":"docs","logo":"/logos//microgl-512-logo.png","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}