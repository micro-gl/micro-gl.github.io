{"pageProps":{"data":{"slug":"concepts/3d","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, \"3D rendering is supported in microgl. microgl can emulate the GPU pipeline with:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3D Shaders\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3D Clipping\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Z-Buffer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Camera utilities: Perspective/Orthographic projection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"4x4 matrix class\")), mdx(\"h2\", null, \"3D Shaders\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"examples at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"examples/example_3d_*.cpp\")))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3D Shaders\"), \" are objects that emulate the way the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"GPU\"), \" draws objects. microgl\\nhas a built in 3d pipeline, that you can use by implementing shaders or using the\\nshaders, that are shipped with microgl.\"), mdx(\"p\", null, \"Shaders have 4 components:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"vertex attributes buffer\"), \" - holds the input to the shader, this might be vertices position, colors,\\nnormals etc..\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"vertex varying attributes\"), \" - these are per vertex attributes that are passed from vertex shader to\\nfragment/pixel shader for interpolation purposes.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"vertex shader\"), \" - a function, that given vertex attributes, will :\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return the transformed position of a vertex in homogeneous 4D space (Clip space)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pass varying attributes to the pixel shader\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pixel shader\"), \" - a function, that receives the interpolated varying attributes and\\noutputs a pixel color.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"decleration of the main number type and rgba info\")), mdx(\"p\", null, \"Here is an example of the interface needed for a shader\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"template<typename number_, typename rgba_>\\nstruct color_shader {\\n    // the main number type\\n    using number = number_;\\n    // the rgba info\\n    using rgba = rgba_;\\n    using gl_position= vec4<number>;\\n\\n    // per vertex attributes\\n    struct vertex_attributes {\\n        vec3<number> point;\\n        microgl::color::color_t color;\\n    };\\n\\n    // varying attributes\\n    struct varying {\\n        microgl::color::color_t color{255,0,0};\\n\\n        // you must implement the interpolation function\\n        void interpolate(const varying &varying_a,\\n                            const varying &varying_b,\\n                            const varying &varying_c,\\n                            const vec4<int> &bary) {\\n            color.r = int(vec4<number>{varying_a.color.r, varying_b.color.r, varying_c.color.r, 0}.dot(vec4<number>(bary))/bary.w);\\n            color.g = int(vec4<number>{varying_a.color.g, varying_b.color.g, varying_c.color.g, 0}.dot(vec4<number>(bary))/bary.w);\\n            color.b = int(vec4<number>{varying_a.color.b, varying_b.color.b, varying_c.color.b, 0}.dot(vec4<number>(bary))/bary.w);\\n            color.a = int(vec4<number>{varying_a.color.a, varying_b.color.a, varying_c.color.a, 0}.dot(vec4<number>(bary))/bary.w);\\n        }\\n    };\\n\\n    // this is a uniform global\\n    matrix_4x4<number> matrix;\\n\\n    // vertex shader\\n    inline gl_position\\n    vertex(const vertex_attributes &attributes, varying &output) {\\n        // pass varying on to the pixel shader so they can be interpolated\\n        output.color = attributes.color;\\n\\n        // tag the transformed position\\n        return matrix * gl_position{attributes.point};\\n    }\\n\\n    // pixel shader\\n    inline color::color_t\\n    fragment(const varying &input) {\\n        return input.color;\\n    }\\n\\n};\\n\\n\\n\")), mdx(\"h3\", null, \"The following shaders are shipped with \", mdx(\"strong\", {\n    parentName: \"h3\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microgl\"))), mdx(\"h4\", null, \"Flat Color shader\"), mdx(\"p\", null, \"This only outputs a single color and therefore is very fast\"), mdx(\"img\", {\n    src: \"/images/3d_shader_flat.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_3d_shaders_flat_color.cpp\")))), mdx(\"h4\", null, \"Color shader\"), mdx(\"p\", null, \"This shader interpolates per vertex color and produces gradients\"), mdx(\"img\", {\n    src: \"/images/3d_shader_color.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_3d_shader_color.cpp\")))), mdx(\"h4\", null, \"Sampler shader\"), mdx(\"p\", null, \"This shader can use any \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"samplers\"\n  }, \"sampler\"), \" object such as the ones implemented\\nat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/samplers/>\")), \" (or your own custom sampler)\"), mdx(\"img\", {\n    src: \"/images/3d_shader_sampler.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_3d_sampler_shader_and_z_buffer.cpp\")))), mdx(\"h2\", null, \"Camera and Perspective\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Implemented at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/camera.h>\")))), mdx(\"p\", null, \"Every vertex shader has to transform world-space 3d coords into clip-space, the so called\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"mvp = model-view-projection\")), \" matrix. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" comes is packed with utility methods\\nto construct such a matrix easily.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Model Matrix\"), \" - transform a model from object space (relative to origin(0,0,0)) into\\nworld space.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"View Matrix\"), \" - defines the inverse tranform of the camera space to the origin (world space to camera space)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Projection Matrix\"), \" - defines transformation from camera/view space into 3d rectangle and inverts the z-axis,\\nthis is the so called homogenous clip space. The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"w\"), \" components are divisors, that when used, they will transform\\nthe coordinates from clip space into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NDC = Normalized Device Coordinates\"), \" unit cube, from there we can apply the viewport\\ntransform, which will convert NDC space into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"raster\"), \" space.\")), mdx(\"h3\", null, \"Supported Camera View transformations\"), mdx(\"p\", null, \"Out of the box, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" supports, the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"class camera {\\npublic:\\n    /**\\n     * compute the camera view given position of camera and angular info\\n     *\\n     * @tparam number the number type\\n     *\\n     * @tparam position 3d position of camera\\n     * @tparam pitch    x-axis rotation\\n     * @tparam yaw      y-axis rotation\\n     * @tparam roll     z-axis rotation\\n     **/\\n    template <typename number>\\n    static matrix_4x4<number> angleAt(const vec3<number> &position,\\n                                      const number & pitch, \\n                                      const number & yaw, \\n                                      const number & roll)\\n\\n\\n    /**\\n     * set camera view matrix equivalent to gluLookAt() VIEW MATRIX\\n     *\\n     * @tparam number   the number type\\n     *\\n     * @param position  3d position of camera\\n     * @param target    look at 3d position\\n     * @param up        the vector pointing up\\n     * @return\\n     */\\n    template <typename number>\\n    static matrix_4x4<number> lookAt(const vec3<number> & position,\\n                                        const vec3<number>& target,\\n                                        const vec3<number>& up)\\n\\n}\\n\")), mdx(\"img\", {\n    src: \"/images/pitch_yaw_roll.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"h3\", null, \"Supported Projection Matrices\"), mdx(\"p\", null, \"Out of the box, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" supports, the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"class camera {\\npublic:\\n    /**\\n    * compute perspective projection matrix\\n    *\\n    * @tparam number                   number type\\n    *\\n    * @param horizontal_fov_radians    horizontal angle of the camera frustum\\n    * @param screen_width              surface width\\n    * @param screen_height             surface height\\n    * @param near                      near plane\\n    * @param far                       far plane\\n    *\\n    * @return matrix_4x4<number> result\\n    */\\n    template <typename number>\\n    static\\n    matrix_4x4<number> perspective(const number &horizontal_fov_radians,\\n                                    const number & screen_width, const number & screen_height,\\n                                    const number & near, const number & far)\\n\\n    /**\\n    * compute perspective projection matrix\\n    *\\n    * @tparam number                   number type\\n    *\\n    * @param horizontal_fov_radians    horizontal angle of the camera frustum\\n    * @param aspect_ratio              aspect ratio of the surface\\n    * @param near                      near plane\\n    * @param far                       far plane\\n    *\\n    * @return matrix_4x4<number> result\\n    */\\n    template <typename number>\\n    static\\n    matrix_4x4<number> perspective(const number & horizontal_fov_radians,\\n                                    const number & aspect_ratio,\\n                                    const number & near, const number & far)\\n\\n    /**\\n    * compute perspective projection matrix\\n    *\\n    * @tparam number   number type\\n    * \\n    * @param l         left plane\\n    * @param r         right plane\\n    * @param b         bottom plane\\n    * @param t         top plane\\n    * @param n         near plane\\n    * @param f         far plane\\n    * \\n    * @return matrix_4x4<number> result\\n    */\\n    template <typename number>\\n    static\\n    matrix_4x4<number> perspective(const number & l, const number & r,\\n                                   const number & b, const number & t,\\n                                   const number & n, const number & f)\\n\\n    /**\\n    * compute orthographic projection\\n    * \\n    * @tparam number number type\\n    * \\n    * @param l         left plane\\n    * @param r         right plane\\n    * @param b         bottom plane\\n    * @param t         top plane\\n    * @param n         near plane\\n    * @param f         far plane\\n    * \\n    * @return matrix_4x4<number> result\\n    */\\n    template <typename number>\\n    static\\n    matrix_4x4<number> orthographic(const number & l, const number & r,\\n                                    const number & b, const number & t,\\n                                    const number & n, const number & f)\\n\\n}\\n\")), mdx(\"h2\", null, \"Z-Buffer\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implemented at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/z_buffer.h>\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_3d_sampler_shader_and_z_buffer.cpp\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_3d_shader_color.cpp\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_3d_shaders_flat_color.cpp\")))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\">3D rendering is supported in microgl. microgl can emulate the GPU pipeline with:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">3D Shaders</li><li class=\"css-b0qdn7\">3D Clipping</li><li class=\"css-b0qdn7\">Z-Buffer</li><li class=\"css-b0qdn7\">Camera utilities: Perspective/Orthographic projection</li><li class=\"css-b0qdn7\">4x4 matrix class</li></ul><h2 class=\"css-0\">3D Shaders</h2><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">examples at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">examples/example_3d_*.cpp</div></strong></p></blockquote><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">3D Shaders</strong> are objects that emulate the way the <strong class=\"css-10ircq3\">GPU</strong> draws objects. microgl\nhas a built in 3d pipeline, that you can use by implementing shaders or using the\nshaders, that are shipped with microgl.</p><p class=\"css-0\">Shaders have 4 components:</p><ol class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">vertex attributes buffer</strong> - holds the input to the shader, this might be vertices position, colors,\nnormals etc..</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">vertex varying attributes</strong> - these are per vertex attributes that are passed from vertex shader to\nfragment/pixel shader for interpolation purposes.</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">vertex shader</strong> - a function, that given vertex attributes, will :<ul class=\"css-0\"><li class=\"css-b0qdn7\">return the transformed position of a vertex in homogeneous 4D space (Clip space)</li><li class=\"css-b0qdn7\">pass varying attributes to the pixel shader</li></ul></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">pixel shader</strong> - a function, that receives the interpolated varying attributes and\noutputs a pixel color.</li><li class=\"css-b0qdn7\">decleration of the main number type and rgba info</li></ol><p class=\"css-0\">Here is an example of the interface needed for a shader</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> number_, </span><span style=\"color:#B45EA4\">typename</span><span> rgba_&gt;\n</span><span></span><span class=\"hljs-class\" style=\"color:#B45EA4\">struct</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">color_shader</span><span class=\"hljs-class\"> {</span><span>\n</span><span>    </span><span style=\"color:#B6B18B\">// the main number type</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> number = number_;\n</span><span>    </span><span style=\"color:#B6B18B\">// the rgba info</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> rgba = rgba_;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> gl_position= vec4&lt;number&gt;;\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// per vertex attributes</span><span>\n</span><span>    </span><span class=\"hljs-class\" style=\"color:#B45EA4\">struct</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">vertex_attributes</span><span class=\"hljs-class\"> {</span><span>\n</span>        vec3&lt;number&gt; point;\n<span>        microgl::color::</span><span style=\"color:#B45EA4\">color_t</span><span> color;\n</span>    };\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// varying attributes</span><span>\n</span><span>    </span><span class=\"hljs-class\" style=\"color:#B45EA4\">struct</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">varying</span><span class=\"hljs-class\"> {</span><span>\n</span><span>        microgl::color::</span><span style=\"color:#B45EA4\">color_t</span><span> color{</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>};\n</span>\n<span>        </span><span style=\"color:#B6B18B\">// you must implement the interpolation function</span><span>\n</span><span>        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">interpolate</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> varying &amp;varying_a,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                            </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> varying &amp;varying_b,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                            </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> varying &amp;varying_c,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                            </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> vec4&lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\" style=\"color:#E7CE56\">&gt; &amp;bary)</span><span class=\"hljs-function\"> </span><span>{\n</span><span>            color.r = </span><span style=\"color:#B45EA4\">int</span><span>(vec4&lt;number&gt;{varying_a.color.r, varying_b.color.r, varying_c.color.r, </span><span style=\"color:#E7CE56\">0</span><span>}.dot(vec4&lt;number&gt;(bary))/bary.w);\n</span><span>            color.g = </span><span style=\"color:#B45EA4\">int</span><span>(vec4&lt;number&gt;{varying_a.color.g, varying_b.color.g, varying_c.color.g, </span><span style=\"color:#E7CE56\">0</span><span>}.dot(vec4&lt;number&gt;(bary))/bary.w);\n</span><span>            color.b = </span><span style=\"color:#B45EA4\">int</span><span>(vec4&lt;number&gt;{varying_a.color.b, varying_b.color.b, varying_c.color.b, </span><span style=\"color:#E7CE56\">0</span><span>}.dot(vec4&lt;number&gt;(bary))/bary.w);\n</span><span>            color.a = </span><span style=\"color:#B45EA4\">int</span><span>(vec4&lt;number&gt;{varying_a.color.a, varying_b.color.a, varying_c.color.a, </span><span style=\"color:#E7CE56\">0</span><span>}.dot(vec4&lt;number&gt;(bary))/bary.w);\n</span>        }\n<!-- -->    };\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// this is a uniform global</span><span>\n</span>    matrix_4x4&lt;number&gt; matrix;\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// vertex shader</span><span>\n</span><span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> gl_position\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#78BB65\">vertex</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> vertex_attributes &amp;attributes, varying &amp;output)</span><span class=\"hljs-function\"> </span><span>{\n</span><span>        </span><span style=\"color:#B6B18B\">// pass varying on to the pixel shader so they can be interpolated</span><span>\n</span>        output.color = attributes.color;\n<!-- -->\n<span>        </span><span style=\"color:#B6B18B\">// tag the transformed position</span><span>\n</span><span>        </span><span style=\"color:#B45EA4\">return</span><span> matrix * gl_position{attributes.point};\n</span>    }\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// pixel shader</span><span>\n</span><span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> color::</span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#78BB65\">fragment</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> varying &amp;input)</span><span class=\"hljs-function\"> </span><span>{\n</span><span>        </span><span style=\"color:#B45EA4\">return</span><span> input.color;\n</span>    }\n<!-- -->\n<!-- -->};\n<!-- -->\n<!-- -->\n<!-- -->\n</code></pre></pre><h3 class=\"css-0\">The following shaders are shipped with <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div></strong></h3><h4 class=\"css-0\">Flat Color shader</h4><p class=\"css-0\">This only outputs a single color and therefore is very fast</p><img src=\"/images/3d_shader_flat.png\" style=\"height:250px;margin:auto\"/><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Example at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">/examples/example_3d_shaders_flat_color.cpp</div></strong></p></blockquote><h4 class=\"css-0\">Color shader</h4><p class=\"css-0\">This shader interpolates per vertex color and produces gradients</p><img src=\"/images/3d_shader_color.png\" style=\"height:250px;margin:auto\"/><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Example at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">/examples/example_3d_shader_color.cpp</div></strong></p></blockquote><h4 class=\"css-0\">Sampler shader</h4><p class=\"css-0\">This shader can use any <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"samplers\">sampler</a> object such as the ones implemented\nat <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/samplers/&gt;</div></strong> (or your own custom sampler)</p><img src=\"/images/3d_shader_sampler.png\" style=\"height:250px;margin:auto\"/><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Example at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">/examples/example_3d_sampler_shader_and_z_buffer.cpp</div></strong></p></blockquote><h2 class=\"css-0\">Camera and Perspective</h2><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Implemented at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/camera.h&gt;</div></strong></p></blockquote><p class=\"css-0\">Every vertex shader has to transform world-space 3d coords into clip-space, the so called\n<style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">mvp = model-view-projection</div></strong> matrix. <div class=\"css-gy3xy5\">microgl</div> comes is packed with utility methods\nto construct such a matrix easily.</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><em>Model Matrix</em> - transform a model from object space (relative to origin(0,0,0)) into\nworld space.</li><li class=\"css-b0qdn7\"><em>View Matrix</em> - defines the inverse tranform of the camera space to the origin (world space to camera space)</li><li class=\"css-b0qdn7\"><em>Projection Matrix</em> - defines transformation from camera/view space into 3d rectangle and inverts the z-axis,\nthis is the so called homogenous clip space. The <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">w</div> components are divisors, that when used, they will transform\nthe coordinates from clip space into <div class=\"css-gy3xy5\">NDC = Normalized Device Coordinates</div> unit cube, from there we can apply the viewport\ntransform, which will convert NDC space into <div class=\"css-gy3xy5\">raster</div> space.</li></ul><h3 class=\"css-0\">Supported Camera View transformations</h3><p class=\"css-0\">Out of the box, <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div> supports, the following:</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span class=\"hljs-class\" style=\"color:#B45EA4\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">camera</span><span class=\"hljs-class\"> {</span><span>\n</span><span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\">     * compute the camera view given position of camera and angular info\n</span><span class=\"hljs-function\">     *\n</span><span class=\"hljs-function\">     * @tparam number the number type\n</span><span class=\"hljs-function\">     *\n</span><span class=\"hljs-function\">     * @tparam position 3d position of camera\n</span><span class=\"hljs-function\">     * @tparam pitch    x-axis rotation\n</span><span class=\"hljs-function\">     * @tparam yaw      y-axis rotation\n</span><span class=\"hljs-function\">     * @tparam roll     z-axis rotation\n</span><span style=\"color:#B6B18B\">     **/</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">static</span><span class=\"hljs-function\"> matrix_4x4&lt;number&gt; </span><span class=\"hljs-function\" style=\"color:#78BB65\">angleAt</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> vec3&lt;number&gt; &amp;position,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                      </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; pitch, \n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                      </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; yaw, \n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                      </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; roll)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\">     * set camera view matrix equivalent to gluLookAt() VIEW MATRIX\n</span><span class=\"hljs-function\">     *\n</span><span class=\"hljs-function\">     * @tparam number   the number type\n</span><span class=\"hljs-function\">     *\n</span><span class=\"hljs-function\">     * @param position  3d position of camera\n</span><span class=\"hljs-function\">     * @param target    look at 3d position\n</span><span class=\"hljs-function\">     * @param up        the vector pointing up\n</span><span class=\"hljs-function\">     * @return\n</span><span class=\"hljs-function\" style=\"color:#B6B18B\">     */</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\"> &lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> number&gt;\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">static</span><span class=\"hljs-function\"> matrix_4x4&lt;number&gt; </span><span class=\"hljs-function\" style=\"color:#78BB65\">lookAt</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> vec3&lt;number&gt; &amp; position,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> vec3&lt;number&gt;&amp; target,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> vec3&lt;number&gt;&amp; up)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">}\n</span><span class=\"hljs-function\">\n</span></code></pre></pre><img src=\"/images/pitch_yaw_roll.png\" style=\"height:250px;margin:auto\"/><h3 class=\"css-0\">Supported Projection Matrices</h3><p class=\"css-0\">Out of the box, <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div> supports, the following:</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span class=\"hljs-class\" style=\"color:#B45EA4\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">camera</span><span class=\"hljs-class\"> {</span><span>\n</span><span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\">    * compute perspective projection matrix\n</span><span class=\"hljs-function\">    *\n</span><span class=\"hljs-function\">    * @tparam number                   number type\n</span><span class=\"hljs-function\">    *\n</span><span class=\"hljs-function\">    * @param horizontal_fov_radians    horizontal angle of the camera frustum\n</span><span class=\"hljs-function\">    * @param screen_width              surface width\n</span><span class=\"hljs-function\">    * @param screen_height             surface height\n</span><span class=\"hljs-function\">    * @param near                      near plane\n</span><span class=\"hljs-function\">    * @param far                       far plane\n</span><span class=\"hljs-function\">    *\n</span><span class=\"hljs-function\">    * @return matrix_4x4&lt;number&gt; result\n</span><span style=\"color:#B6B18B\">    */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">static</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    matrix_4x4&lt;number&gt; </span><span class=\"hljs-function\" style=\"color:#78BB65\">perspective</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp;horizontal_fov_radians,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; screen_width, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; screen_height,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; near, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; far)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\">    * compute perspective projection matrix\n</span><span class=\"hljs-function\">    *\n</span><span class=\"hljs-function\">    * @tparam number                   number type\n</span><span class=\"hljs-function\">    *\n</span><span class=\"hljs-function\">    * @param horizontal_fov_radians    horizontal angle of the camera frustum\n</span><span class=\"hljs-function\">    * @param aspect_ratio              aspect ratio of the surface\n</span><span class=\"hljs-function\">    * @param near                      near plane\n</span><span class=\"hljs-function\">    * @param far                       far plane\n</span><span class=\"hljs-function\">    *\n</span><span class=\"hljs-function\">    * @return matrix_4x4&lt;number&gt; result\n</span><span class=\"hljs-function\" style=\"color:#B6B18B\">    */</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\"> &lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> number&gt;\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">static</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    matrix_4x4&lt;number&gt; </span><span class=\"hljs-function\" style=\"color:#78BB65\">perspective</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; horizontal_fov_radians,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; aspect_ratio,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; near, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; far)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\">    * compute perspective projection matrix\n</span><span class=\"hljs-function\">    *\n</span><span class=\"hljs-function\">    * @tparam number   number type\n</span><span class=\"hljs-function\">    * \n</span><span class=\"hljs-function\">    * @param l         left plane\n</span><span class=\"hljs-function\">    * @param r         right plane\n</span><span class=\"hljs-function\">    * @param b         bottom plane\n</span><span class=\"hljs-function\">    * @param t         top plane\n</span><span class=\"hljs-function\">    * @param n         near plane\n</span><span class=\"hljs-function\">    * @param f         far plane\n</span><span class=\"hljs-function\">    * \n</span><span class=\"hljs-function\">    * @return matrix_4x4&lt;number&gt; result\n</span><span class=\"hljs-function\" style=\"color:#B6B18B\">    */</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\"> &lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> number&gt;\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">static</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    matrix_4x4&lt;number&gt; </span><span class=\"hljs-function\" style=\"color:#78BB65\">perspective</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; l, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; r,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                   </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; b, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; t,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                   </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; n, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; f)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B6B18B\">/**\n</span><span class=\"hljs-function\">    * compute orthographic projection\n</span><span class=\"hljs-function\">    * \n</span><span class=\"hljs-function\">    * @tparam number number type\n</span><span class=\"hljs-function\">    * \n</span><span class=\"hljs-function\">    * @param l         left plane\n</span><span class=\"hljs-function\">    * @param r         right plane\n</span><span class=\"hljs-function\">    * @param b         bottom plane\n</span><span class=\"hljs-function\">    * @param t         top plane\n</span><span class=\"hljs-function\">    * @param n         near plane\n</span><span class=\"hljs-function\">    * @param f         far plane\n</span><span class=\"hljs-function\">    * \n</span><span class=\"hljs-function\">    * @return matrix_4x4&lt;number&gt; result\n</span><span class=\"hljs-function\" style=\"color:#B6B18B\">    */</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\"> &lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">typename</span><span class=\"hljs-function\"> number&gt;\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">static</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">    matrix_4x4&lt;number&gt; </span><span class=\"hljs-function\" style=\"color:#78BB65\">orthographic</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; l, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; r,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; b, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; t,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                                    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; n, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> number &amp; f)</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\">}\n</span><span class=\"hljs-function\">\n</span></code></pre></pre><h2 class=\"css-0\">Z-Buffer</h2><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Implemented at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/z_buffer.h&gt;</div></strong></li><li class=\"css-b0qdn7\">Example at <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">/examples/example_3d_sampler_shader_and_z_buffer.cpp</div></strong></li><li class=\"css-b0qdn7\">Example at <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">/examples/example_3d_shader_color.cpp</div></strong></li><li class=\"css-b0qdn7\">Example at <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">/examples/example_3d_shaders_flat_color.cpp</div></strong></li></ul>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}