{"pageProps":{"data":{"slug":"drawing/3d","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3D\"), \" is fully supported in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \". with the following objects:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Matrix\"), \" transformations, both Affine and projection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Camera\"), \" utilities for creating \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"View\"), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Projection\"), \" matrices\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Modern \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"3D Shaders\"), \" support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Face Culling\"), \" algorithms\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"3D Clipping\"), \" algorithms\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Z Buffering\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Camera utils is at at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/camera.h>\")))), mdx(\"h1\", null, \"Color Shader Example\"), mdx(\"p\", null, \"This shader interpolates per vertex color and produces \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"gradients\")), mdx(\"img\", {\n    src: \"/images/3d_shader_color.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/camera.h>\\n#include <microgl/canvas.h>\\n#include <microgl/z_buffer.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/shaders/color_shader.h>\\n#include \\\"data/model_3d_cube.h\\\"\\n\\nusing number = float;\\n//    using number = Q<5>;\\n//    using number = Q<10>;\\n//    using number = Q<15>;\\n//    using number = Q<16>;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nCanvas24 canvas(640, 480);\\nfloat t = -30.0;\\n\\nauto test_shader_texture_3d = [&](const model_3d<number> & object) {\\n\\n    using vertex = vec3<number>;\\n    using camera = microgl::camera;\\n    using mat4 = matrix_4x4<number>;\\n    using math = microgl::math;\\n    using shader_ = color_shader<number, rgba_t<8,8,8,0>>;\\n    using vertex_attributes = shader_::vertex_attributes;\\n\\n    t-=0.0425;\\n\\n    // setup mvp matrix\\n    number radians = math::deg_to_rad(t / 2);\\n    vertex rotation = {radians, radians, radians};\\n    vertex translation = {-5,0, 0};\\n    vertex scale = {10,10,10};\\n    mat4 model = mat4::transform(rotation, translation, scale);\\n    mat4 view = camera::lookAt<number>({0, 0, 70}, {0,0, 0}, {0,1,0});\\n    mat4 projection = camera::perspective<number>(math::deg_to_rad(60),\\n                                canvas.width(), canvas.height(), 20, 100);\\n    mat4 mvp= projection * view * model;\\n\\n    // setup shader\\n    shader_ shader;\\n    shader.matrix= mvp;\\n\\n    // model to vertex buffers\\n    dynamic_array<vertex_attributes> vertex_buffer{object.vertices.size()};\\n    for (unsigned ix = 0; ix < object.vertices.size(); ++ix) {\\n        shader_::vertex_attributes v{};\\n        channel_t r= (ix%3)==0 ? 255:0;\\n        channel_t g= (ix%3)==1 ? 255:0;\\n        channel_t b= (ix%3)==2 ? 255:0;\\n        v.point= object.vertices[ix];\\n        v.color={r,g,b,255};\\n        vertex_buffer.push_back(v);\\n    }\\n\\n    // draw model_1\\n    canvas.clear({255,255,255,255});\\n    canvas.drawTriangles<blendmode::Normal, porterduff::None<>, true, true, false>(\\n            shader,\\n            canvas.width(), canvas.height(),\\n            vertex_buffer.data(),\\n            object.indices.data(),\\n            object.indices.size(),\\n            object.type,\\n            triangles::face_culling::ccw,\\n            (z_buffer<0> *)nullptr);\\n};\\n\\nauto render = [&]() {\\n    test_shader_texture_3d(cube_3d<number>);\\n};\\n\\nexample_run(&canvas, render);\\n\")), mdx(\"h1\", null, \"Sampler Shader Example\"), mdx(\"p\", null, \"This shader can use any \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/samplers\"\n  }, \"sampler\"), \" object such as the ones implemented\\nat \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/samplers/>\")), \" (or your own custom sampler)\"), mdx(\"img\", {\n    src: \"/images/3d_shader_sampler.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"h2\", null, \"Usage Example\"), mdx(\"p\", null, \"This example demos the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sampler\"), \" shader to draw a texture, it also uses the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Z-Buffer\"), \",\\nto draw two overlapping 3d cubes\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/camera.h>\\n#include <microgl/z_buffer.h>\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n#include <microgl/shaders/sampler_shader.h>\\n#include <microgl/samplers/texture.h>\\n#include \\\"data/model_3d_cube.h\\\"\\n\\nusing number = float;\\n// using number = Q<5>;\\n// using number = Q<10>;\\n// using number = Q<15>;\\n// using number = Q<16>;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>, CANVAS_OPT_2d_raster_FORCE_32_BIT>;\\nusing Texture24= sampling::texture<bitmap<coder::RGB888_ARRAY>, sampling::texture_filter::NearestNeighboor>;\\n\\nCanvas24 canvas(W, H);\\nResources resources{};\\n\\nauto img = resources.loadImageFromCompressedPath(\\\"images/uv_256.png\\\");\\nTexture24 tex{new bitmap<coder::RGB888_ARRAY>(img.data, img.width, img.height)};\\nz_buffer<12> depth_buffer(canvas.width(), canvas.height());\\n\\nfloat t = -0.0;\\nconstexpr bool enable_z_buffer = true;\\n\\nauto test_shader_texture_3d = [&](const model_3d<number> & object) {\\n\\n    using vertex = vec3<number>;\\n    using camera = microgl::camera;\\n    using mat4 = matrix_4x4<number>;\\n    using math = microgl::math;\\n    using Shader = sampler_shader<number, Texture24>;\\n    using vertex_attributes = Shader::vertex_attributes;\\n\\n    t-=0.425;\\n\\n    // setup mvp matrix\\n    number radians = math::deg_to_rad(t / 2);\\n    vertex rotation = {radians, radians, radians};\\n    vertex translation = {-5,0, -t/30.f};\\n    vertex scale = {10,10,10};\\n\\n    mat4 model_1 = mat4::transform(rotation, translation, scale);\\n    mat4 model_2 = mat4::transform(rotation*2, translation + vertex{10,0,0}, scale);\\n    mat4 view = camera::lookAt<number>({0, 0, 70}, {0,0, 0}, {0,1,0});\\n    mat4 projection = camera::perspective<number>(math::deg_to_rad(60),\\n                                                canvas.width(), canvas.height(), 20, 100);\\n\\n    mat4 mvp_1= projection*view*model_1;\\n    mat4 mvp_2= projection*view*model_2;\\n\\n    // setup shader\\n    Shader shader;\\n    shader.matrix= mvp_1;\\n    shader.sampler= &tex;\\n\\n    // model to vertex buffers\\n    dynamic_array<vertex_attributes> vertex_buffer{object.vertices.size()};\\n    for (unsigned ix = 0; ix < object.vertices.size(); ++ix) {\\n        vertex_attributes v{};\\n        v.point= object.vertices[ix];\\n        v.uv= object.uvs[ix];\\n        vertex_buffer.push_back(v);\\n    }\\n\\n    canvas.clear({255,255,255,255});\\n    depth_buffer.clear();\\n    // draw model_1\\n    canvas.drawTriangles<blendmode::Normal, porterduff::None<>, true, true, enable_z_buffer>(\\n            shader,\\n            canvas.width(), canvas.height(),\\n            vertex_buffer.data(),\\n            object.indices.data(),\\n            object.indices.size(),\\n            object.type,\\n            triangles::face_culling::ccw,\\n            &depth_buffer);\\n\\n    // draw model_2\\n    shader.matrix= mvp_2;\\n    canvas.drawTriangles<blendmode::Normal, porterduff::None<>, true, true, enable_z_buffer>(\\n            shader,\\n            canvas.width(), canvas.height(),\\n            vertex_buffer.data(),\\n            object.indices.data(),\\n            object.indices.size(),\\n            object.type,\\n            triangles::face_culling::ccw,\\n            &depth_buffer);\\n\\n};\\n\\nauto render = [&]() {\\n    test_shader_texture_3d(cube_3d<number>);\\n};\\n\\nexample_run(&canvas, render);\\n\")), mdx(\"h1\", null, \"Flat Color Shader Example\"), mdx(\"p\", null, \"This only outputs a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"single color\"), \" and therefore is very fast\"), mdx(\"img\", {\n    src: \"/images/3d_shader_flat.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/camera.h>\\n#include <microgl/canvas.h>\\n#include <microgl/z_buffer.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/shaders/flat_color_shader.h>\\n#include <microgl/samplers/texture.h>\\n#include \\\"data/model_3d_cube.h\\\"\\n\\nusing number = float;\\n// using number = Q<5>;\\n// using number = Q<10>;\\n// using number = Q<15>;\\n// using number = Q<16>;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\n\\nCanvas24 canvas(640, 480);\\nfloat t = -30.0;\\n\\nauto test_shader_texture_3d = [&](const model_3d<number> & object) {\\n\\n    using vertex = vec3<number>;\\n    using camera = microgl::camera;\\n    using mat4 = matrix_4x4<number>;\\n    using math = microgl::math;\\n    using Shader = flat_color_shader<number, rgba_t<8,8,8,0>>;\\n    using vertex_attributes = Shader::vertex_attributes;\\n\\n    t-=0.0425;\\n\\n    // setup mvp matrix\\n    number radians = math::deg_to_rad(t / 2);\\n    vertex rotation = {radians, radians, radians};\\n    vertex translation = {-5, 0, 0};\\n    vertex scale = {10, 10, 10};\\n\\n    mat4 model = mat4::transform(rotation, translation, scale);\\n    mat4 view = camera::lookAt<number>({0, 0, 70}, {0,0, 0}, {0,1,0});\\n    mat4 projection = camera::perspective<number>(math::deg_to_rad(60),\\n                                          canvas.width(), canvas.height(), 20, 100);\\n    // mat4 projection= camera::orthographic<number>(-canvas->width()/2, canvas->width()/2,\\n                                            //  -canvas->height()/2, canvas->height()/2, 1, 500);\\n    mat4 mvp = projection * view * model;\\n\\n    // setup shader\\n    Shader shader;\\n    shader.matrix= mvp;\\n    shader.color= {0, 255, 255, 255};\\n\\n    // model to vertex buffers\\n    dynamic_array<vertex_attributes> vertex_buffer{object.vertices.size()};\\n    for (unsigned ix = 0; ix < object.vertices.size(); ++ix) {\\n        vertex_attributes v{};\\n        v.point= object.vertices[ix];\\n        vertex_buffer.push_back(v);\\n    }\\n\\n    // draw model_1\\n    canvas.clear({255, 255, 255, 255});\\n    canvas.drawTriangles<blendmode::Normal, porterduff::None<>, true, true, false>(\\n            shader,\\n            canvas.width(), canvas.height(),\\n            vertex_buffer.data(),\\n            object.indices.data(),\\n            object.indices.size(),\\n            object.type,\\n            triangles::face_culling::ccw,\\n            (z_buffer<0> *)nullptr);\\n};\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">3D</strong> is fully supported in <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div>. with the following objects:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Matrix</strong> transformations, both Affine and projection</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Camera</strong> utilities for creating <strong class=\"css-10ircq3\">View</strong> and <strong class=\"css-10ircq3\">Projection</strong> matrices</li><li class=\"css-b0qdn7\">Modern <strong class=\"css-10ircq3\">3D Shaders</strong> support</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Face Culling</strong> algorithms</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">3D Clipping</strong> algorithms</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Z Buffering</strong></li></ul><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Camera utils is at at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/camera.h&gt;</div></strong></p></blockquote><h1 class=\"css-0\">Color Shader Example</h1><p class=\"css-0\">This shader interpolates per vertex color and produces <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">gradients</strong></p><img src=\"/images/3d_shader_color.png\" style=\"height:250px;margin:auto\"/><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/Resources.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/camera.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/z_buffer.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/shaders/color_shader.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;data/model_3d_cube.h&quot;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">//    using number = Q&lt;5&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">//    using number = Q&lt;10&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">//    using number = Q&lt;15&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">//    using number = Q&lt;16&gt;;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span></span><span style=\"color:#B45EA4\">float</span><span> t = </span><span style=\"color:#E7CE56\">-30.0</span><span>;\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> test_shader_texture_3d = [&amp;](</span><span style=\"color:#B45EA4\">const</span><span> model_3d&lt;number&gt; &amp; object) {\n</span>\n<span>    </span><span style=\"color:#B45EA4\">using</span><span> vertex = vec3&lt;number&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> camera = microgl::camera;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> mat4 = matrix_4x4&lt;number&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> math = microgl::math;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> shader_ = color_shader&lt;number, </span><span style=\"color:#B45EA4\">rgba_t</span><span>&lt;</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>&gt;&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> vertex_attributes = shader_::vertex_attributes;\n</span>\n<span>    t-=</span><span style=\"color:#E7CE56\">0.0425</span><span>;\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// setup mvp matrix</span><span>\n</span><span>    number radians = math::deg_to_rad(t / </span><span style=\"color:#E7CE56\">2</span><span>);\n</span>    vertex rotation = {radians, radians, radians};\n<span>    vertex translation = {</span><span style=\"color:#E7CE56\">-5</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>};\n</span><span>    vertex scale = {</span><span style=\"color:#E7CE56\">10</span><span>,</span><span style=\"color:#E7CE56\">10</span><span>,</span><span style=\"color:#E7CE56\">10</span><span>};\n</span>    mat4 model = mat4::transform(rotation, translation, scale);\n<span>    mat4 view = camera::lookAt&lt;number&gt;({</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">70</span><span>}, {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>}, {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">1</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>    mat4 projection = camera::perspective&lt;number&gt;(math::deg_to_rad(</span><span style=\"color:#E7CE56\">60</span><span>),\n</span><span>                                canvas.width(), canvas.height(), </span><span style=\"color:#E7CE56\">20</span><span>, </span><span style=\"color:#E7CE56\">100</span><span>);\n</span>    mat4 mvp= projection * view * model;\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// setup shader</span><span>\n</span>    shader_ shader;\n<!-- -->    shader.matrix= mvp;\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// model to vertex buffers</span><span>\n</span>    dynamic_array&lt;vertex_attributes&gt; vertex_buffer{object.vertices.size()};\n<span>    </span><span style=\"color:#B45EA4\">for</span><span> (</span><span style=\"color:#B45EA4\">unsigned</span><span> ix = </span><span style=\"color:#E7CE56\">0</span><span>; ix &lt; object.vertices.size(); ++ix) {\n</span>        shader_::vertex_attributes v{};\n<span>        </span><span style=\"color:#B45EA4\">channel_t</span><span> r= (ix%</span><span style=\"color:#E7CE56\">3</span><span>)==</span><span style=\"color:#E7CE56\">0</span><span> ? </span><span style=\"color:#E7CE56\">255</span><span>:</span><span style=\"color:#E7CE56\">0</span><span>;\n</span><span>        </span><span style=\"color:#B45EA4\">channel_t</span><span> g= (ix%</span><span style=\"color:#E7CE56\">3</span><span>)==</span><span style=\"color:#E7CE56\">1</span><span> ? </span><span style=\"color:#E7CE56\">255</span><span>:</span><span style=\"color:#E7CE56\">0</span><span>;\n</span><span>        </span><span style=\"color:#B45EA4\">channel_t</span><span> b= (ix%</span><span style=\"color:#E7CE56\">3</span><span>)==</span><span style=\"color:#E7CE56\">2</span><span> ? </span><span style=\"color:#E7CE56\">255</span><span>:</span><span style=\"color:#E7CE56\">0</span><span>;\n</span>        v.point= object.vertices[ix];\n<span>        v.color={r,g,b,</span><span style=\"color:#E7CE56\">255</span><span>};\n</span>        vertex_buffer.push_back(v);\n<!-- -->    }\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// draw model_1</span><span>\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawTriangles&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">true</span><span>, </span><span style=\"color:#E7CE56\">true</span><span>, </span><span style=\"color:#E7CE56\">false</span><span>&gt;(\n</span>            shader,\n<!-- -->            canvas.width(), canvas.height(),\n<!-- -->            vertex_buffer.data(),\n<!-- -->            object.indices.data(),\n<!-- -->            object.indices.size(),\n<!-- -->            object.type,\n<!-- -->            triangles::face_culling::ccw,\n<span>            (z_buffer&lt;</span><span style=\"color:#E7CE56\">0</span><span>&gt; *)</span><span style=\"color:#E7CE56\">nullptr</span><span>);\n</span>};\n<!-- -->\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() {\n</span>    test_shader_texture_3d(cube_3d&lt;number&gt;);\n<!-- -->};\n<!-- -->\n<!-- -->example_run(&amp;canvas, render);\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Sampler Shader Example</h1><p class=\"css-0\">This shader can use any <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"/docs/concepts/samplers\">sampler</a> object such as the ones implemented\nat <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/samplers/&gt;</div></strong> (or your own custom sampler)</p><img src=\"/images/3d_shader_sampler.png\" style=\"height:250px;margin:auto\"/><h2 class=\"css-0\">Usage Example</h2><p class=\"css-0\">This example demos the <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">sampler</strong> shader to draw a texture, it also uses the <strong class=\"css-10ircq3\">Z-Buffer</strong>,\nto draw two overlapping 3d cubes</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/Resources.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/camera.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/z_buffer.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_ARRAY.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/shaders/sampler_shader.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/texture.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;data/model_3d_cube.h&quot;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;5&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;10&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;15&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;16&gt;;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;, CANVAS_OPT_2d_raster_FORCE_32_BIT&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Texture24= sampling::texture&lt;bitmap&lt;coder::RGB888_ARRAY&gt;, sampling::texture_filter::NearestNeighboor&gt;;\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(W, H)</span><span>;\n</span>Resources resources{};\n<!-- -->\n<span></span><span style=\"color:#B45EA4\">auto</span><span> img = resources.loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/uv_256.png&quot;</span><span>);\n</span><span>Texture24 tex{</span><span style=\"color:#B45EA4\">new</span><span> bitmap&lt;coder::RGB888_ARRAY&gt;(img.data, img.width, img.height)};\n</span><span></span><span class=\"hljs-function\">z_buffer&lt;12&gt; </span><span class=\"hljs-function\" style=\"color:#78BB65\">depth_buffer</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(canvas.width(), canvas.height())</span><span>;\n</span>\n<span></span><span style=\"color:#B45EA4\">float</span><span> t = </span><span style=\"color:#E7CE56\">-0.0</span><span>;\n</span><span></span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">bool</span><span> enable_z_buffer = </span><span style=\"color:#E7CE56\">true</span><span>;\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> test_shader_texture_3d = [&amp;](</span><span style=\"color:#B45EA4\">const</span><span> model_3d&lt;number&gt; &amp; object) {\n</span>\n<span>    </span><span style=\"color:#B45EA4\">using</span><span> vertex = vec3&lt;number&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> camera = microgl::camera;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> mat4 = matrix_4x4&lt;number&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> math = microgl::math;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> Shader = sampler_shader&lt;number, Texture24&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> vertex_attributes = Shader::vertex_attributes;\n</span>\n<span>    t-=</span><span style=\"color:#E7CE56\">0.425</span><span>;\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// setup mvp matrix</span><span>\n</span><span>    number radians = math::deg_to_rad(t / </span><span style=\"color:#E7CE56\">2</span><span>);\n</span>    vertex rotation = {radians, radians, radians};\n<span>    vertex translation = {</span><span style=\"color:#E7CE56\">-5</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>, -t/</span><span style=\"color:#E7CE56\">30.f</span><span>};\n</span><span>    vertex scale = {</span><span style=\"color:#E7CE56\">10</span><span>,</span><span style=\"color:#E7CE56\">10</span><span>,</span><span style=\"color:#E7CE56\">10</span><span>};\n</span>\n<!-- -->    mat4 model_1 = mat4::transform(rotation, translation, scale);\n<span>    mat4 model_2 = mat4::transform(rotation*</span><span style=\"color:#E7CE56\">2</span><span>, translation + vertex{</span><span style=\"color:#E7CE56\">10</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>}, scale);\n</span><span>    mat4 view = camera::lookAt&lt;number&gt;({</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">70</span><span>}, {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>}, {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">1</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>    mat4 projection = camera::perspective&lt;number&gt;(math::deg_to_rad(</span><span style=\"color:#E7CE56\">60</span><span>),\n</span><span>                                                canvas.width(), canvas.height(), </span><span style=\"color:#E7CE56\">20</span><span>, </span><span style=\"color:#E7CE56\">100</span><span>);\n</span>\n<!-- -->    mat4 mvp_1= projection*view*model_1;\n<!-- -->    mat4 mvp_2= projection*view*model_2;\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// setup shader</span><span>\n</span>    Shader shader;\n<!-- -->    shader.matrix= mvp_1;\n<!-- -->    shader.sampler= &amp;tex;\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// model to vertex buffers</span><span>\n</span>    dynamic_array&lt;vertex_attributes&gt; vertex_buffer{object.vertices.size()};\n<span>    </span><span style=\"color:#B45EA4\">for</span><span> (</span><span style=\"color:#B45EA4\">unsigned</span><span> ix = </span><span style=\"color:#E7CE56\">0</span><span>; ix &lt; object.vertices.size(); ++ix) {\n</span>        vertex_attributes v{};\n<!-- -->        v.point= object.vertices[ix];\n<!-- -->        v.uv= object.uvs[ix];\n<!-- -->        vertex_buffer.push_back(v);\n<!-- -->    }\n<!-- -->\n<span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span>    depth_buffer.clear();\n<span>    </span><span style=\"color:#B6B18B\">// draw model_1</span><span>\n</span><span>    canvas.drawTriangles&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">true</span><span>, </span><span style=\"color:#E7CE56\">true</span><span>, enable_z_buffer&gt;(\n</span>            shader,\n<!-- -->            canvas.width(), canvas.height(),\n<!-- -->            vertex_buffer.data(),\n<!-- -->            object.indices.data(),\n<!-- -->            object.indices.size(),\n<!-- -->            object.type,\n<!-- -->            triangles::face_culling::ccw,\n<!-- -->            &amp;depth_buffer);\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// draw model_2</span><span>\n</span>    shader.matrix= mvp_2;\n<span>    canvas.drawTriangles&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">true</span><span>, </span><span style=\"color:#E7CE56\">true</span><span>, enable_z_buffer&gt;(\n</span>            shader,\n<!-- -->            canvas.width(), canvas.height(),\n<!-- -->            vertex_buffer.data(),\n<!-- -->            object.indices.data(),\n<!-- -->            object.indices.size(),\n<!-- -->            object.type,\n<!-- -->            triangles::face_culling::ccw,\n<!-- -->            &amp;depth_buffer);\n<!-- -->\n<!-- -->};\n<!-- -->\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() {\n</span>    test_shader_texture_3d(cube_3d&lt;number&gt;);\n<!-- -->};\n<!-- -->\n<!-- -->example_run(&amp;canvas, render);\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Flat Color Shader Example</h1><p class=\"css-0\">This only outputs a <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">single color</strong> and therefore is very fast</p><img src=\"/images/3d_shader_flat.png\" style=\"height:250px;margin:auto\"/><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/Resources.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/camera.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/z_buffer.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/shaders/flat_color_shader.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/texture.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;data/model_3d_cube.h&quot;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;5&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;10&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;15&gt;;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;16&gt;;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span></span><span style=\"color:#B45EA4\">float</span><span> t = </span><span style=\"color:#E7CE56\">-30.0</span><span>;\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> test_shader_texture_3d = [&amp;](</span><span style=\"color:#B45EA4\">const</span><span> model_3d&lt;number&gt; &amp; object) {\n</span>\n<span>    </span><span style=\"color:#B45EA4\">using</span><span> vertex = vec3&lt;number&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> camera = microgl::camera;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> mat4 = matrix_4x4&lt;number&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> math = microgl::math;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> Shader = flat_color_shader&lt;number, </span><span style=\"color:#B45EA4\">rgba_t</span><span>&lt;</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>&gt;&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> vertex_attributes = Shader::vertex_attributes;\n</span>\n<span>    t-=</span><span style=\"color:#E7CE56\">0.0425</span><span>;\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// setup mvp matrix</span><span>\n</span><span>    number radians = math::deg_to_rad(t / </span><span style=\"color:#E7CE56\">2</span><span>);\n</span>    vertex rotation = {radians, radians, radians};\n<span>    vertex translation = {</span><span style=\"color:#E7CE56\">-5</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>};\n</span><span>    vertex scale = {</span><span style=\"color:#E7CE56\">10</span><span>, </span><span style=\"color:#E7CE56\">10</span><span>, </span><span style=\"color:#E7CE56\">10</span><span>};\n</span>\n<!-- -->    mat4 model = mat4::transform(rotation, translation, scale);\n<span>    mat4 view = camera::lookAt&lt;number&gt;({</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">70</span><span>}, {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>}, {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">1</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>    mat4 projection = camera::perspective&lt;number&gt;(math::deg_to_rad(</span><span style=\"color:#E7CE56\">60</span><span>),\n</span><span>                                          canvas.width(), canvas.height(), </span><span style=\"color:#E7CE56\">20</span><span>, </span><span style=\"color:#E7CE56\">100</span><span>);\n</span><span>    </span><span style=\"color:#B6B18B\">// mat4 projection= camera::orthographic&lt;number&gt;(-canvas-&gt;width()/2, canvas-&gt;width()/2,</span><span>\n</span><span>                                            </span><span style=\"color:#B6B18B\">//  -canvas-&gt;height()/2, canvas-&gt;height()/2, 1, 500);</span><span>\n</span>    mat4 mvp = projection * view * model;\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// setup shader</span><span>\n</span>    Shader shader;\n<!-- -->    shader.matrix= mvp;\n<span>    shader.color= {</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>};\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// model to vertex buffers</span><span>\n</span>    dynamic_array&lt;vertex_attributes&gt; vertex_buffer{object.vertices.size()};\n<span>    </span><span style=\"color:#B45EA4\">for</span><span> (</span><span style=\"color:#B45EA4\">unsigned</span><span> ix = </span><span style=\"color:#E7CE56\">0</span><span>; ix &lt; object.vertices.size(); ++ix) {\n</span>        vertex_attributes v{};\n<!-- -->        v.point= object.vertices[ix];\n<!-- -->        vertex_buffer.push_back(v);\n<!-- -->    }\n<!-- -->\n<span>    </span><span style=\"color:#B6B18B\">// draw model_1</span><span>\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawTriangles&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">true</span><span>, </span><span style=\"color:#E7CE56\">true</span><span>, </span><span style=\"color:#E7CE56\">false</span><span>&gt;(\n</span>            shader,\n<!-- -->            canvas.width(), canvas.height(),\n<!-- -->            vertex_buffer.data(),\n<!-- -->            object.indices.data(),\n<!-- -->            object.indices.size(),\n<!-- -->            object.type,\n<!-- -->            triangles::face_culling::ccw,\n<span>            (z_buffer&lt;</span><span style=\"color:#E7CE56\">0</span><span>&gt; *)</span><span style=\"color:#E7CE56\">nullptr</span><span>);\n</span>};\n<!-- -->\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}