{"pageProps":{"data":{"slug":"drawing/gradients","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Many\"), \" of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/samplers\"\n  }, \"samplers\"), \" shipped with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" have many\\nefficient \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Gradients\"), \" samplers, we show them here.\"), mdx(\"h1\", null, \"Line Gradient Sampler\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/samplers/line_linear_gradient.h>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_gradient_line.cpp\"))), mdx(\"img\", {\n    src: \"/images/sampler_line_linear_gradient.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"the line gradient defines color stops on a line on which it samples. The line definition\\nis relative to unit rectangle. \"), mdx(\"h3\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/line_linear_gradient.h>\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nCanvas24 canvas(640, 640);\\nline_linear_gradient<number, 3, Canvas24::rgba> gradient{{0, 1}, {2, 0}};\\n\\ngradient.addStop(0.0f, {255, 0,   0});\\ngradient.addStop(0.5f, {0,   255, 0});\\ngradient.addStop(1.f, {0,    0,   255});\\n\\ncanvas.clear({255, 255, 255, 255});\\ncanvas.drawRect<blendmode::Normal, porterduff::None<>, false, number>(\\n                        gradient, \\n                        0, 0, 400, 400);\\n\\n\")), mdx(\"h1\", null, \"Angular Linear Gradient Sampler\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/samplers/angular_linear_gradient.h>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_gradient_angular_linear.cpp\"))), mdx(\"img\", {\n    src: \"/images/sampler_angular_linear_gradient.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"This gradient is inferred by a given angle to create a line at the unit rectangle. the user can then\\ndefine the color stops.\"), mdx(\"h3\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/angular_linear_gradient.h>\\n\\nusing namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nCanvas24 canvas(640, 640);\\nangular_linear_gradient<number, 3, Canvas24::rgba> gradient{45};\\n\\nauto render = [&]() -> void {\\n    static float number t = 0;\\n    t+=number(0.01);\\n\\n    gradient.setAngle(t);\\n    gradient.addStop(0.0f, {255, 0,   0});\\n    gradient.addStop(0.5f, {0,   255, 0});\\n    gradient.addStop(1.0f, {0,   0,   255});\\n\\n    canvas.clear({255, 255, 255, 255});\\n    canvas.drawRect<blendmode::Normal, porterduff::None<>, false, number>(\\n        gradient, \\n        0, 0, 400, 400);\\n};\\n\\nexample_run(&canvas, render);\\n\")), mdx(\"h1\", null, \"Axial Linear Gradient Sampler\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/samplers/axial_linear_gradient.h>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_gradient_axial.cpp\"))), mdx(\"img\", {\n    src: \"/images/sampler_grad_axial.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"This gradient is a faster variant if you need any number of stops but with angle,\\nthat is a modulu of 45 (0, 45, 90, 135, 180, 225, 270, 315, 360)\"), mdx(\"h3\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/axial_linear_gradient.h>\\n\\nusing namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nCanvas24 canvas(640, 640);\\naxial_linear_gradient<135, 3, Canvas24::rgba> gradient;\\n\\ngradient.addStop(0.0f, {255, 0,   0});\\ngradient.addStop(0.5f, {0,   255, 0});\\ngradient.addStop(1.f,  {0,   0,   255});\\n\\nauto render = [&]() -> void {\\n    canvas.clear({255,255,255,255});\\n    canvas.drawRect<blendmode::Normal, porterduff::None<>, false, number>(\\n            gradient,\\n            0, 0, 400, 400);\\n};\\n\\nexample_run(&canvas, render);\\n\")), mdx(\"h1\", null, \"2 Colors Gradient Sampler\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/samplers/linear_gradient_2_colors.h>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_gradient_2_colors_fast.cpp\"))), mdx(\"img\", {\n    src: \"/images/sampler_grad_2_colors_fast.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"This gradient is a very fast variant if you need only 2 colors stops but with angle,\\nthat is a modulu of 45 (0, 45, 90, 135, 180, 225, 270, 315, 360)\"), mdx(\"h3\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/linear_gradient_2_colors.h>\\n\\nusing namespace microgl;\\nusing namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n//    using number = Q<12>;\\n\\nCanvas24 canvas(640, 640);\\nlinear_gradient_2_colors<45> gradient{{255,0,0}, {0,0,255}};\\n\\nauto render = [&]() -> void {\\n    canvas.clear({255,255,255,255});\\n    canvas.drawRect<blendmode::Normal, porterduff::None<>, false, number>(\\n            gradient, \\n            0, 0, 400, 400);\\n};\\n\\nexample_run(&canvas, render);\\n\")), mdx(\"h1\", null, \"Fast Radial Gradient Sampler\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defined at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<microgl/samplers/fast_radial_gradient.h>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/examples/example_sampler_gradient_radial.cpp\"))), mdx(\"img\", {\n    src: \"/images/sampler_grad_radial.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"img\", {\n    src: \"/images/sampler_radial_2.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"This gradient is a fast radial gradient.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/fast_radial_gradient.h>\\n\\nusing namespace microgl;\\nusing namespace microgl::sampling;\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing number = float;\\n// using number = Q<12>;\\n\\nCanvas24 canvas(640, 640);\\nfast_radial_gradient<number, 4, rgba_t<8,8,8,0>, precision::high> gradient{0.5, 0.5, 0.5};\\n\\ngradient.addStop(0.0f,  {255, 0,   0});\\ngradient.addStop(0.45f, {255, 0,   0});\\ngradient.addStop(0.50f, {0,   255, 0});\\ngradient.addStop(1.f,   {255, 0,   255});\\n\\nauto render = [&]() -> void {\\n    canvas.clear({255,255,255,255});\\n    canvas.drawRect<blendmode::Normal, porterduff::None<>, false, number>(\\n            gradient,\\n            0, 0, 400, 400);\\n};\\n\\nauto render2 = [&]() -> void {\\n    canvas.clear({255,255,255,255});\\n    canvas.drawQuadrilateral<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true, number>(\\n            gradient,\\n            0,       0,     0.0f,   1.0f,\\n            556,     0,     1.0f,   1.0f,\\n            256,     256,   1.0f,   0.0f,\\n            0,       256,   0.0f,   0.0f,\\n            255);\\n};\\n\\nauto & render3 = render2;\\n\\nexample_run(&canvas, render3);\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Many</strong> of the <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"/docs/concepts/samplers\">samplers</a> shipped with <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div> have many\nefficient <strong class=\"css-10ircq3\">Gradients</strong> samplers, we show them here.</p><h1 class=\"css-0\">Line Gradient Sampler</h1><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/samplers/line_linear_gradient.h&gt;</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-gy3xy5\">/examples/example_sampler_gradient_line.cpp</div></li></ul><img src=\"/images/sampler_line_linear_gradient.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">the line gradient defines color stops on a line on which it samples. The line definition\nis relative to unit rectangle. </p><h3 class=\"css-0\">Usage Example</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/line_linear_gradient.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span>line_linear_gradient&lt;number, </span><span style=\"color:#E7CE56\">3</span><span>, Canvas24::rgba&gt; gradient{{</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>}, {</span><span style=\"color:#E7CE56\">2</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>}};\n</span>\n<span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.0f</span><span>, {</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.5f</span><span>, {</span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">1.f</span><span>, {</span><span style=\"color:#E7CE56\">0</span><span>,    </span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">255</span><span>});\n</span>\n<span>canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>canvas.drawRect&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>                        gradient, \n<span>                        </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>);\n</span>\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Angular Linear Gradient Sampler</h1><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/samplers/angular_linear_gradient.h&gt;</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-gy3xy5\">/examples/example_sampler_gradient_angular_linear.cpp</div></li></ul><img src=\"/images/sampler_angular_linear_gradient.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">This gradient is inferred by a given angle to create a line at the unit rectangle. the user can then\ndefine the color stops.</p><h3 class=\"css-0\">Usage Example</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/angular_linear_gradient.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span>angular_linear_gradient&lt;number, </span><span style=\"color:#E7CE56\">3</span><span>, Canvas24::rgba&gt; gradient{</span><span style=\"color:#E7CE56\">45</span><span>};\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span>    </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">float</span><span> number t = </span><span style=\"color:#E7CE56\">0</span><span>;\n</span><span>    t+=number(</span><span style=\"color:#E7CE56\">0.01</span><span>);\n</span>\n<!-- -->    gradient.setAngle(t);\n<span>    gradient.addStop(</span><span style=\"color:#E7CE56\">0.0f</span><span>, {</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>    gradient.addStop(</span><span style=\"color:#E7CE56\">0.5f</span><span>, {</span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>    gradient.addStop(</span><span style=\"color:#E7CE56\">1.0f</span><span>, {</span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">255</span><span>});\n</span>\n<span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawRect&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>        gradient, \n<span>        </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>);\n</span>};\n<!-- -->\n<!-- -->example_run(&amp;canvas, render);\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Axial Linear Gradient Sampler</h1><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/samplers/axial_linear_gradient.h&gt;</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-gy3xy5\">/examples/example_sampler_gradient_axial.cpp</div></li></ul><img src=\"/images/sampler_grad_axial.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">This gradient is a faster variant if you need any number of stops but with angle,\nthat is a modulu of 45 (0, 45, 90, 135, 180, 225, 270, 315, 360)</p><h3 class=\"css-0\">Usage Example</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/axial_linear_gradient.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span>axial_linear_gradient&lt;</span><span style=\"color:#E7CE56\">135</span><span>, </span><span style=\"color:#E7CE56\">3</span><span>, Canvas24::rgba&gt; gradient;\n</span>\n<span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.0f</span><span>, {</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.5f</span><span>, {</span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">1.f</span><span>,  {</span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">255</span><span>});\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawRect&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>            gradient,\n<span>            </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>);\n</span>};\n<!-- -->\n<!-- -->example_run(&amp;canvas, render);\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">2 Colors Gradient Sampler</h1><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/samplers/linear_gradient_2_colors.h&gt;</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-gy3xy5\">/examples/example_sampler_gradient_2_colors_fast.cpp</div></li></ul><img src=\"/images/sampler_grad_2_colors_fast.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">This gradient is a very fast variant if you need only 2 colors stops but with angle,\nthat is a modulu of 45 (0, 45, 90, 135, 180, 225, 270, 315, 360)</p><h3 class=\"css-0\">Usage Example</h3><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/linear_gradient_2_colors.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">//    using number = Q&lt;12&gt;;</span><span>\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span>linear_gradient_2_colors&lt;</span><span style=\"color:#E7CE56\">45</span><span>&gt; gradient{{</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>}, {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>}};\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawRect&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>            gradient, \n<span>            </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>);\n</span>};\n<!-- -->\n<!-- -->example_run(&amp;canvas, render);\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Fast Radial Gradient Sampler</h1><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">defined at <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/samplers/fast_radial_gradient.h&gt;</div></li><li class=\"css-b0qdn7\">example at <div class=\"css-gy3xy5\">/examples/example_sampler_gradient_radial.cpp</div></li></ul><img src=\"/images/sampler_grad_radial.png\" style=\"height:250px;margin:auto\"/><img src=\"/images/sampler_radial_2.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">This gradient is a fast radial gradient.</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/fast_radial_gradient.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">namespace</span><span> microgl::sampling;\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span>fast_radial_gradient&lt;number, </span><span style=\"color:#E7CE56\">4</span><span>, </span><span style=\"color:#B45EA4\">rgba_t</span><span>&lt;</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">8</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>&gt;, precision::high&gt; gradient{</span><span style=\"color:#E7CE56\">0.5</span><span>, </span><span style=\"color:#E7CE56\">0.5</span><span>, </span><span style=\"color:#E7CE56\">0.5</span><span>};\n</span>\n<span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.0f</span><span>,  {</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.45f</span><span>, {</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">0.50f</span><span>, {</span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>});\n</span><span>gradient.addStop(</span><span style=\"color:#E7CE56\">1.f</span><span>,   {</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>,   </span><span style=\"color:#E7CE56\">255</span><span>});\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;]() -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawRect&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, number&gt;(\n</span>            gradient,\n<span>            </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>, </span><span style=\"color:#E7CE56\">400</span><span>);\n</span>};\n<!-- -->\n<span></span><span style=\"color:#B45EA4\">auto</span><span> render2 = [&amp;]() -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span>    canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>    canvas.drawQuadrilateral&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">true</span><span>, number&gt;(\n</span>            gradient,\n<span>            </span><span style=\"color:#E7CE56\">0</span><span>,       </span><span style=\"color:#E7CE56\">0</span><span>,     </span><span style=\"color:#E7CE56\">0.0f</span><span>,   </span><span style=\"color:#E7CE56\">1.0f</span><span>,\n</span><span>            </span><span style=\"color:#E7CE56\">556</span><span>,     </span><span style=\"color:#E7CE56\">0</span><span>,     </span><span style=\"color:#E7CE56\">1.0f</span><span>,   </span><span style=\"color:#E7CE56\">1.0f</span><span>,\n</span><span>            </span><span style=\"color:#E7CE56\">256</span><span>,     </span><span style=\"color:#E7CE56\">256</span><span>,   </span><span style=\"color:#E7CE56\">1.0f</span><span>,   </span><span style=\"color:#E7CE56\">0.0f</span><span>,\n</span><span>            </span><span style=\"color:#E7CE56\">0</span><span>,       </span><span style=\"color:#E7CE56\">256</span><span>,   </span><span style=\"color:#E7CE56\">0.0f</span><span>,   </span><span style=\"color:#E7CE56\">0.0f</span><span>,\n</span><span>            </span><span style=\"color:#E7CE56\">255</span><span>);\n</span>};\n<!-- -->\n<span></span><span style=\"color:#B45EA4\">auto</span><span> &amp; render3 = render2;\n</span>\n<!-- -->example_run(&amp;canvas, render3);\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}