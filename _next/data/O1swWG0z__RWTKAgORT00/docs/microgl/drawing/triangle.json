{"pageProps":{"data":{"slug":"drawing/triangle","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Triangles\"), \" are fundamental geometries in vector graphics, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" supports drawing\\ntriangles with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/samplers\"\n  }, \"samplers\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/drawing/3d\"\n  }, \"3d-shaders\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Wireframes\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Example at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_triangle.cpp\")))), mdx(\"img\", {\n    src: \"/images/canvas_triangle.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"h1\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing Texture24= sampling::texture<bitmap<coder::RGB888_ARRAY>>;\\nusing number = float;\\n//using number = Q<15>;\\n\\nCanvas24 canvas(W, H);\\nauto img_2 = resources.loadImageFromCompressedPath(\\\"images/uv_512.png\\\");\\n\\nTexture24 tex(new bitmap<coder::RGB888_ARRAY>(img_2.data, img_2.width, img_2.height));\\n\\ncanvas.clear(intensity<number>{1, 1, 1, 1});\\ncanvas.drawTriangle<blendmode::Normal, porterduff::None<>, false, number, number>(\\n        tex,\\n        10.0,  10.0,  0.0, 1.0, // x, y, u, v\\n        500.0, 10.0,  1.0, 1.0, // x, y, u, v\\n        500.0, 500.0, 1.0, 0.0, // x, y, u, v\\n        255);\\n\\n\")), mdx(\"h1\", null, \"Signature API\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n    /**\\n     * Draw a triangle with sampler\\n     *\\n     * @tparam BlendMode            the blend mode struct\\n     * @tparam PorterDuff           the alpha compositing struct\\n     * @tparam antialias            enable/disable anti-aliasing, currently NOT supported\\n     * @tparam number1              vertices number type\\n     * @tparam number2              uv coords number type\\n     * @tparam Sampler              sampler type\\n     *\\n     * @param sample                sampler reference\\n     * @param v0_x                  1st point x\\n     * @param v0_y                  1st point y\\n     * @param u0                    1st point u\\n     * @param v0                    1st point v\\n     *\\n     * @param v1_x                  2nd point x\\n     * @param v1_y                  2nd point y\\n     * @param u1                    2nd point u\\n     * @param v1                    2nd point v\\n     *\\n     * @param v2_x                  3rd point x\\n     * @param v2_y                  3rd point y\\n     * @param u2                    3rd point u\\n     * @param v2                    3rd point v\\n     *\\n     * @param opacity               opacity [0..255]\\n     * @param aa_first_edge         antialias 1st edge\\n     * @param aa_second_edge        antialias 2nd edge\\n     * @param aa_third_edge         antialias 3rd edge\\n     */\\n    template <typename BlendMode=blendmode::Normal,\\n              typename PorterDuff=porterduff::FastSourceOverOnOpaque,\\n              bool antialias=false, \\n              typename number1=float, typename number2=number1, \\n              typename Sampler>\\n    void drawTriangle(const Sampler &sample,\\n                      const number1 &v0_x, const number1 &v0_y, const number2 &u0, const number2 &v0,\\n                      const number1 &v1_x, const number1 &v1_y, const number2 &u1, const number2 &v1,\\n                      const number1 &v2_x, const number1 &v2_y, const number2 &u2, const number2 &v2,\\n                      opacity_t opacity = 255, \\n                      bool aa_first_edge = true, bool aa_second_edge = true, bool aa_third_edge = true);\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Triangles</strong> are fundamental geometries in vector graphics, <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div> supports drawing\ntriangles with <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"/docs/concepts/samplers\">samplers</a>, <a class=\"chakra-link css-1kc89wa\" href=\"/docs/drawing/3d\">3d-shaders</a> and <strong class=\"css-10ircq3\">Wireframes</strong>.</p><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Example at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">/examples/example_draw_triangle.cpp</div></strong></p></blockquote><img src=\"/images/canvas_triangle.png\" style=\"height:250px;margin:auto\"/><h1 class=\"css-0\">Usage Example</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_ARRAY.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Texture24= sampling::texture&lt;bitmap&lt;coder::RGB888_ARRAY&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">//using number = Q&lt;15&gt;;</span><span>\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(W, H)</span><span>;\n</span><span></span><span style=\"color:#B45EA4\">auto</span><span> img_2 = resources.loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/uv_512.png&quot;</span><span>);\n</span>\n<span></span><span class=\"hljs-function\">Texture24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">tex</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">new</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> bitmap&lt;coder::RGB888_ARRAY&gt;(img_2.data, img_2.width, img_2.height))</span><span>;\n</span>\n<span>canvas.clear(intensity&lt;number&gt;{</span><span style=\"color:#E7CE56\">1</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>});\n</span><span>canvas.drawTriangle&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>, number, number&gt;(\n</span>        tex,\n<span>        </span><span style=\"color:#E7CE56\">10.0</span><span>,  </span><span style=\"color:#E7CE56\">10.0</span><span>,  </span><span style=\"color:#E7CE56\">0.0</span><span>, </span><span style=\"color:#E7CE56\">1.0</span><span>, </span><span style=\"color:#B6B18B\">// x, y, u, v</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">500.0</span><span>, </span><span style=\"color:#E7CE56\">10.0</span><span>,  </span><span style=\"color:#E7CE56\">1.0</span><span>, </span><span style=\"color:#E7CE56\">1.0</span><span>, </span><span style=\"color:#B6B18B\">// x, y, u, v</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">500.0</span><span>, </span><span style=\"color:#E7CE56\">500.0</span><span>, </span><span style=\"color:#E7CE56\">1.0</span><span>, </span><span style=\"color:#E7CE56\">0.0</span><span>, </span><span style=\"color:#B6B18B\">// x, y, u, v</span><span>\n</span><span>        </span><span style=\"color:#E7CE56\">255</span><span>);\n</span>\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Signature API</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam bitmap_type  the bitmap type\n</span><span style=\"color:#B6B18B\"> * @tparam options      the options bitset\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> bitmap_type, </span><span style=\"color:#B45EA4\">uint8_t</span><span> options=CANVAS_OPT_default&gt;\n</span>class canvas {\n<span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw a triangle with sampler\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @tparam BlendMode            the blend mode struct\n</span><span style=\"color:#B6B18B\">     * @tparam PorterDuff           the alpha compositing struct\n</span><span style=\"color:#B6B18B\">     * @tparam antialias            enable/disable anti-aliasing, currently NOT supported\n</span><span style=\"color:#B6B18B\">     * @tparam number1              vertices number type\n</span><span style=\"color:#B6B18B\">     * @tparam number2              uv coords number type\n</span><span style=\"color:#B6B18B\">     * @tparam Sampler              sampler type\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param sample                sampler reference\n</span><span style=\"color:#B6B18B\">     * @param v0_x                  1st point x\n</span><span style=\"color:#B6B18B\">     * @param v0_y                  1st point y\n</span><span style=\"color:#B6B18B\">     * @param u0                    1st point u\n</span><span style=\"color:#B6B18B\">     * @param v0                    1st point v\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param v1_x                  2nd point x\n</span><span style=\"color:#B6B18B\">     * @param v1_y                  2nd point y\n</span><span style=\"color:#B6B18B\">     * @param u1                    2nd point u\n</span><span style=\"color:#B6B18B\">     * @param v1                    2nd point v\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param v2_x                  3rd point x\n</span><span style=\"color:#B6B18B\">     * @param v2_y                  3rd point y\n</span><span style=\"color:#B6B18B\">     * @param u2                    3rd point u\n</span><span style=\"color:#B6B18B\">     * @param v2                    3rd point v\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param opacity               opacity [0..255]\n</span><span style=\"color:#B6B18B\">     * @param aa_first_edge         antialias 1st edge\n</span><span style=\"color:#B6B18B\">     * @param aa_second_edge        antialias 2nd edge\n</span><span style=\"color:#B6B18B\">     * @param aa_third_edge         antialias 3rd edge\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> BlendMode=blendmode::Normal,\n</span><span>              </span><span style=\"color:#B45EA4\">typename</span><span> PorterDuff=porterduff::FastSourceOverOnOpaque,\n</span><span>              </span><span style=\"color:#B45EA4\">bool</span><span> antialias=</span><span style=\"color:#E7CE56\">false</span><span>, \n</span><span>              </span><span style=\"color:#B45EA4\">typename</span><span> number1=</span><span style=\"color:#B45EA4\">float</span><span>, </span><span style=\"color:#B45EA4\">typename</span><span> number2=number1, \n</span><span>              </span><span style=\"color:#B45EA4\">typename</span><span> Sampler&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> drawTriangle(</span><span style=\"color:#B45EA4\">const</span><span> Sampler &amp;sample,\n</span><span>                      </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;v0_x, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;v0_y, </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;u0, </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;v0,\n</span><span>                      </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;v1_x, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;v1_y, </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;u1, </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;v1,\n</span><span>                      </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;v2_x, </span><span style=\"color:#B45EA4\">const</span><span> number1 &amp;v2_y, </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;u2, </span><span style=\"color:#B45EA4\">const</span><span> number2 &amp;v2,\n</span><span>                      </span><span style=\"color:#B45EA4\">opacity_t</span><span> opacity = </span><span style=\"color:#E7CE56\">255</span><span>, \n</span><span>                      </span><span style=\"color:#B45EA4\">bool</span><span> aa_first_edge = </span><span style=\"color:#E7CE56\">true</span><span>, </span><span style=\"color:#B45EA4\">bool</span><span> aa_second_edge = </span><span style=\"color:#E7CE56\">true</span><span>, </span><span style=\"color:#B45EA4\">bool</span><span> aa_third_edge = </span><span style=\"color:#E7CE56\">true</span><span>);\n</span>\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}