{"pageProps":{"data":{"slug":"drawing/text","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Text\"), \" is supported with a technique called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bitmap Fonts\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Examples at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_bitmap_fonts.cpp\")), \" \")), mdx(\"div\", {\n    style: {\n      margin: \"auto\"\n    }\n  }, mdx(\"img\", {\n    src: \"/images/canvas_text.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  }), mdx(\"img\", {\n    src: \"/images/canvas_text_2.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  })), mdx(\"h2\", null, \"Bitmap Font struct\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Defined at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/text/bitmap_font.h>\")), \" \")), mdx(\"p\", null, \"This struct is a template, typed on the bitmap type. Consult the class for more info.\"), mdx(\"h2\", null, \"Text Format struct\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Defined at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/text/text_format.h>\")), \" \")), mdx(\"p\", null, \"This struct defines common things like font size, spacing, word wrap, horizontal and vertical align.\\nConsult the struct for more info.\"), mdx(\"h2\", null, \"Alpha channel\"), mdx(\"p\", null, \"the alpha channel of a bitmap font determines what to exclude. If you have a single channel bitmap\\nfont such as 1/2/4/8 bits per pixel, you are in luck :), because you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"pixel-coders\"\n  }, \"Pixel Coders\"), \",\\nthat decode such a channel into rgba color at runtime. You can also use lookup tables to map/scale the bits\\ninto other alpha bits. Look at:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/pixel_coders/BPP_RGBA>\")), \" - this will map 1,2,4,8 bits to alpha channel, rgb values will stay\\nfixed on maximum value. Uses a single lookup table only if needed at compile time.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/pixel_coders/BPP_RGB>\")), \" - this will map 1,2,4,8 bits to RGB channel, uses\\n3 lookup tables only if needed. Alpha channel is discarded.\")), mdx(\"h1\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGBA8888_ARRAY.h>\\n#include <microgl/samplers/flat_color.h>\\n\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing Bitmap32_ARRAY= bitmap<coder::RGBA8888_ARRAY>;\\nusing font32= microgl::text::bitmap_font<Bitmap32_ARRAY>;\\n\\nCanvas24 canvas(W, H);\\nfont32 font;\\n\\n// fill a bitmap font struct with data from BMF Angel (.fnt) file\\n// you can also fill this struct yourself manually\\nfont32 font = resources.loadFont<Bitmap32_ARRAY>(\\\"digital_7-20\\\");\\ntext::text_format format;\\n\\nfont.padding=5;\\nformat.letterSpacing=0;\\nformat.leading=5;\\nformat.fontSize=-1; // keep native size, unscaled\\nformat.horizontalAlign=text::hAlign::left;\\nformat.verticalAlign=text::vAlign::top;\\nformat.wordWrap=text::wordWrap::break_word;\\n\\ncanvas.clear({73, 84, 101, 255});\\ncanvas.drawText(\\\"Welcome to micro{gl} Welcome to micro{gl} Welcome to \\\"\\n                \\\"micro{gl} Welcome to micro{gl} Welcome to micro{gl} \\\",\\n                font,\\n                {255, 0, 255, 255},\\n                format,\\n                0, 0, 300, 300,\\n                true,\\n                255);\\n\\n\")), mdx(\"h1\", null, \"Signature API\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n    /**\\n     * Draw Bitmap Fonts Text\\n     *\\n     * @tparam tint enable font tinting ?\\n     * @tparam smooth enable font smooth interpolation if font has scaled ?\\n     * @tparam bitmap_font_type the type of the bitmap, that the bitmap font uses\\n     *\\n     * @param text char array string of text to draw\\n     * @param font the bitmap font reference\\n     * @param color the color if tinting was enabled\\n     * @param format text format\\n     * @param left left position\\n     * @param top top position\\n     * @param right right position\\n     * @param bottom bottom position\\n     * @param frame draw a frame ?\\n     * @param opacity opacity [0..255]\\n     */\\n    template<bool tint=true, bool smooth=false, \\n             typename bitmap_font_type>\\n    void drawText(const char *text, \\n                  microgl::text::bitmap_font<bitmap_font_type> &font, \\n                  const color_t & color,\\n                  microgl::text::text_format & format,\\n                  int left, int top, int right, int bottom, \\n                  bool frame, \\n                  opacity_t opacity=255);\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Text</strong> is supported with a technique called <strong class=\"css-10ircq3\">Bitmap Fonts</strong>.</p><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Examples at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">/examples/example_draw_bitmap_fonts.cpp</div></strong> </p></blockquote><div style=\"margin:auto\"><img src=\"/images/canvas_text.png\" style=\"height:250px;display:inline-block\"/><img src=\"/images/canvas_text_2.png\" style=\"height:250px;display:inline-block\"/></div><h2 class=\"css-0\">Bitmap Font struct</h2><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Defined at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/text/bitmap_font.h&gt;</div></strong> </p></blockquote><p class=\"css-0\">This struct is a template, typed on the bitmap type. Consult the class for more info.</p><h2 class=\"css-0\">Text Format struct</h2><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Defined at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/text/text_format.h&gt;</div></strong> </p></blockquote><p class=\"css-0\">This struct defines common things like font size, spacing, word wrap, horizontal and vertical align.\nConsult the struct for more info.</p><h2 class=\"css-0\">Alpha channel</h2><p class=\"css-0\">the alpha channel of a bitmap font determines what to exclude. If you have a single channel bitmap\nfont such as 1/2/4/8 bits per pixel, you are in luck :), because you can use <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div> <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"pixel-coders\">Pixel Coders</a>,\nthat decode such a channel into rgba color at runtime. You can also use lookup tables to map/scale the bits\ninto other alpha bits. Look at:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;microgl/pixel_coders/BPP_RGBA&gt;</div></strong> - this will map 1,2,4,8 bits to alpha channel, rgb values will stay\nfixed on maximum value. Uses a single lookup table only if needed at compile time.</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">&lt;microgl/pixel_coders/BPP_RGB&gt;</div></strong> - this will map 1,2,4,8 bits to RGB channel, uses\n3 lookup tables only if needed. Alpha channel is discarded.</li></ul><h1 class=\"css-0\">Usage Example</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGBA8888_ARRAY.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Bitmap32_ARRAY= bitmap&lt;coder::RGBA8888_ARRAY&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> font32= microgl::text::bitmap_font&lt;Bitmap32_ARRAY&gt;;\n</span>\n<span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(W, H)</span><span>;\n</span>font32 font;\n<!-- -->\n<span></span><span style=\"color:#B6B18B\">// fill a bitmap font struct with data from BMF Angel (.fnt) file</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// you can also fill this struct yourself manually</span><span>\n</span><span>font32 font = resources.loadFont&lt;Bitmap32_ARRAY&gt;(</span><span style=\"color:#4FB4D7\">&quot;digital_7-20&quot;</span><span>);\n</span>text::text_format format;\n<!-- -->\n<span>font.padding=</span><span style=\"color:#E7CE56\">5</span><span>;\n</span><span>format.letterSpacing=</span><span style=\"color:#E7CE56\">0</span><span>;\n</span><span>format.leading=</span><span style=\"color:#E7CE56\">5</span><span>;\n</span><span>format.fontSize=</span><span style=\"color:#E7CE56\">-1</span><span>; </span><span style=\"color:#B6B18B\">// keep native size, unscaled</span><span>\n</span>format.horizontalAlign=text::hAlign::left;\n<!-- -->format.verticalAlign=text::vAlign::top;\n<!-- -->format.wordWrap=text::wordWrap::break_word;\n<!-- -->\n<span>canvas.clear({</span><span style=\"color:#E7CE56\">73</span><span>, </span><span style=\"color:#E7CE56\">84</span><span>, </span><span style=\"color:#E7CE56\">101</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span>canvas.drawText(</span><span style=\"color:#4FB4D7\">&quot;Welcome to micro{gl} Welcome to micro{gl} Welcome to &quot;</span><span>\n</span><span>                </span><span style=\"color:#4FB4D7\">&quot;micro{gl} Welcome to micro{gl} Welcome to micro{gl} &quot;</span><span>,\n</span>                font,\n<span>                {</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>},\n</span>                format,\n<span>                </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>, </span><span style=\"color:#E7CE56\">300</span><span>,\n</span><span>                </span><span style=\"color:#E7CE56\">true</span><span>,\n</span><span>                </span><span style=\"color:#E7CE56\">255</span><span>);\n</span>\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Signature API</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam bitmap_type  the bitmap type\n</span><span style=\"color:#B6B18B\"> * @tparam options      the options bitset\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> bitmap_type, </span><span style=\"color:#B45EA4\">uint8_t</span><span> options=CANVAS_OPT_default&gt;\n</span>class canvas {\n<span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw Bitmap Fonts Text\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @tparam tint enable font tinting ?\n</span><span style=\"color:#B6B18B\">     * @tparam smooth enable font smooth interpolation if font has scaled ?\n</span><span style=\"color:#B6B18B\">     * @tparam bitmap_font_type the type of the bitmap, that the bitmap font uses\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param text char array string of text to draw\n</span><span style=\"color:#B6B18B\">     * @param font the bitmap font reference\n</span><span style=\"color:#B6B18B\">     * @param color the color if tinting was enabled\n</span><span style=\"color:#B6B18B\">     * @param format text format\n</span><span style=\"color:#B6B18B\">     * @param left left position\n</span><span style=\"color:#B6B18B\">     * @param top top position\n</span><span style=\"color:#B6B18B\">     * @param right right position\n</span><span style=\"color:#B6B18B\">     * @param bottom bottom position\n</span><span style=\"color:#B6B18B\">     * @param frame draw a frame ?\n</span><span style=\"color:#B6B18B\">     * @param opacity opacity [0..255]\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">bool</span><span> tint=</span><span style=\"color:#E7CE56\">true</span><span>, </span><span style=\"color:#B45EA4\">bool</span><span> smooth=</span><span style=\"color:#E7CE56\">false</span><span>, \n</span><span>             </span><span style=\"color:#B45EA4\">typename</span><span> bitmap_font_type&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> drawText(</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">char</span><span> *text, \n</span>                  microgl::text::bitmap_font&lt;bitmap_font_type&gt; &amp;font, \n<span>                  </span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">color_t</span><span> &amp; color,\n</span>                  microgl::text::text_format &amp; format,\n<span>                  </span><span style=\"color:#B45EA4\">int</span><span> left, </span><span style=\"color:#B45EA4\">int</span><span> top, </span><span style=\"color:#B45EA4\">int</span><span> right, </span><span style=\"color:#B45EA4\">int</span><span> bottom, \n</span><span>                  </span><span style=\"color:#B45EA4\">bool</span><span> frame, \n</span><span>                  </span><span style=\"color:#B45EA4\">opacity_t</span><span> opacity=</span><span style=\"color:#E7CE56\">255</span><span>);\n</span>\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}