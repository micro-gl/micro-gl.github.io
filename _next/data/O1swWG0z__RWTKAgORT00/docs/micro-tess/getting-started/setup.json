{"pageProps":{"data":{"slug":"getting-started/setup","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Fast\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Slim\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Embeddable\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Allocator-aware\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Headers files\"), \" only \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"C++11\")), \" geometry tesselation\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"library for vector graphics, that can run on any 32/64 bits computer with or without \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FPU\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"No standard library required\"), \".\"), mdx(\"p\", null, \"Check out the git repo at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/micro-gl/micro-tess\"\n  }, \"https://github.com/micro-gl/micro-tess\")), mdx(\"h2\", null, \"Installing \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"micro{tess}\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"micro-tess\"), \" is a headers only library, which gives the following install possibilities:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cmake\"), \" to invoke the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"install\"), \" target, that will copy everything in your system via\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ mkdir cmake-build-release\\n$ cd cmake-build-release\\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\\n$ cmake --install .\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Copying the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"include/micro-tess\"), \" to anywhere you want.\")), mdx(\"h2\", null, \"Consuming \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"micro{tess}\")), mdx(\"p\", null, \"Following options are available:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"copy the project to a sub folder of your project. inside your \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"CMakeLists.txt\")), \" add\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"add_subdirectory(/path/to/micro-tess)\\ntarget_link_libraries(your_app micro-tess)\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If you installed \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"micro{tess}\")), \" with option 1 (see above) at your system, you can instead\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"find_package(micro-tess CONFIG REQUIRED)\\ntarget_link_libraries(your_app micro-tess::micro-tess)\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If you have not installed, you can add in your app's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CMakeLists.txt\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"target_include_directories(app path/to/micro-tess/folder/include/)\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If you manually copied the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"include/micro-tess\"), \" to the default system include path,\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"you can use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cmake/Findmicro-tess.cmake\"), \" to automatically create the cmake targets\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/path/to/Findmicro-tess/folder)\\nfind_package(micro-tess REQUIRED)\\ntarget_link_libraries(your_app micro-tess::micro-tess)\\n\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Just copy the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"include/micro-tess\"), \" into a sub folder of your project and include the header\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"files you need with relative path in your source files.\")), mdx(\"h2\", null, \"Running Examples\"), mdx(\"p\", null, \"First make sure you have\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.libsdl.org/\"\n  }, \"SDL2\"), \" installed at your system.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/micro-gl/micro-gl\"\n  }, \"microgl\"), \" installed at your system.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://cmake.org/download/\"\n  }, \"cmake\"), \" installed at your system.\")), mdx(\"p\", null, \"There are two ways:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use your favourite IDE to load the root \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CMakeLists.txt\"), \" file, and then it\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"will pick up all of the targets, including the examples\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using the command line:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ mkdir cmake-build-release\\n$ cd cmake-build-release\\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\\n$ cmake --build . --target <example_name>\\n$ ../examples/bin/example_name\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Author: Tomer Shalev, tomer.shalev@gmail.com, all rights reserved (2021)\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Fast</strong>, <strong class=\"css-10ircq3\">Slim</strong>, <strong class=\"css-10ircq3\">Embeddable</strong>, <strong class=\"css-10ircq3\">Allocator-aware</strong>, <strong class=\"css-10ircq3\">Headers files</strong> only <strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">C++11</div></strong> geometry tesselation<div class=\"css-0\"></div>\n<!-- -->library for vector graphics, that can run on any 32/64 bits computer with or without <strong class=\"css-10ircq3\">FPU</strong>.<div class=\"css-0\"></div>\n<strong class=\"css-10ircq3\">No standard library required</strong>.</p><p class=\"css-0\">Check out the git repo at <style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"https://github.com/micro-gl/micro-tess\">https://github.com/micro-gl/micro-tess</a></p><h2 class=\"css-0\">Installing <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">micro{tess}</div></h2><p class=\"css-0\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">micro-tess</div> is a headers only library, which gives the following install possibilities:</p><ol class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Using <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">cmake</div> to invoke the <div class=\"css-gy3xy5\">install</div> target, that will copy everything in your system via</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-bash\" style=\"white-space:pre\"><span>$ mkdir cmake-build-release\n</span><span>$ </span><span style=\"color:#E7CE56\">cd</span><span> cmake-build-release\n</span>$ cmake -DCMAKE_BUILD_TYPE=Release ..\n<!-- -->$ cmake --install .\n<!-- -->\n</code></pre></pre><ol start=\"2\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Copying the <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">include/micro-tess</div> to anywhere you want.</li></ol><h2 class=\"css-0\">Consuming <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">micro{tess}</div></h2><p class=\"css-0\">Following options are available:</p><ol class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">copy the project to a sub folder of your project. inside your <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">CMakeLists.txt</div></strong> add</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">add_subdirectory</span><span>(/path/to/micro-tess)\n</span><span></span><span style=\"color:#B45EA4\">target_link_libraries</span><span>(your_app micro-tess)\n</span>\n</code></pre></pre><ol start=\"2\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">If you installed <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">micro{tess}</div></strong> with option 1 (see above) at your system, you can instead</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">find_package</span><span>(micro-tess CONFIG REQUIRED)\n</span><span></span><span style=\"color:#B45EA4\">target_link_libraries</span><span>(your_app micro-tess::micro-tess)\n</span>\n</code></pre></pre><ol start=\"3\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">If you have not installed, you can add in your app&#x27;s <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">CMakeLists.txt</div></li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">target_include_directories</span><span>(app path/to/micro-tess/folder/</span><span style=\"color:#B45EA4\">include</span><span>/)\n</span>\n</code></pre></pre><ol start=\"4\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">If you manually copied the <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">include/micro-tess</div> to the default system include path,<div class=\"css-0\"></div>you can use <div class=\"css-gy3xy5\">cmake/Findmicro-tess.cmake</div> to automatically create the cmake targets</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">list</span><span>(APPEND CMAKE_MODULE_PATH </span><span style=\"color:#EB3C54\">${PROJECT_SOURCE_DIR}</span><span>/path/to/Findmicro-tess/folder)\n</span><span></span><span style=\"color:#B45EA4\">find_package</span><span>(micro-tess REQUIRED)\n</span><span></span><span style=\"color:#B45EA4\">target_link_libraries</span><span>(your_app micro-tess::micro-tess)\n</span>\n</code></pre></pre><ol start=\"5\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Just copy the <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">include/micro-tess</div> into a sub folder of your project and include the header<div class=\"css-0\"></div>files you need with relative path in your source files.</li></ol><h2 class=\"css-0\">Running Examples</h2><p class=\"css-0\">First make sure you have</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"https://www.libsdl.org/\">SDL2</a> installed at your system.</li><li class=\"css-b0qdn7\"><a class=\"chakra-link css-1kc89wa\" href=\"https://github.com/micro-gl/micro-gl\">microgl</a> installed at your system.</li><li class=\"css-b0qdn7\"><a class=\"chakra-link css-1kc89wa\" href=\"https://cmake.org/download/\">cmake</a> installed at your system.</li></ul><p class=\"css-0\">There are two ways:</p><ol class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Use your favourite IDE to load the root <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">CMakeLists.txt</div> file, and then it<div class=\"css-0\"></div>will pick up all of the targets, including the examples</li><li class=\"css-b0qdn7\">Using the command line:</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-bash\" style=\"white-space:pre\"><span>$ mkdir cmake-build-release\n</span><span>$ </span><span style=\"color:#E7CE56\">cd</span><span> cmake-build-release\n</span>$ cmake -DCMAKE_BUILD_TYPE=Release ..\n<!-- -->$ cmake --build . --target &lt;example_name&gt;\n<!-- -->$ ../examples/bin/example_name\n<!-- -->\n</code></pre></pre><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-text\" style=\"white-space:pre\"><span>Author: Tomer Shalev, tomer.shalev@gmail.com, all rights reserved (2021)\n</span>\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}