{"pageProps":{"data":{"slug":"concepts/numbers","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, \"most of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"micro-tess\"), \" algorithms can use any of the following numbers types at compile-time:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Q\"), \" numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"float\"), \" numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"double\"), \" numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"any custom user defined number types\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"most of the methods in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"micro-tess\"), \" are templates that use a generic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \" template argument\\nto abstract away the number type.\")), mdx(\"h2\", null, \"Q numbers\"), mdx(\"p\", null, \"Q numbers are fixed point integers, that have configurable number of bits\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"for the precision of the number.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <micro-tess/Q.h>\\n// q_15 have 15 bits of precision\\nusing q_15 = Q<15, int32_t>;\\n\\nq_15 q1{5}, q2{2};\\nq_15 q3 = q1/q2;\\n\")), mdx(\"p\", null, \"you can convert q numbers into other precision with\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Q<4> q4 = q3;\\n\")), mdx(\"p\", null, \"you can also cast them to other numbers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"float f1 = float(q4);\\ndouble d1 = float(q4);\\nint f1 = int(q4);\\n\")), mdx(\"p\", null, \"you can also construct them from other types\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\nQ<15> q1{0.00281f};\\nQ<15> q2 = 3.14f\\n\")), mdx(\"p\", null, \"you can also apply math function on them\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\n#include <micro-tess/Q.h>\\n#include <micro-tess/math.h>\\n// q_15 have 15 bits of precision\\nusing q_15 = Q<15>;\\n\\nQ<15> q1{9.32f};\\n\\nauto q_sqrt = microtess::math::sqrt(q1);\\nauto q_abs = microtess::math::abs(q1);\\n\")), mdx(\"h2\", null, \"Custom number types\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q\")), \" is an example of a custom number type. You can create your own if you like,\\njust make sure your type has all the opertor overloads suitable for a number:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can be constructed from other number types (copy constructor for your type) and conversion constructor\\n(from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"int\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"float\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"double\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implements \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"assignment\"), \" operator \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"your_number_type::operator=(const your_number_type &)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implements \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"math\"), \" operator \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"+, +=, -, -=, /, /=, *, *=\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implements \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"negate\"), \" operator \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"your_number_type::operator -()\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implements \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"comparison\"), \" operators \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"==, !=, <, <=, >, >=\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implements \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"casting\"), \" operators for most integral types\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Please, see \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<micro-tess/Q.h>\")), \" for an example\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\">most of <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">micro-tess</div> algorithms can use any of the following numbers types at compile-time:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">Q</div> numbers</li><li class=\"css-b0qdn7\"><div class=\"css-gy3xy5\">float</div> numbers</li><li class=\"css-b0qdn7\"><div class=\"css-gy3xy5\">double</div> numbers</li><li class=\"css-b0qdn7\">any custom user defined number types</li></ul><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">most of the methods in <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">micro-tess</div> are templates that use a generic <div class=\"css-gy3xy5\">number</div> template argument\nto abstract away the number type.</p></blockquote><h2 class=\"css-0\">Q numbers</h2><p class=\"css-0\">Q numbers are fixed point integers, that have configurable number of bits<div class=\"css-0\"></div>\n<!-- -->for the precision of the number.</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/Q.h&gt;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// q_15 have 15 bits of precision</span><span>\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> q_15 = Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>, </span><span style=\"color:#B45EA4\">int32_t</span><span>&gt;;\n</span>\n<span>q_15 q1{</span><span style=\"color:#E7CE56\">5</span><span>}, q2{</span><span style=\"color:#E7CE56\">2</span><span>};\n</span>q_15 q3 = q1/q2;\n<!-- -->\n</code></pre></pre><p class=\"css-0\">you can convert q numbers into other precision with</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span>Q&lt;</span><span style=\"color:#E7CE56\">4</span><span>&gt; q4 = q3;\n</span>\n</code></pre></pre><p class=\"css-0\">you can also cast them to other numbers</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">float</span><span> f1 = </span><span style=\"color:#B45EA4\">float</span><span>(q4);\n</span><span></span><span style=\"color:#B45EA4\">double</span><span> d1 = </span><span style=\"color:#B45EA4\">float</span><span>(q4);\n</span><span></span><span style=\"color:#B45EA4\">int</span><span> f1 = </span><span style=\"color:#B45EA4\">int</span><span>(q4);\n</span>\n</code></pre></pre><p class=\"css-0\">you can also construct them from other types</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span>\n</span><span>Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt; q1{</span><span style=\"color:#E7CE56\">0.00281f</span><span>};\n</span><span>Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt; q2 = </span><span style=\"color:#E7CE56\">3.14f</span><span>\n</span>\n</code></pre></pre><p class=\"css-0\">you can also apply math function on them</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/Q.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/math.h&gt;</span><span>\n</span><span></span><span style=\"color:#B6B18B\">// q_15 have 15 bits of precision</span><span>\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> q_15 = Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt;;\n</span>\n<span>Q&lt;</span><span style=\"color:#E7CE56\">15</span><span>&gt; q1{</span><span style=\"color:#E7CE56\">9.32f</span><span>};\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> q_sqrt = microtess::math::</span><span style=\"color:#E7CE56\">sqrt</span><span>(q1);\n</span><span></span><span style=\"color:#B45EA4\">auto</span><span> q_abs = microtess::math::</span><span style=\"color:#E7CE56\">abs</span><span>(q1);\n</span>\n</code></pre></pre><h2 class=\"css-0\">Custom number types</h2><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">Q</div></strong> is an example of a custom number type. You can create your own if you like,\njust make sure your type has all the opertor overloads suitable for a number:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Can be constructed from other number types (copy constructor for your type) and conversion constructor\n(from <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">int</div>, <div class=\"css-gy3xy5\">float</div> and <div class=\"css-gy3xy5\">double</div>).</li><li class=\"css-b0qdn7\">Implements <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">assignment</strong> operator <div class=\"css-gy3xy5\">your_number_type::operator=(const your_number_type &amp;)</div></li><li class=\"css-b0qdn7\">Implements <strong class=\"css-10ircq3\">math</strong> operator <div class=\"css-gy3xy5\">+, +=, -, -=, /, /=, *, *=</div></li><li class=\"css-b0qdn7\">Implements <strong class=\"css-10ircq3\">negate</strong> operator <div class=\"css-gy3xy5\">your_number_type::operator -()</div></li><li class=\"css-b0qdn7\">Implements <strong class=\"css-10ircq3\">comparison</strong> operators <div class=\"css-gy3xy5\">==, !=, &lt;, &lt;=, &gt;, &gt;=</div></li><li class=\"css-b0qdn7\">Implements <strong class=\"css-10ircq3\">casting</strong> operators for most integral types</li></ul><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">Please, see <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">&lt;micro-tess/Q.h&gt;</div></strong> for an example</p></blockquote>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}