{"pageProps":{"data":{"slug":"algorithms/planar-subdivision","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Planarize Division\"), \" Tessellates any collection of polygons of any type\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Fill Rules\"), \" - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"even-odd\")), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"non-zero\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Numerically stable\"), \". Can tessellate with any number \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"precision\"), \": \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q\")), \" (fixed point), \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"float\")), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"double\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Includes geometric optimizations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Allocator-aware\"), \" so you can use it in any computer memory model\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"3\"), \" Configurable tessellation \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"qualities\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Debuggable messages flag with macro definition (this will require stdlib)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Debuggable optional approximate trapezes output\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optional boundary info output\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If randomization is incorporated at the algorithm edge-wise, this is the fastest algorithm on\\naverage with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n*log(n))\"), \" performance for any type of polygons and multi-polygons. Currently, the\\nper edge randomization was disabled because it might make the implementation less stable, but I might\\nre-add it with a flag. Also, partial randomization can be accomplished by randomizing the polygon.\")), mdx(\"h3\", null, \"Fill Rules\"), mdx(\"p\", null, \"These can be chosen by the Enum \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microtess::fill_rule\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"fill_rule::non_zero\")), \" - only includes subdivisions, which have a non-zero winding number.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"fill_rule::even_odd\")), \" - only includes subdivisions, which have odd winding number.\")), mdx(\"h3\", null, \"Tessellation Quality\"), mdx(\"p\", null, \"These can be chosen by the Enum \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microtess::tess_quality\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tess_quality::fine\")), \" - The fastest algorithm, but may produce zero area triangles on the\\nboundary because it fan triangulates the approximate trapezes. might be a problem if you are using SDF based AA\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tess_quality::better\")), \" - A bit slower and might be susceptible for other issues, but produces\\ntriangles out of each trapeze in a way similar to ear clipping, this\\nfights zero area triangles on the boundary, so you can use SDF AA\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tess_quality::prettier_with_extra_vertices\")), \" - fast algorithm, that produces eye pleasing results,\\nbut uses around x2 memory for indices because it adds a center vertex in a trapeze and therefore adds\\ntwo more triangles per trapeze on average\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"tess_quality::worst_visuals_but_fast_and_constant_memory\")), \" (TBD) - the worst algorithm visually, as it will\\ncreate 2 triangles per trapeze, BUT let's not forget each trapeze is an approximation, therefore cracks will\\nshow up in many cases. Also, this will have 2 triangles per trapeze so this is the most memory efficient\")), mdx(\"h3\", null, \"Input\"), mdx(\"p\", null, \"Input to the algorithm is\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fill rule enum \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microtess::fill_rule\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tess quality enum \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microtess::tess_quality\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any iterable container which stores collections of collections of vertices, Each collection is a single polygon,\\nand you can have as many as you want. In this example, I use my brewed container \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chunker\"), \", but you can\\nuse any standard one like a vector of vectors of vertices (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"std::vector<vector<vec2<number_type>>>\")), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Output variables to be filled by the algorithm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optional \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"allocator\"), \" for computation\")), mdx(\"h3\", null, \"Output\"), mdx(\"p\", null, \"The algorithm output in the example below:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output_triangles_type\")), \" for you to know how to iterate the triangles (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"TRIANGLES/FAN/STRIP\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill the user supplied \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output_vertices\")), \" container with triangulation vertices.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill the user supplied \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output_indices\")), \" container with triangulation indices.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"optionally\"), \") fill the user supplied \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output_boundary_info\")), \" container for you to know how to identify the boundary.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"optionally\"), \") fill the user supplied \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"output_optional_approximate_trapezes\")), \" container for you to roughly understand the trapezes.\")), mdx(\"h3\", null, \"Debugging\"), mdx(\"p\", null, \"If you are seeing bugs with the tessellation, try the following\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"APPLY_MERGE\")), \" template argument to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \", this optimization might be producing problems.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Try increasing \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"MAX_ITERATIONS\")), \" template argument. Your algorithm might need more iterations if\\none of your polygons is huge. This argument is a fail safe way to exit an infinite loop if one shoudl occur.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"#define MICROTESS_PLANAR_DEBUG_MESSAGES\")), \" before all other includes. This should give messages and throw\\nexceptions when the algorithm 'feels' things are wrong, so this can give you info.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Try increasing the precision of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"number\"), \" type of the vertices:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If using \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q\")), \", try increasing precision bits. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Q<8> -> Q<15>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If using \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"float\")), \", then try \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"double\")), \" etc..\")))), mdx(\"h2\", null, \"Example\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"taken from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"examples/example_geometry_complex_to_planar_subdivision.cpp\"))), mdx(\"div\", {\n    style: {\n      margin: \"auto\"\n    }\n  }, mdx(\"img\", {\n    src: \"/images/tess/planar-sub-1.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  })), mdx(\"p\", null, \"The example demonstrates usage of different linear containers (including the packaged non standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dynamic_array\"), \").\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The example also demonstrates different number types such as fixed point integer(\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Q\")), \" numbers), float and doubles.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Tessellation computation is only \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"16\"), \" lines of code.  \"), mdx(\"p\", null, \"I use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microgl\")), \" project to render the tessellation.  \"), mdx(\"p\", null, \"Tessellation is happening at lines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#45\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#65\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c++-lines_numbers\"\n  }, \"#define MICROGL_USE_EXTERNAL_MICRO_TESS\\n#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/bitmaps/bitmap.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/flat_color.h>\\n#include <microgl/math/Q.h>\\n\\n#include <micro-tess/planarize_division.h>\\n#include <micro-tess/static_array.h>\\n#include <micro-tess/dynamic_array.h>\\n#include <micro-tess/chunker.h>\\n#include <micro-tess/std_rebind_allocator.h>\\n#include <vector>\\n\\ntemplate<typename item>\\nusing fixed_static_array = static_array<item, 10000>;\\n\\n// containers for collections of points (polygons) \\ntemplate<typename number>\\nusing chunker_t = allocator_aware_chunker<vertex2<number>, dynamic_array>;\\n//using chunker_t = allocator_aware_chunker<vertex2<number>, std::vector>;\\n//using chunker_t = non_allocator_aware_chunker<vertex2<number>, fixed_static_array>;\\n\\n// containers templates for output containers\\ntemplate<typename item>\\nusing container = dynamic_array<item>;\\n//using container = std::vector<item>;\\n//using container = static_array<item, 10000>;\\n\\ntemplate <typename number>\\ncontainer<vertex2<number>> box(float left, float top, float right,\\n                               float bottom, bool ccw=false) {\\n    using il = std::initializer_list<vertex2<number>>;\\n    if(!ccw)\\n        return il{{left,top}, {right,top}, {right,bottom}, {left,bottom}};\\n    return il{{left,top}, {left,bottom}, {right,bottom}, {right,top}};\\n};\\n\\ntemplate <typename number>\\nchunker_t<number> poly_inter_star_2() {\\n    using il = std::initializer_list<vertex2<number>>;\\n    chunker_t<number> A;\\n\\n    A.push_back_and_cut(il{{150, 150}, {450,150},\\n                            {200,450}, {300,50},\\n                            {400,450}});\\n\\n    A.push_back_and_cut(il{{150/2, 150/2}, {450/2,150/2},\\n                            {200/2,450/2}, {300/2,50/2},\\n                            {400/2,450/2}});\\n\\n    A.push_back_and_cut(il{{150/10, 150/10}, {450/10,150/10},\\n                            {200/10,450/10}, {300/10,50/10},\\n                            {400/10,450/10}});\\n\\n    A.push_back_and_cut(box<number>(50,50,300,300, false));\\n    A.push_back_and_cut(box<number>(50,250,600,300, true));\\n    A.push_back_and_cut(box<number>(50,450,100,500, true));\\n\\n    return A;\\n}\\n\\nint main() {\\n    using number = float;\\n    // using number = double;\\n    // using number = Q<2>;\\n    // using number = Q<4>;\\n    // using number = Q<8>;\\n    // using number = Q<12>;\\n    // using number = Q<15>;\\n    // using number = Q<16>;\\n\\n    // microgl drawing setup START\\n    using Canvas24= canvas<bitmap<RGB888_PACKED_32>>;\\n    sampling::flat_color<> color_red {{255, 0, 255, 255}};\\n    Canvas24 canvas(640, 480);\\n    // microgl drawing setup END\\n\\n    auto render_polygon = [&](const chunker_t<number> & pieces) {\\n        using index = unsigned int;\\n\\n        // Algorithm START\\n        // output tess vertices\\n        container<vertex2<number>> output_vertices;\\n        // output tess indices\\n        container<index> output_indices;\\n        // output optional approximate trapezes\\n        container<vertex2<number>> output_optional_approximate_trapezes;\\n        // output optional boundary info\\n        container<microtess::triangles::boundary_info> output_boundary;\\n        // output triangles indices type\\n        microtess::triangles::indices output_triangles_type;\\n        // optional computation allocator\\n        microtess::std_rebind_allocator<> allocator;\\n        // define algorithm\\n        using psd = microtess::planarize_division<\\n                            number,\\n                            decltype(output_vertices),\\n                            decltype(output_indices),\\n                            decltype(output_boundary)>;\\n                            decltype(allocator)>;\\n        // compute algorithm\\n        psd::template compute<decltype(pieces)>(pieces,\\n                        microtess::fill_rule::even_odd,\\n                        microtess::tess_quality::better,\\n                        output_vertices, \\n                        output_triangles_type, \\n                        output_indices,\\n                        &output_boundary, \\n                        &output_optional_approximate_trapezes,\\n                        allocator);\\n        // Algorithm END\\n\\n        canvas.clear({255, 255, 255, 255});\\n        canvas.drawTriangles<blendmode::Normal, porterduff::None<>, false>(\\n                color_red,\\n                matrix_3x3<number>::identity(),\\n                output_vertices.data(),\\n                (vertex2<number> *)nullptr,\\n                output_indices.data(),\\n                output_boundary.data(),\\n                output_indices.size(),\\n                output_triangles_type,\\n                255);\\n\\n        canvas.drawTrianglesWireframe({0,0,0,255},\\n                            matrix_3x3<number>::identity(),\\n                            output_vertices.data(),\\n                            output_indices.data(),\\n                            output_indices.size(),\\n                            output_triangles_type,\\n                            40);\\n\\n        for (index ix = 0; ix < output_optional_approximate_trapezes.size(); ix+=4)\\n            canvas.drawWuLinePath({0, 0, 0, 255},\\n                                  &output_optional_approximate_trapezes[ix], 4, true);\\n    };\\n\\n    auto render = [&](void*, void*, void*) -> void {\\n        static auto polygons = poly_inter_star_2<number>();\\n        render_polygon(polygons);\\n    };\\n\\n    example_run(&canvas, render);\\n}\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Planarize Division</strong> Tessellates any collection of polygons of any type</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Supports <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Fill Rules</strong> - <strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">even-odd</div></strong> and <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">non-zero</div></strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Numerically stable</strong>. Can tessellate with any number <strong class=\"css-10ircq3\">precision</strong>: <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">Q</div></strong> (fixed point), <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">float</div></strong> and <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">double</div></strong></li><li class=\"css-b0qdn7\">Includes geometric optimizations</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Allocator-aware</strong> so you can use it in any computer memory model</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">3</strong> Configurable tessellation <strong class=\"css-10ircq3\">qualities</strong></li><li class=\"css-b0qdn7\">Debuggable messages flag with macro definition (this will require stdlib)</li><li class=\"css-b0qdn7\">Debuggable optional approximate trapezes output</li><li class=\"css-b0qdn7\">Optional boundary info output</li><li class=\"css-b0qdn7\">If randomization is incorporated at the algorithm edge-wise, this is the fastest algorithm on\naverage with <div class=\"css-gy3xy5\">O(n*log(n))</div> performance for any type of polygons and multi-polygons. Currently, the\nper edge randomization was disabled because it might make the implementation less stable, but I might\nre-add it with a flag. Also, partial randomization can be accomplished by randomizing the polygon.</li></ul><h3 class=\"css-0\">Fill Rules</h3><p class=\"css-0\">These can be chosen by the Enum <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microtess::fill_rule</div></strong></p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">fill_rule::non_zero</div></strong> - only includes subdivisions, which have a non-zero winding number.</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">fill_rule::even_odd</div></strong> - only includes subdivisions, which have odd winding number.</li></ul><h3 class=\"css-0\">Tessellation Quality</h3><p class=\"css-0\">These can be chosen by the Enum <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microtess::tess_quality</div></strong></p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">tess_quality::fine</div></strong> - The fastest algorithm, but may produce zero area triangles on the\nboundary because it fan triangulates the approximate trapezes. might be a problem if you are using SDF based AA</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">tess_quality::better</div></strong> - A bit slower and might be susceptible for other issues, but produces\ntriangles out of each trapeze in a way similar to ear clipping, this\nfights zero area triangles on the boundary, so you can use SDF AA</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">tess_quality::prettier_with_extra_vertices</div></strong> - fast algorithm, that produces eye pleasing results,\nbut uses around x2 memory for indices because it adds a center vertex in a trapeze and therefore adds\ntwo more triangles per trapeze on average</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">tess_quality::worst_visuals_but_fast_and_constant_memory</div></strong> (TBD) - the worst algorithm visually, as it will\ncreate 2 triangles per trapeze, BUT let&#x27;s not forget each trapeze is an approximation, therefore cracks will\nshow up in many cases. Also, this will have 2 triangles per trapeze so this is the most memory efficient</li></ul><h3 class=\"css-0\">Input</h3><p class=\"css-0\">Input to the algorithm is</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Fill rule enum <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microtess::fill_rule</div></strong></li><li class=\"css-b0qdn7\">Tess quality enum <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">microtess::tess_quality</div></strong></li><li class=\"css-b0qdn7\">Any iterable container which stores collections of collections of vertices, Each collection is a single polygon,\nand you can have as many as you want. In this example, I use my brewed container <div class=\"css-gy3xy5\">chunker</div>, but you can\nuse any standard one like a vector of vectors of vertices (<strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">std::vector&lt;vector&lt;vec2&lt;number_type&gt;&gt;&gt;</div></strong>).</li><li class=\"css-b0qdn7\">Output variables to be filled by the algorithm</li><li class=\"css-b0qdn7\">Optional <strong class=\"css-10ircq3\">allocator</strong> for computation</li></ul><h3 class=\"css-0\">Output</h3><p class=\"css-0\">The algorithm output in the example below:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Will fill The <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">output_triangles_type</div></strong> for you to know how to iterate the triangles (<em>TRIANGLES/FAN/STRIP</em>)</li><li class=\"css-b0qdn7\">Will fill the user supplied <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">output_vertices</div></strong> container with triangulation vertices.</li><li class=\"css-b0qdn7\">Will fill the user supplied <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">output_indices</div></strong> container with triangulation indices.</li><li class=\"css-b0qdn7\">Will (<strong class=\"css-10ircq3\">optionally</strong>) fill the user supplied <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">output_boundary_info</div></strong> container for you to know how to identify the boundary.</li><li class=\"css-b0qdn7\">Will (<strong class=\"css-10ircq3\">optionally</strong>) fill the user supplied <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">output_optional_approximate_trapezes</div></strong> container for you to roughly understand the trapezes.</li></ul><h3 class=\"css-0\">Debugging</h3><p class=\"css-0\">If you are seeing bugs with the tessellation, try the following</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Set <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">APPLY_MERGE</div></strong> template argument to <div class=\"css-gy3xy5\">false</div>, this optimization might be producing problems.</li><li class=\"css-b0qdn7\">Try increasing <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">MAX_ITERATIONS</div></strong> template argument. Your algorithm might need more iterations if\none of your polygons is huge. This argument is a fail safe way to exit an infinite loop if one shoudl occur.</li><li class=\"css-b0qdn7\">Add <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">#define MICROTESS_PLANAR_DEBUG_MESSAGES</div></strong> before all other includes. This should give messages and throw\nexceptions when the algorithm &#x27;feels&#x27; things are wrong, so this can give you info.</li><li class=\"css-b0qdn7\">Try increasing the precision of the <div class=\"css-gy3xy5\">number</div> type of the vertices:<ul class=\"css-0\"><li class=\"css-b0qdn7\">If using <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">Q</div></strong>, try increasing precision bits. <strong class=\"css-10ircq3\">Q&lt;8&gt; -&gt; Q&lt;15&gt;</strong></li><li class=\"css-b0qdn7\">If using <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">float</div></strong>, then try <strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">double</div></strong> etc..</li></ul></li></ul><h2 class=\"css-0\">Example</h2><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">taken from <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">examples/example_geometry_complex_to_planar_subdivision.cpp</div></p></blockquote><div style=\"margin:auto\"><img src=\"/images/tess/planar-sub-1.png\" style=\"height:250px;margin:auto\"/></div><p class=\"css-0\">The example demonstrates usage of different linear containers (including the packaged non standard <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">dynamic_array</div>).<div class=\"css-0\"></div>\n<!-- -->The example also demonstrates different number types such as fixed point integer(<style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><div class=\"css-gy3xy5\">Q</div></strong> numbers), float and doubles.<div class=\"css-0\"></div>\n<!-- -->Tessellation computation is only <strong class=\"css-10ircq3\">16</strong> lines of code.  </p><p class=\"css-0\">I use the <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div></strong> project to render the tessellation.  </p><p class=\"css-0\">Tessellation is happening at lines <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">#45</div>-<div class=\"css-gy3xy5\">#65</div></p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-c++\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">1</span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> MICROGL_USE_EXTERNAL_MICRO_TESS</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">2</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">3</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">4</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/bitmaps/bitmap.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">5</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">6</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">7</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/math/Q.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">8</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">9</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/planarize_division.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">10</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/static_array.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">11</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/dynamic_array.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">12</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/chunker.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">13</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/std_rebind_allocator.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">14</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;vector&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">15</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">16</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> item&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">17</span><span></span><span style=\"color:#B45EA4\">using</span><span> fixed_static_array = static_array&lt;item, </span><span style=\"color:#E7CE56\">10000</span><span>&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">18</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">19</span><span></span><span style=\"color:#B6B18B\">// containers for collections of points (polygons) </span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">20</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">21</span><span></span><span style=\"color:#B45EA4\">using</span><span> </span><span style=\"color:#B45EA4\">chunker_t</span><span> = allocator_aware_chunker&lt;vertex2&lt;number&gt;, dynamic_array&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">22</span><span></span><span style=\"color:#B6B18B\">//using chunker_t = allocator_aware_chunker&lt;vertex2&lt;number&gt;, std::vector&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">23</span><span></span><span style=\"color:#B6B18B\">//using chunker_t = non_allocator_aware_chunker&lt;vertex2&lt;number&gt;, fixed_static_array&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">24</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">25</span><span></span><span style=\"color:#B6B18B\">// containers templates for output containers</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">26</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> item&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">27</span><span></span><span style=\"color:#B45EA4\">using</span><span> container = dynamic_array&lt;item&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">28</span><span></span><span style=\"color:#B6B18B\">//using container = std::vector&lt;item&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">29</span><span></span><span style=\"color:#B6B18B\">//using container = static_array&lt;item, 10000&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">30</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">31</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">32</span><span>container&lt;vertex2&lt;number&gt;&gt; box(</span><span style=\"color:#B45EA4\">float</span><span> left, </span><span style=\"color:#B45EA4\">float</span><span> top, </span><span style=\"color:#B45EA4\">float</span><span> right,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">33</span><span>                               </span><span style=\"color:#B45EA4\">float</span><span> bottom, </span><span style=\"color:#B45EA4\">bool</span><span> ccw=</span><span style=\"color:#E7CE56\">false</span><span>) {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">34</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> il = </span><span style=\"color:#E7CE56\">std</span><span>::</span><span style=\"color:#E7CE56\">initializer_list</span><span>&lt;vertex2&lt;number&gt;&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">35</span><span>    </span><span style=\"color:#B45EA4\">if</span><span>(!ccw)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">36</span><span>        </span><span style=\"color:#B45EA4\">return</span><span> il{{left,top}, {right,top}, {right,bottom}, {left,bottom}};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">37</span><span>    </span><span style=\"color:#B45EA4\">return</span><span> il{{left,top}, {left,bottom}, {right,bottom}, {right,top}};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">38</span>};\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">39</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">40</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">41</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">chunker_t</span><span class=\"hljs-function\">&lt;number&gt; </span><span class=\"hljs-function\" style=\"color:#78BB65\">poly_inter_star_2</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span class=\"hljs-function\"> </span><span>{\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">42</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> il = </span><span style=\"color:#E7CE56\">std</span><span>::</span><span style=\"color:#E7CE56\">initializer_list</span><span>&lt;vertex2&lt;number&gt;&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">43</span><span>    </span><span style=\"color:#B45EA4\">chunker_t</span><span>&lt;number&gt; A;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">44</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">45</span><span>    A.push_back_and_cut(il{{</span><span style=\"color:#E7CE56\">150</span><span>, </span><span style=\"color:#E7CE56\">150</span><span>}, {</span><span style=\"color:#E7CE56\">450</span><span>,</span><span style=\"color:#E7CE56\">150</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">46</span><span>                            {</span><span style=\"color:#E7CE56\">200</span><span>,</span><span style=\"color:#E7CE56\">450</span><span>}, {</span><span style=\"color:#E7CE56\">300</span><span>,</span><span style=\"color:#E7CE56\">50</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">47</span><span>                            {</span><span style=\"color:#E7CE56\">400</span><span>,</span><span style=\"color:#E7CE56\">450</span><span>}});\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">48</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">49</span><span>    A.push_back_and_cut(il{{</span><span style=\"color:#E7CE56\">150</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>, </span><span style=\"color:#E7CE56\">150</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>}, {</span><span style=\"color:#E7CE56\">450</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>,</span><span style=\"color:#E7CE56\">150</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">50</span><span>                            {</span><span style=\"color:#E7CE56\">200</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>,</span><span style=\"color:#E7CE56\">450</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>}, {</span><span style=\"color:#E7CE56\">300</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>,</span><span style=\"color:#E7CE56\">50</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">51</span><span>                            {</span><span style=\"color:#E7CE56\">400</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>,</span><span style=\"color:#E7CE56\">450</span><span>/</span><span style=\"color:#E7CE56\">2</span><span>}});\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">52</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">53</span><span>    A.push_back_and_cut(il{{</span><span style=\"color:#E7CE56\">150</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>, </span><span style=\"color:#E7CE56\">150</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>}, {</span><span style=\"color:#E7CE56\">450</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>,</span><span style=\"color:#E7CE56\">150</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">54</span><span>                            {</span><span style=\"color:#E7CE56\">200</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>,</span><span style=\"color:#E7CE56\">450</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>}, {</span><span style=\"color:#E7CE56\">300</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>,</span><span style=\"color:#E7CE56\">50</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">55</span><span>                            {</span><span style=\"color:#E7CE56\">400</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>,</span><span style=\"color:#E7CE56\">450</span><span>/</span><span style=\"color:#E7CE56\">10</span><span>}});\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">56</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">57</span><span>    A.push_back_and_cut(box&lt;number&gt;(</span><span style=\"color:#E7CE56\">50</span><span>,</span><span style=\"color:#E7CE56\">50</span><span>,</span><span style=\"color:#E7CE56\">300</span><span>,</span><span style=\"color:#E7CE56\">300</span><span>, </span><span style=\"color:#E7CE56\">false</span><span>));\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">58</span><span>    A.push_back_and_cut(box&lt;number&gt;(</span><span style=\"color:#E7CE56\">50</span><span>,</span><span style=\"color:#E7CE56\">250</span><span>,</span><span style=\"color:#E7CE56\">600</span><span>,</span><span style=\"color:#E7CE56\">300</span><span>, </span><span style=\"color:#E7CE56\">true</span><span>));\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">59</span><span>    A.push_back_and_cut(box&lt;number&gt;(</span><span style=\"color:#E7CE56\">50</span><span>,</span><span style=\"color:#E7CE56\">450</span><span>,</span><span style=\"color:#E7CE56\">100</span><span>,</span><span style=\"color:#E7CE56\">500</span><span>, </span><span style=\"color:#E7CE56\">true</span><span>));\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">60</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">61</span><span>    </span><span style=\"color:#B45EA4\">return</span><span> A;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">62</span>}\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">63</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">64</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">main</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span class=\"hljs-function\"> </span><span>{\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">65</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">66</span><span>    </span><span style=\"color:#B6B18B\">// using number = double;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">67</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;2&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">68</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;4&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">69</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;8&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">70</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">71</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;15&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">72</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;16&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">73</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">74</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">75</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;RGB888_PACKED_32&gt;&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">76</span><span>    sampling::flat_color&lt;&gt; color_red {{</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>}};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">77</span><span>    </span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">78</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">79</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">80</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> render_polygon = [&amp;](</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">chunker_t</span><span>&lt;number&gt; &amp; pieces) {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">81</span><span>        </span><span style=\"color:#B45EA4\">using</span><span> index = </span><span style=\"color:#B45EA4\">unsigned</span><span> </span><span style=\"color:#B45EA4\">int</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">82</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">83</span><span>        </span><span style=\"color:#B6B18B\">// Algorithm START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">84</span><span>        </span><span style=\"color:#B6B18B\">// output tess vertices</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">85</span>        container&lt;vertex2&lt;number&gt;&gt; output_vertices;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">86</span><span>        </span><span style=\"color:#B6B18B\">// output tess indices</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">87</span>        container&lt;index&gt; output_indices;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">88</span><span>        </span><span style=\"color:#B6B18B\">// output optional approximate trapezes</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">89</span>        container&lt;vertex2&lt;number&gt;&gt; output_optional_approximate_trapezes;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">90</span><span>        </span><span style=\"color:#B6B18B\">// output optional boundary info</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">91</span>        container&lt;microtess::triangles::boundary_info&gt; output_boundary;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">92</span><span>        </span><span style=\"color:#B6B18B\">// output triangles indices type</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">93</span>        microtess::triangles::indices output_triangles_type;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">94</span><span>        </span><span style=\"color:#B6B18B\">// optional computation allocator</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">95</span>        microtess::std_rebind_allocator&lt;&gt; allocator;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">96</span><span>        </span><span style=\"color:#B6B18B\">// define algorithm</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">97</span><span>        </span><span style=\"color:#B45EA4\">using</span><span> psd = microtess::planarize_division&lt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">98</span>                            number,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">99</span><span>                            </span><span style=\"color:#B45EA4\">decltype</span><span>(output_vertices),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">100</span><span>                            </span><span style=\"color:#B45EA4\">decltype</span><span>(output_indices),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">101</span><span>                            </span><span style=\"color:#B45EA4\">decltype</span><span>(output_boundary)&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">102</span><span>                            </span><span style=\"color:#B45EA4\">decltype</span><span>(allocator)&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">103</span><span>        </span><span style=\"color:#B6B18B\">// compute algorithm</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">104</span><span>        psd::</span><span style=\"color:#B45EA4\">template</span><span> compute&lt;</span><span style=\"color:#B45EA4\">decltype</span><span>(pieces)&gt;(pieces,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">105</span>                        microtess::fill_rule::even_odd,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">106</span>                        microtess::tess_quality::better,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">107</span>                        output_vertices, \n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">108</span>                        output_triangles_type, \n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">109</span>                        output_indices,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">110</span>                        &amp;output_boundary, \n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">111</span>                        &amp;output_optional_approximate_trapezes,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">112</span>                        allocator);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">113</span><span>        </span><span style=\"color:#B6B18B\">// Algorithm END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">114</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">115</span><span>        canvas.</span><span style=\"color:#E7CE56\">clear</span><span>({</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">116</span><span>        canvas.drawTriangles&lt;blendmode::Normal, porterduff::None&lt;&gt;, </span><span style=\"color:#E7CE56\">false</span><span>&gt;(\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">117</span>                color_red,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">118</span>                matrix_3x3&lt;number&gt;::identity(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">119</span>                output_vertices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">120</span><span>                (vertex2&lt;number&gt; *)</span><span style=\"color:#E7CE56\">nullptr</span><span>,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">121</span>                output_indices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">122</span>                output_boundary.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">123</span><span>                output_indices.</span><span style=\"color:#E7CE56\">size</span><span>(),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">124</span>                output_triangles_type,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">125</span><span>                </span><span style=\"color:#E7CE56\">255</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">126</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">127</span><span>        canvas.drawTrianglesWireframe({</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">128</span>                            matrix_3x3&lt;number&gt;::identity(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">129</span>                            output_vertices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">130</span>                            output_indices.data(),\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">131</span><span>                            output_indices.</span><span style=\"color:#E7CE56\">size</span><span>(),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">132</span>                            output_triangles_type,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">133</span><span>                            </span><span style=\"color:#E7CE56\">40</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">134</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">135</span><span>        </span><span style=\"color:#B45EA4\">for</span><span> (index ix = </span><span style=\"color:#E7CE56\">0</span><span>; ix &lt; output_optional_approximate_trapezes.</span><span style=\"color:#E7CE56\">size</span><span>(); ix+=</span><span style=\"color:#E7CE56\">4</span><span>)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">136</span><span>            canvas.drawWuLinePath({</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">137</span><span>                                  &amp;output_optional_approximate_trapezes[ix], </span><span style=\"color:#E7CE56\">4</span><span>, </span><span style=\"color:#E7CE56\">true</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">138</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">139</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">140</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;](</span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*) -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">141</span><span>        </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">auto</span><span> polygons = poly_inter_star_2&lt;number&gt;();\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">142</span>        render_polygon(polygons);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">143</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">144</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">145</span>    example_run(&amp;canvas, render);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">146</span>}\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">147</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">148</span>\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}