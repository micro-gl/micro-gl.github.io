{"pageProps":{"data":{"slug":"algorithms/bezier-patch","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bezier Patch Tessellator\"), \" can triangulate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BiQuadrartic\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BiCubic\"), \" 2D/3D surfaces.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Triangulates 3d surfaces, but usually used for 2d triangulation with ignoring the z component.\"), mdx(\"h4\", null, \"Notes\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Output attributes are stored in interleaved format in the supplied number container, example\\noutput = \", \"[x,y,z,u,v, x,y,z,u,v, x,y,z,u,v, ....]\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Output indices of triangulation is stored in a sperate indices container\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the type of triangulation is always TRIANGLES_STRIP to save memory\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Configurable horizontal/vertical Triangulation resolution\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Also interpolates correct UV coords\")), mdx(\"h4\", null, \"Algorithm input\"), mdx(\"p\", null, \"Input is\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"meshPoints\"), \" - array of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"9/16\"), \" vec3 for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"quadratic/cubic\"), \" respectively\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"uOrder/vOrder\"), \" - should be \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"3/4\"), \" for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"quadratic/cubic\"), \" respectively\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"uSamples/vSamples\"), \" - horizontal/vertical subdivisions count\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"out_vertices_attributes\"), \" - output container of attributes \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"[x,y,z,u,v,...]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"out_indices\"), \" - output container for indices\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"out_indices_type\"), \" - output triangles type\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"UV\"), \" bounding box\")), mdx(\"h2\", null, \"Example\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"taken from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"examples/example_draw_bezier_patch_raw.cpp\"))), mdx(\"div\", {\n    style: {\n      margin: \"auto\"\n    }\n  }, mdx(\"img\", {\n    src: \"/images/tess/bezier-patch.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  }), mdx(\"img\", {\n    src: \"/images/tess/bezier-patch-2.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  })), mdx(\"p\", null, \"The example demonstrates triangulating a BiCubic surface.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"I use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" project to render the tessellation.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The algorithm output:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"out_vertices_attributes\"), \" container, which holds the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"(x,y,z,u,v, ...)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"out_indices\"), \" container, which holds the triangulation indices\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"out_indices_type\"), \" container, which holds the triangluation type (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TRIANGLES_STRIP\"), \" always)\")), mdx(\"p\", null, \"Tessellation is happening at lines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#58\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#72\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c-lines_numbers\"\n  }, \"#define MICROGL_USE_EXTERNAL_MICRO_TESS\\n#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/bitmaps/bitmap.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n#include <microgl/samplers/texture.h>\\n#include <microgl/math/Q.h>\\n\\n#include <micro-tess/dynamic_array.h>\\n#include <micro-tess/vec3.h>\\n\\ntemplate <typename number>\\nmicrotess::vec3<number> * bi_cubic_1(){\\n    return new microtess::vec3<number>[4 * 4] {\\n            {1.0f,     0.0f,    0.0f},\\n            {170.66f,  0.0f,    0.0f},\\n            {341.333f, 0.0f,    0.0f},\\n            {512.0f,   0.0f,    0.0f},\\n\\n            {1.0f,     170.66f, 0.0f},\\n            {293.44f,  162.78f, 0.0f},\\n            {746.68f,  144.65f, 0.0f},\\n            {512.0f,   170.66f, 0.0f},\\n\\n            {1.0f,     341.33f, 0.0f},\\n            {383.12f,  327.69f, 0.0f},\\n            {1042.79f, 296.31f, 0.0f},\\n            {512.0f,   341.33f, 0.0f},\\n\\n            {1.0f,     512.0f,  0.0f},\\n            {170.66f,  512.0f,  0.0f},\\n            {341.333f, 512.0f,  0.0f},\\n            {512.0f,   512.0f,  0.0f}\\n    };\\n}\\n\\nint main() {\\n    using number = float;\\n    // using number = Q<16>;\\n    using index = unsigned int;\\n\\n    // microgl drawing setup START\\n    using Canvas24 = canvas<bitmap<coder::RGB888_PACKED_32>>;\\n    using Texture24 = sampling::texture<bitmap<coder::RGB888_ARRAY>, sampling::texture_filter::Bilinear>;\\n    Canvas24 canvas(640, 480);\\n    auto img_2 = Resources::loadImageFromCompressedPath(\\\"images/uv_512.png\\\");\\n    Texture24 tex_uv{new bitmap<coder::RGB888_ARRAY>(img_2.data, img_2.width, img_2.height)};\\n    // microgl drawing setup END\\n\\n    constexpr int samples = 20;\\n    constexpr bool debug = true;\\n\\n    auto draw_bezier_patch = [&](vertex3<number>* mesh) {\\n        // Algorithm START\\n        // output vertices attributes\\n        dynamic_array<number> output_attrib;\\n        // output indices\\n        dynamic_array<unsigned int> output_indices;\\n        // output triangles type\\n        microtess::triangles::indices output_indices_type;\\n        // define algorithm\\n        using tess= microtess::bezier_patch_tesselator<\\n                number, number,\\n                decltype(output_attrib),\\n                decltype(output_indices)>;\\n        // compute algorithm\\n        tess::compute(mesh, 4, 4, samples, samples, output_attrib,\\n                      output_indices, output_indices_type, 0, 0, 1, 1);\\n        // Algorithm END\\n        \\n        canvas.clear({255, 255, 255, 255});\\n\\n        // walk on pieces of triangles with inverting because it is a TRIANGLES_STRIP\\n        using vertex=microtess::vec2<number>;\\n        bool even = true;\\n        // we alternate order inorder to preserve CCW or CW,\\n        for (index ix = 0; ix < output_indices.size()-2; ++ix, even=!even) { \\n            index first_index   = (even ? output_indices[ix + 0] : output_indices[ix + 2]) * tess::ATTRIBUTES_COUNT;\\n            index second_index  = (even ? output_indices[ix + 1] : output_indices[ix + 1]) * tess::ATTRIBUTES_COUNT;\\n            index third_index   = (even ? output_indices[ix + 2] : output_indices[ix + 0]) * tess::ATTRIBUTES_COUNT;\\n\\n            vertex p1=vertex{output_attrib[first_index + tess::I_X], output_attrib[first_index + tess::I_Y]};\\n            vertex p2=vertex{output_attrib[second_index + tess::I_X], output_attrib[second_index + tess::I_Y]};\\n            vertex p3=vertex{output_attrib[third_index + tess::I_X], output_attrib[third_index + tess::I_Y]};\\n\\n            canvas.drawTriangle<>(\\n                    tex_uv,\\n                    p1.x, p1.y, output_attrib[first_index  + tess::I_U], output_attrib[first_index  + tess::I_V],\\n                    p2.x, p2.y, output_attrib[second_index + tess::I_U], output_attrib[second_index + tess::I_V],\\n                    p3.x, p3.y, output_attrib[third_index  + tess::I_U], output_attrib[third_index  + tess::I_V]);\\n            if(debug)\\n                canvas.drawTriangleWireframe<number>(color_t{0,0,0,255},\\n                    {output_attrib[first_index + tess::I_X], output_attrib[first_index + tess::I_Y]},\\n                    {output_attrib[second_index + tess::I_X], output_attrib[second_index + tess::I_Y]},\\n                    {output_attrib[third_index + tess::I_X], output_attrib[third_index + tess::I_Y]});\\n        }\\n    };\\n\\n    auto render = [&](void*, void*, void*) -> void {\\n        draw_bezier_patch(bi_cubic_1<number>());\\n    };\\n\\n    example_run(&canvas, render);\\n}\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Bezier Patch Tessellator</strong> can triangulate <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">BiQuadrartic</div> and <div class=\"css-gy3xy5\">BiCubic</div> 2D/3D surfaces.<div class=\"css-0\"></div>\n<!-- -->Triangulates 3d surfaces, but usually used for 2d triangulation with ignoring the z component.</p><h4 class=\"css-0\">Notes</h4><ol class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Output attributes are stored in interleaved format in the supplied number container, example\noutput = <!-- -->[x,y,z,u,v, x,y,z,u,v, x,y,z,u,v, ....]</li><li class=\"css-b0qdn7\">Output indices of triangulation is stored in a sperate indices container</li><li class=\"css-b0qdn7\">the type of triangulation is always TRIANGLES_STRIP to save memory</li><li class=\"css-b0qdn7\">Configurable horizontal/vertical Triangulation resolution</li><li class=\"css-b0qdn7\">Also interpolates correct UV coords</li></ol><h4 class=\"css-0\">Algorithm input</h4><p class=\"css-0\">Input is</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">meshPoints</strong> - array of <strong class=\"css-10ircq3\">9/16</strong> vec3 for <strong class=\"css-10ircq3\">quadratic/cubic</strong> respectively</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">uOrder/vOrder</strong> - should be <strong class=\"css-10ircq3\">3/4</strong> for <strong class=\"css-10ircq3\">quadratic/cubic</strong> respectively</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">uSamples/vSamples</strong> - horizontal/vertical subdivisions count</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">out_vertices_attributes</strong> - output container of attributes <strong class=\"css-10ircq3\">[x,y,z,u,v,...]</strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">out_indices</strong> - output container for indices</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">out_indices_type</strong> - output triangles type</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">UV</strong> bounding box</li></ul><h2 class=\"css-0\">Example</h2><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">taken from <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">examples/example_draw_bezier_patch_raw.cpp</div></p></blockquote><div style=\"margin:auto\"><img src=\"/images/tess/bezier-patch.png\" style=\"height:250px;display:inline-block\"/><img src=\"/images/tess/bezier-patch-2.png\" style=\"height:250px;display:inline-block\"/></div><p class=\"css-0\">The example demonstrates triangulating a BiCubic surface.<div class=\"css-0\"></div>\n<!-- -->I use the <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div> project to render the tessellation.<div class=\"css-0\"></div>\n<!-- -->The algorithm output:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Will fill The <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">out_vertices_attributes</div> container, which holds the <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">(x,y,z,u,v, ...)</strong></li><li class=\"css-b0qdn7\">Will fill The <div class=\"css-gy3xy5\">out_indices</div> container, which holds the triangulation indices</li><li class=\"css-b0qdn7\">Will fill The <div class=\"css-gy3xy5\">out_indices_type</div> container, which holds the triangluation type (<div class=\"css-gy3xy5\">TRIANGLES_STRIP</div> always)</li></ul><p class=\"css-0\">Tessellation is happening at lines <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">#58</div>-<div class=\"css-gy3xy5\">#72</div></p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-c\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">1</span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> MICROGL_USE_EXTERNAL_MICRO_TESS</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">2</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/Resources.h&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">3</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">4</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">5</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/bitmaps/bitmap.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">6</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">7</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_ARRAY.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">8</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/texture.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">9</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/math/Q.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">10</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">11</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/dynamic_array.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">12</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/vec3.h&gt;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">13</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">14</span><span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">15</span><span></span><span class=\"hljs-function\">microtess::vec3&lt;number&gt; * </span><span class=\"hljs-function\" style=\"color:#78BB65\">bi_cubic_1</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span>{\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">16</span><span>    </span><span style=\"color:#B45EA4\">return</span><span> </span><span style=\"color:#B45EA4\">new</span><span> microtess::vec3&lt;number&gt;[</span><span style=\"color:#E7CE56\">4</span><span> * </span><span style=\"color:#E7CE56\">4</span><span>] {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">17</span><span>            {</span><span style=\"color:#E7CE56\">1.0f</span><span>,     </span><span style=\"color:#E7CE56\">0.0f</span><span>,    </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">18</span><span>            {</span><span style=\"color:#E7CE56\">170.66f</span><span>,  </span><span style=\"color:#E7CE56\">0.0f</span><span>,    </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">19</span><span>            {</span><span style=\"color:#E7CE56\">341.333f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>,    </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">20</span><span>            {</span><span style=\"color:#E7CE56\">512.0f</span><span>,   </span><span style=\"color:#E7CE56\">0.0f</span><span>,    </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">21</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">22</span><span>            {</span><span style=\"color:#E7CE56\">1.0f</span><span>,     </span><span style=\"color:#E7CE56\">170.66f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">23</span><span>            {</span><span style=\"color:#E7CE56\">293.44f</span><span>,  </span><span style=\"color:#E7CE56\">162.78f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">24</span><span>            {</span><span style=\"color:#E7CE56\">746.68f</span><span>,  </span><span style=\"color:#E7CE56\">144.65f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">25</span><span>            {</span><span style=\"color:#E7CE56\">512.0f</span><span>,   </span><span style=\"color:#E7CE56\">170.66f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">26</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">27</span><span>            {</span><span style=\"color:#E7CE56\">1.0f</span><span>,     </span><span style=\"color:#E7CE56\">341.33f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">28</span><span>            {</span><span style=\"color:#E7CE56\">383.12f</span><span>,  </span><span style=\"color:#E7CE56\">327.69f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">29</span><span>            {</span><span style=\"color:#E7CE56\">1042.79f</span><span>, </span><span style=\"color:#E7CE56\">296.31f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">30</span><span>            {</span><span style=\"color:#E7CE56\">512.0f</span><span>,   </span><span style=\"color:#E7CE56\">341.33f</span><span>, </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">31</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">32</span><span>            {</span><span style=\"color:#E7CE56\">1.0f</span><span>,     </span><span style=\"color:#E7CE56\">512.0f</span><span>,  </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">33</span><span>            {</span><span style=\"color:#E7CE56\">170.66f</span><span>,  </span><span style=\"color:#E7CE56\">512.0f</span><span>,  </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">34</span><span>            {</span><span style=\"color:#E7CE56\">341.333f</span><span>, </span><span style=\"color:#E7CE56\">512.0f</span><span>,  </span><span style=\"color:#E7CE56\">0.0f</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">35</span><span>            {</span><span style=\"color:#E7CE56\">512.0f</span><span>,   </span><span style=\"color:#E7CE56\">512.0f</span><span>,  </span><span style=\"color:#E7CE56\">0.0f</span><span>}\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">36</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">37</span>}\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">38</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">39</span><span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">main</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span class=\"hljs-function\"> </span><span>{\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">40</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">41</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;16&gt;;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">42</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> index = </span><span style=\"color:#B45EA4\">unsigned</span><span> </span><span style=\"color:#B45EA4\">int</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">43</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">44</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">45</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> Canvas24 = canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">46</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> Texture24 = sampling::texture&lt;bitmap&lt;coder::RGB888_ARRAY&gt;, sampling::texture_filter::Bilinear&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">47</span><span>    </span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">48</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> img_2 = Resources::loadImageFromCompressedPath(</span><span style=\"color:#4FB4D7\">&quot;images/uv_512.png&quot;</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">49</span><span>    Texture24 tex_uv{</span><span style=\"color:#B45EA4\">new</span><span> bitmap&lt;coder::RGB888_ARRAY&gt;(img_2.data, img_2.width, img_2.height)};\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">50</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">51</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">52</span><span>    </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">int</span><span> samples = </span><span style=\"color:#E7CE56\">20</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">53</span><span>    </span><span style=\"color:#B45EA4\">constexpr</span><span> </span><span style=\"color:#B45EA4\">bool</span><span> debug = </span><span style=\"color:#E7CE56\">true</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">54</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">55</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> draw_bezier_patch = [&amp;](vertex3&lt;number&gt;* mesh) {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">56</span><span>        </span><span style=\"color:#B6B18B\">// Algorithm START</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">57</span><span>        </span><span style=\"color:#B6B18B\">// output vertices attributes</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">58</span>        dynamic_array&lt;number&gt; output_attrib;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">59</span><span>        </span><span style=\"color:#B6B18B\">// output indices</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">60</span><span>        dynamic_array&lt;</span><span style=\"color:#B45EA4\">unsigned</span><span> </span><span style=\"color:#B45EA4\">int</span><span>&gt; output_indices;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">61</span><span>        </span><span style=\"color:#B6B18B\">// output triangles type</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">62</span>        microtess::triangles::indices output_indices_type;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">63</span><span>        </span><span style=\"color:#B6B18B\">// define algorithm</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">64</span><span>        </span><span style=\"color:#B45EA4\">using</span><span> tess= microtess::bezier_patch_tesselator&lt;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">65</span>                number, number,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">66</span><span>                </span><span style=\"color:#B45EA4\">decltype</span><span>(output_attrib),\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">67</span><span>                </span><span style=\"color:#B45EA4\">decltype</span><span>(output_indices)&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">68</span><span>        </span><span style=\"color:#B6B18B\">// compute algorithm</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">69</span><span>        tess::compute(mesh, </span><span style=\"color:#E7CE56\">4</span><span>, </span><span style=\"color:#E7CE56\">4</span><span>, samples, samples, output_attrib,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">70</span><span>                      output_indices, output_indices_type, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>, </span><span style=\"color:#E7CE56\">1</span><span>);\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">71</span><span>        </span><span style=\"color:#B6B18B\">// Algorithm END</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">72</span>        \n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">73</span><span>        canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">74</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">75</span><span>        </span><span style=\"color:#B6B18B\">// walk on pieces of triangles with inverting because it is a TRIANGLES_STRIP</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">76</span><span>        </span><span style=\"color:#B45EA4\">using</span><span> vertex=microtess::vec2&lt;number&gt;;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">77</span><span>        </span><span style=\"color:#B45EA4\">bool</span><span> even = </span><span style=\"color:#E7CE56\">true</span><span>;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">78</span><span>        </span><span style=\"color:#B6B18B\">// we alternate order inorder to preserve CCW or CW,</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">79</span><span>        </span><span style=\"color:#B45EA4\">for</span><span> (index ix = </span><span style=\"color:#E7CE56\">0</span><span>; ix &lt; output_indices.size()</span><span style=\"color:#E7CE56\">-2</span><span>; ++ix, even=!even) { \n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">80</span><span>            index first_index   = (even ? output_indices[ix + </span><span style=\"color:#E7CE56\">0</span><span>] : output_indices[ix + </span><span style=\"color:#E7CE56\">2</span><span>]) * tess::ATTRIBUTES_COUNT;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">81</span><span>            index second_index  = (even ? output_indices[ix + </span><span style=\"color:#E7CE56\">1</span><span>] : output_indices[ix + </span><span style=\"color:#E7CE56\">1</span><span>]) * tess::ATTRIBUTES_COUNT;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">82</span><span>            index third_index   = (even ? output_indices[ix + </span><span style=\"color:#E7CE56\">2</span><span>] : output_indices[ix + </span><span style=\"color:#E7CE56\">0</span><span>]) * tess::ATTRIBUTES_COUNT;\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">83</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">84</span>            vertex p1=vertex{output_attrib[first_index + tess::I_X], output_attrib[first_index + tess::I_Y]};\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">85</span>            vertex p2=vertex{output_attrib[second_index + tess::I_X], output_attrib[second_index + tess::I_Y]};\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">86</span>            vertex p3=vertex{output_attrib[third_index + tess::I_X], output_attrib[third_index + tess::I_Y]};\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">87</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">88</span>            canvas.drawTriangle&lt;&gt;(\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">89</span>                    tex_uv,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">90</span>                    p1.x, p1.y, output_attrib[first_index  + tess::I_U], output_attrib[first_index  + tess::I_V],\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">91</span>                    p2.x, p2.y, output_attrib[second_index + tess::I_U], output_attrib[second_index + tess::I_V],\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">92</span>                    p3.x, p3.y, output_attrib[third_index  + tess::I_U], output_attrib[third_index  + tess::I_V]);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">93</span><span>            </span><span style=\"color:#B45EA4\">if</span><span>(debug)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">94</span><span>                canvas.drawTriangleWireframe&lt;number&gt;(</span><span style=\"color:#B45EA4\">color_t</span><span>{</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">95</span>                    {output_attrib[first_index + tess::I_X], output_attrib[first_index + tess::I_Y]},\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">96</span>                    {output_attrib[second_index + tess::I_X], output_attrib[second_index + tess::I_Y]},\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">97</span>                    {output_attrib[third_index + tess::I_X], output_attrib[third_index + tess::I_Y]});\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">98</span>        }\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">99</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">100</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">101</span><span>    </span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;](</span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*) -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">102</span>        draw_bezier_patch(bi_cubic_1&lt;number&gt;());\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">103</span>    };\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">104</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">105</span>    example_run(&amp;canvas, render);\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">106</span>}\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none\">107</span>\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}