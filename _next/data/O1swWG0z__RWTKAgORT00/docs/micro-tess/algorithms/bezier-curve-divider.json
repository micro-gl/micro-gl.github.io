{"pageProps":{"data":{"slug":"algorithms/bezier-curve-divider","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bezier Curve Divider\"), \" can split/intepolate points on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Quadrartic\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cubic\"), \" bezier curve.\"), mdx(\"h4\", null, \"Algorithm input\"), mdx(\"p\", null, \"Input is\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Plain simple array pointer of the bezier curve (3/4 points for quadratic/cubic respectively)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enum specifying the curve type - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"microtess::CurveType::Quadratic\"), \" or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"microtess::CurveType::Cubic\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enum specifying the algorithm subdivison strategy - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"microtess::CurveDivisionAlgorithm::\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Output container for created vertices\")), mdx(\"h4\", null, \"Algorithm startegy\"), mdx(\"p\", null, \"There are two types of subdivision startegies, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Uniform\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Adaptive\"), \", both have their pros\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"and cons. Uniform subdivisions are poplular and tend to create more points at cusps of curves,\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"while Adaptive subdivisions try to smartly subdivide the curve with fewer subdivisions to achieve\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"better results. For each type of startegy, we offer 3 quality levels. But remember, that the best\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"quality is usually application dependent\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"microtess::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Small\"), \" - Highest quality for adaptive based on distance to real curve\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"microtess::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Medium\"), \" - Medium quality for adaptive based on distance to real curve\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"microtess::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Large\"), \" - Lowest quality for adaptive based on distance to real curve\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"microtess::CurveDivisionAlgorithm::Uniform_64\"), \" - Highest quality for uniform subdivision\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"microtess::CurveDivisionAlgorithm::Uniform_32\"), \" - Medium quality for uniform subdivision\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"microtess::CurveDivisionAlgorithm::Uniform_16\"), \" - Lowest quality for uniform subdivision\")), mdx(\"h2\", null, \"Example\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"taken from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"examples/example_geometry_bezier_curve_divider.cpp\"))), mdx(\"img\", {\n    src: \"/images/tess/bezier_curve_divider.png\",\n    style: {\n      height: \"250px\",\n      margin: \"auto\"\n    }\n  }), mdx(\"p\", null, \"The example demonstrates usage of different linear containers (including the packaged non standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dynamic_array\"), \").\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The example also demonstrates different number types such as fixed point integer(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Q\"), \" numbers), float and doubles.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Tessellation computation is only \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"16\"), \" lines of code.  \"), mdx(\"p\", null, \"I use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" project to render the tessellation.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The algorithm output:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will fill The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"output_vertices\"), \" container, which holds the subdivisions vertices\")), mdx(\"p\", null, \"Tessellation is happening at lines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#45\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#54\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c++\"\n  }, \"#define MICROGL_USE_EXTERNAL_MICRO_TESS\\n#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/bitmaps/bitmap.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/flat_color.h>\\n\\n#include <micro-tess/curve_divider.h>\\n#include <micro-tess/static_array.h>\\n#include <micro-tess/dynamic_array.h>\\n#include <vector>\\n\\ntemplate<typename item_type>\\n//using container = static_array<item_type, 100>;\\nusing container = dynamic_array<item_type>;\\n//using container = std::vector<item_type>;\\n\\ntemplate <typename number>\\ncontainer<vertex2<number>> curve_cubic_1() {\\n    using il=std::initializer_list<vertex2<number>>;\\n    using vertex=vertex2<number>;\\n    return il{{5, H - 5}, {W/8, H/4}, {W/3, H/2}, {W/2, H/2}};\\n}\\n\\nint main() {\\n    using number = float;\\n    // using number = Q<12>;\\n\\n    // microgl drawing setup START\\n    using Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\n    sampling::flat_color<> red{{255, 0, 0, 255}};\\n    Canvas24 canvas(640, 480);\\n    // microgl drawing setup END\\n\\n    const auto render_cubic_1 = [&](container<vertex2<number>> curve) {\\n        static number t = 0;\\n        t += number(0.08);\\n        curve[1].y -= t;\\n        \\n        // Algorithm START\\n        // output vertices\\n        container<vertex2<number>> output_vertices;\\n        // algorithm strategy\\n        auto algo_type = microtess::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Medium;\\n        // the type of the curve\\n        auto curve_type = microtess::CurveType::Cubic;\\n        // define algorithm\\n        using curve_divider = microtess::curve_divider<\\n                                    number, \\n                                    decltype(output_vertices)>;\\n        // compute\\n        curve_divider::compute(curve.data(), \\n                               output_vertices, \\n                               algo_type, curve_type);\\n        // Algorithm END\\n\\n        canvas.clear({255,255,255,255});\\n        canvas.drawWuLinePath(\\n                {0,0,0,255},\\n                output_vertices.data(), output_vertices.size(),\\n                false);\\n\\n        for (auto & p : output_vertices)\\n            canvas.drawCircle<>(\\n                    red, red, p.x, p.y, number{5}, number{0});\\n    };\\n\\n    auto render = [&](void*, void*, void*) -> void {\\n        render_cubic_1(curve_cubic_1<number>());\\n    };\\n\\n    example_run(&canvas, render);\\n}\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Bezier Curve Divider</strong> can split/intepolate points on a <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">Quadrartic</div> and <div class=\"css-gy3xy5\">Cubic</div> bezier curve.</p><h4 class=\"css-0\">Algorithm input</h4><p class=\"css-0\">Input is</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Plain simple array pointer of the bezier curve (3/4 points for quadratic/cubic respectively)</li><li class=\"css-b0qdn7\">Enum specifying the curve type - <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">microtess::CurveType::Quadratic</strong> or <strong class=\"css-10ircq3\">microtess::CurveType::Cubic</strong></li><li class=\"css-b0qdn7\">Enum specifying the algorithm subdivison strategy - <strong class=\"css-10ircq3\">microtess::CurveDivisionAlgorithm::</strong></li><li class=\"css-b0qdn7\">Output container for created vertices</li></ul><h4 class=\"css-0\">Algorithm startegy</h4><p class=\"css-0\">There are two types of subdivision startegies, <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Uniform</strong> and <strong class=\"css-10ircq3\">Adaptive</strong>, both have their pros<div class=\"css-0\"></div>\n<!-- -->and cons. Uniform subdivisions are poplular and tend to create more points at cusps of curves,<div class=\"css-0\"></div>\n<!-- -->while Adaptive subdivisions try to smartly subdivide the curve with fewer subdivisions to achieve<div class=\"css-0\"></div>\n<!-- -->better results. For each type of startegy, we offer 3 quality levels. But remember, that the best<div class=\"css-0\"></div>\n<!-- -->quality is usually application dependent</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">microtess::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Small</strong> - Highest quality for adaptive based on distance to real curve</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">microtess::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Medium</strong> - Medium quality for adaptive based on distance to real curve</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">microtess::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Large</strong> - Lowest quality for adaptive based on distance to real curve</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">microtess::CurveDivisionAlgorithm::Uniform_64</strong> - Highest quality for uniform subdivision</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">microtess::CurveDivisionAlgorithm::Uniform_32</strong> - Medium quality for uniform subdivision</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">microtess::CurveDivisionAlgorithm::Uniform_16</strong> - Lowest quality for uniform subdivision</li></ul><h2 class=\"css-0\">Example</h2><style data-emotion=\"css 1rh9a91\">.css-1rh9a91{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:pink.400;}</style><blockquote class=\"css-1rh9a91\"><p class=\"css-0\">taken from <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">examples/example_geometry_bezier_curve_divider.cpp</div></p></blockquote><img src=\"/images/tess/bezier_curve_divider.png\" style=\"height:250px;margin:auto\"/><p class=\"css-0\">The example demonstrates usage of different linear containers (including the packaged non standard <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">dynamic_array</div>).<div class=\"css-0\"></div>\n<!-- -->The example also demonstrates different number types such as fixed point integer(<div class=\"css-gy3xy5\">Q</div> numbers), float and doubles.<div class=\"css-0\"></div>\n<!-- -->Tessellation computation is only <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">16</strong> lines of code.  </p><p class=\"css-0\">I use the <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">microgl</div> project to render the tessellation.<div class=\"css-0\"></div>\n<!-- -->The algorithm output:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Will fill The <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">output_vertices</div> container, which holds the subdivisions vertices</li></ul><p class=\"css-0\">Tessellation is happening at lines <style data-emotion=\"css gy3xy5\">.css-gy3xy5{color:pink.600;display:inline;}</style><div class=\"css-gy3xy5\">#45</div>-<div class=\"css-gy3xy5\">#54</div></p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-c++\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">define</span><span style=\"color:#E7CE56\"> MICROGL_USE_EXTERNAL_MICRO_TESS</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&quot;src/example.h&quot;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/bitmaps/bitmap.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/curve_divider.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/static_array.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;micro-tess/dynamic_array.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;vector&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> item_type&gt;\n</span><span></span><span style=\"color:#B6B18B\">//using container = static_array&lt;item_type, 100&gt;;</span><span>\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> container = dynamic_array&lt;item_type&gt;;\n</span><span></span><span style=\"color:#B6B18B\">//using container = std::vector&lt;item_type&gt;;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span>container&lt;vertex2&lt;number&gt;&gt; curve_cubic_1() {\n<span>    </span><span style=\"color:#B45EA4\">using</span><span> il=</span><span style=\"color:#E7CE56\">std</span><span>::</span><span style=\"color:#E7CE56\">initializer_list</span><span>&lt;vertex2&lt;number&gt;&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> vertex=vertex2&lt;number&gt;;\n</span><span>    </span><span style=\"color:#B45EA4\">return</span><span> il{{</span><span style=\"color:#E7CE56\">5</span><span>, H - </span><span style=\"color:#E7CE56\">5</span><span>}, {W/</span><span style=\"color:#E7CE56\">8</span><span>, H/</span><span style=\"color:#E7CE56\">4</span><span>}, {W/</span><span style=\"color:#E7CE56\">3</span><span>, H/</span><span style=\"color:#E7CE56\">2</span><span>}, {W/</span><span style=\"color:#E7CE56\">2</span><span>, H/</span><span style=\"color:#E7CE56\">2</span><span>}};\n</span>}\n<!-- -->\n<span></span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">main</span><span class=\"hljs-function\" style=\"color:#E7CE56\">()</span><span class=\"hljs-function\"> </span><span>{\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span>    </span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span>\n<span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup START</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span>    sampling::flat_color&lt;&gt; red{{</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>}};\n</span><span>    </span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#E7CE56\">640</span><span class=\"hljs-function\" style=\"color:#E7CE56\">, </span><span class=\"hljs-function\" style=\"color:#E7CE56\">480</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span><span>    </span><span style=\"color:#B6B18B\">// microgl drawing setup END</span><span>\n</span>\n<span>    </span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">auto</span><span> render_cubic_1 = [&amp;](container&lt;vertex2&lt;number&gt;&gt; curve) {\n</span><span>        </span><span style=\"color:#B45EA4\">static</span><span> number t = </span><span style=\"color:#E7CE56\">0</span><span>;\n</span><span>        t += number(</span><span style=\"color:#E7CE56\">0.08</span><span>);\n</span><span>        curve[</span><span style=\"color:#E7CE56\">1</span><span>].y -= t;\n</span>        \n<span>        </span><span style=\"color:#B6B18B\">// Algorithm START</span><span>\n</span><span>        </span><span style=\"color:#B6B18B\">// output vertices</span><span>\n</span>        container&lt;vertex2&lt;number&gt;&gt; output_vertices;\n<span>        </span><span style=\"color:#B6B18B\">// algorithm strategy</span><span>\n</span><span>        </span><span style=\"color:#B45EA4\">auto</span><span> algo_type = microtess::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Medium;\n</span><span>        </span><span style=\"color:#B6B18B\">// the type of the curve</span><span>\n</span><span>        </span><span style=\"color:#B45EA4\">auto</span><span> curve_type = microtess::CurveType::Cubic;\n</span><span>        </span><span style=\"color:#B6B18B\">// define algorithm</span><span>\n</span><span>        </span><span style=\"color:#B45EA4\">using</span><span> curve_divider = microtess::curve_divider&lt;\n</span>                                    number, \n<span>                                    </span><span style=\"color:#B45EA4\">decltype</span><span>(output_vertices)&gt;;\n</span><span>        </span><span style=\"color:#B6B18B\">// compute</span><span>\n</span>        curve_divider::compute(curve.data(), \n<!-- -->                               output_vertices, \n<!-- -->                               algo_type, curve_type);\n<span>        </span><span style=\"color:#B6B18B\">// Algorithm END</span><span>\n</span>\n<span>        canvas.</span><span style=\"color:#E7CE56\">clear</span><span>({</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>});\n</span>        canvas.drawWuLinePath(\n<span>                {</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">0</span><span>,</span><span style=\"color:#E7CE56\">255</span><span>},\n</span><span>                output_vertices.data(), output_vertices.</span><span style=\"color:#E7CE56\">size</span><span>(),\n</span><span>                </span><span style=\"color:#E7CE56\">false</span><span>);\n</span>\n<span>        </span><span style=\"color:#B45EA4\">for</span><span> (</span><span style=\"color:#B45EA4\">auto</span><span> &amp; p : output_vertices)\n</span>            canvas.drawCircle&lt;&gt;(\n<span>                    red, red, p.x, p.y, number{</span><span style=\"color:#E7CE56\">5</span><span>}, number{</span><span style=\"color:#E7CE56\">0</span><span>});\n</span>    };\n<!-- -->\n<span>    </span><span style=\"color:#B45EA4\">auto</span><span> render = [&amp;](</span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*, </span><span style=\"color:#B45EA4\">void</span><span>*) -&gt; </span><span style=\"color:#B45EA4\">void</span><span> {\n</span>        render_cubic_1(curve_cubic_1&lt;number&gt;());\n<!-- -->    };\n<!-- -->\n<!-- -->    example_run(&amp;canvas, render);\n<!-- -->}\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}