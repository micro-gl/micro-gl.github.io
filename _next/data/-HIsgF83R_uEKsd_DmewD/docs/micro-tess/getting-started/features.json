{"pageProps":{"data":{"slug":"getting-started/features","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Language\"), \" \", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"C++11\")), \", does not use any \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"STL\")), \" library and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"standard library\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Headers only\"), \" library\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Most functions are templates, which means you compile only what is used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Compile-time polymorphism (no runtime virtual methods)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Support for 32 bits and 64 bits\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Self contained and modular.\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Geometry\"), \" \", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"BiQuadratic\"), \"/\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"BiCubic\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Bezier Patch\"), \" triangle Tessellation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Quadratic\"), \"/\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Cubic\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Bezier\"), \" curve divider\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Elliptic Arc Divider\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Ear Clipping\"), \" Tessellation for Simple (convex or concave) polygons\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"X/Y Montone\"), \" Tessellation for Monotone polygons\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Fan Triangulation\"), \" for Convex polygons\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Stroke Tessellation\"), \" with \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"dashes\"), \" (also supported with Path object)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Fill Tessellation\"), \" for any type of multi polygons using \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"even-odd\"), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"non-zero\"), \" rule\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Path\"), \" object to easily define \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"vector graphics\"), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"tessellate\"), \" them using \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"fill\"), \" or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"stroke\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Extra\"), \" \", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\", \"\\xA0\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Packed with fixed precision numbers \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Q\"), \" class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Computes boundary information for quick AA.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Packed with triangles iterator for regular, fan and strip batch triangles\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Packed with many working examples\"))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Language</strong> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">C++11</div></strong>, does not use any <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">STL</div></strong> library and <strong class=\"css-10ircq3\">standard library</strong>.</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Headers only</strong> library</li><li class=\"css-b0qdn7\">Most functions are templates, which means you compile only what is used</li><li class=\"css-b0qdn7\">Compile-time polymorphism (no runtime virtual methods)</li><li class=\"css-b0qdn7\">Support for 32 bits and 64 bits</li><li class=\"css-b0qdn7\">Self contained and modular.</li></ul></blockquote><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Geometry</strong> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">BiQuadratic</strong>/<strong class=\"css-10ircq3\">BiCubic</strong> <strong class=\"css-10ircq3\">Bezier Patch</strong> triangle Tessellation</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Quadratic</strong>/<strong class=\"css-10ircq3\">Cubic</strong> <strong class=\"css-10ircq3\">Bezier</strong> curve divider</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Elliptic Arc Divider</strong></li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Ear Clipping</strong> Tessellation for Simple (convex or concave) polygons</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">X/Y Montone</strong> Tessellation for Monotone polygons</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Fan Triangulation</strong> for Convex polygons</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Stroke Tessellation</strong> with <strong class=\"css-10ircq3\">dashes</strong> (also supported with Path object)</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Fill Tessellation</strong> for any type of multi polygons using <strong class=\"css-10ircq3\">even-odd</strong> and <strong class=\"css-10ircq3\">non-zero</strong> rule</li><li class=\"css-b0qdn7\"><strong class=\"css-10ircq3\">Path</strong> object to easily define <strong class=\"css-10ircq3\">vector graphics</strong> and <strong class=\"css-10ircq3\">tessellate</strong> them using <strong class=\"css-10ircq3\">fill</strong> or <strong class=\"css-10ircq3\">stroke</strong></li></ul></blockquote><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Extra</strong> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Packed with fixed precision numbers <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">Q</div> class</li><li class=\"css-b0qdn7\">Computes boundary information for quick AA.</li><li class=\"css-b0qdn7\">Packed with triangles iterator for regular, fan and strip batch triangles</li><li class=\"css-b0qdn7\">Packed with many working examples</li></ul></blockquote>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}