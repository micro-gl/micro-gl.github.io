{"pageProps":{"data":{"slug":"getting-started/setup","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, \"There are various ways, that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microgl\")), \" can be consumed and used\"), mdx(\"h2\", null, \"Installing \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"micro{gl}\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" is a headers only library, which gives the following install possibilities:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cmake\"), \" to invoke the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"install\"), \" target, that will copy everything in your system via\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ mkdir cmake-build-release\\n$ cd cmake-build-release\\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\\n$ cmake --install .\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Copying the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"include/microgl\"), \" to anywhere you want.\")), mdx(\"h2\", null, \"Consuming \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"micro{gl}\")), mdx(\"p\", null, \"Following options are available:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"copy the project to a sub folder of your project. inside your \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"CMakeLists.txt\")), \" add\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"add_subdirectory(/path/to/microgl)\\ntarget_link_libraries(your_app microgl)\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If you installed \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"micro{gl}\")), \" with option 1 (see above) at your system, you can instead\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"find_package(microgl CONFIG REQUIRED)\\ntarget_link_libraries(your_app microgl::microgl)\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If you have not installed, you can add in your app's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CMakeLists.txt\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"target_include_directories(app path/to/microgl/folder/include/)\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If you manually copied the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"include/microgl\"), \" to the default system include path,\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"you can use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cmake/Findmicrogl.cmake\"), \" to automatically create the cmake targets\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/path/to/Findmicrogl/folder)\\nfind_package(microgl REQUIRED)\\ntarget_link_libraries(your_app microgl::microgl)\\n\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Just copy the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"include/microgl\"), \" into a sub folder of your project and include the header\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"files you need with relative path in your source files.\")), mdx(\"h2\", null, \"Running Examples\"), mdx(\"p\", null, \"First make sure you have \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.libsdl.org/\"\n  }, \"SDL2\"), \" installed at your system.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://cmake.org/download/\"\n  }, \"cmake\"), \" installed at your system.\")), mdx(\"p\", null, \"There are two ways:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use your favourite IDE to load the root \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CMakeLists.txt\"), \" file, and then it\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"will pick up all of the targets, including the examples\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using the command line:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ mkdir cmake-build-release\\n$ cd cmake-build-release\\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\\n$ cmake --build . --target <example_name>\\n$ ../examples/bin/example_name\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\">There are various ways, that <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div></strong> can be consumed and used</p><h2 class=\"css-0\">Installing <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">micro{gl}</div></h2><p class=\"css-0\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div> is a headers only library, which gives the following install possibilities:</p><ol class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Using <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">cmake</div> to invoke the <div class=\"css-qskmz3\">install</div> target, that will copy everything in your system via</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-bash\" style=\"white-space:pre\"><span>$ mkdir cmake-build-release\n</span><span>$ </span><span style=\"color:#E7CE56\">cd</span><span> cmake-build-release\n</span>$ cmake -DCMAKE_BUILD_TYPE=Release ..\n<!-- -->$ cmake --install .\n<!-- -->\n</code></pre></pre><ol start=\"2\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Copying the <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">include/microgl</div> to anywhere you want.</li></ol><h2 class=\"css-0\">Consuming <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">micro{gl}</div></h2><p class=\"css-0\">Following options are available:</p><ol class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">copy the project to a sub folder of your project. inside your <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">CMakeLists.txt</div></strong> add</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">add_subdirectory</span><span>(/path/to/microgl)\n</span><span></span><span style=\"color:#B45EA4\">target_link_libraries</span><span>(your_app microgl)\n</span>\n</code></pre></pre><ol start=\"2\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">If you installed <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">micro{gl}</div></strong> with option 1 (see above) at your system, you can instead</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">find_package</span><span>(microgl CONFIG REQUIRED)\n</span><span></span><span style=\"color:#B45EA4\">target_link_libraries</span><span>(your_app microgl::microgl)\n</span>\n</code></pre></pre><ol start=\"3\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">If you have not installed, you can add in your app&#x27;s <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">CMakeLists.txt</div></li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">target_include_directories</span><span>(app path/to/microgl/folder/</span><span style=\"color:#B45EA4\">include</span><span>/)\n</span>\n</code></pre></pre><ol start=\"4\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">If you manually copied the <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">include/microgl</div> to the default system include path,<div class=\"css-0\"></div>you can use <div class=\"css-qskmz3\">cmake/Findmicrogl.cmake</div> to automatically create the cmake targets</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span style=\"color:#B45EA4\">list</span><span>(APPEND CMAKE_MODULE_PATH </span><span style=\"color:#EB3C54\">${PROJECT_SOURCE_DIR}</span><span>/path/to/Findmicrogl/folder)\n</span><span></span><span style=\"color:#B45EA4\">find_package</span><span>(microgl REQUIRED)\n</span><span></span><span style=\"color:#B45EA4\">target_link_libraries</span><span>(your_app microgl::microgl)\n</span>\n</code></pre></pre><ol start=\"5\" class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Just copy the <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">include/microgl</div> into a sub folder of your project and include the header<div class=\"css-0\"></div>files you need with relative path in your source files.</li></ol><h2 class=\"css-0\">Running Examples</h2><p class=\"css-0\">First make sure you have </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css 1kc89wa\">.css-1kc89wa{color:purple.500;}</style><a class=\"chakra-link css-1kc89wa\" href=\"https://www.libsdl.org/\">SDL2</a> installed at your system.  </li><li class=\"css-b0qdn7\"><a class=\"chakra-link css-1kc89wa\" href=\"https://cmake.org/download/\">cmake</a> installed at your system.</li></ul><p class=\"css-0\">There are two ways:</p><ol class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Use your favourite IDE to load the root <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">CMakeLists.txt</div> file, and then it<div class=\"css-0\"></div>will pick up all of the targets, including the examples</li><li class=\"css-b0qdn7\">Using the command line:</li></ol><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-bash\" style=\"white-space:pre\"><span>$ mkdir cmake-build-release\n</span><span>$ </span><span style=\"color:#E7CE56\">cd</span><span> cmake-build-release\n</span>$ cmake -DCMAKE_BUILD_TYPE=Release ..\n<!-- -->$ cmake --build . --target &lt;example_name&gt;\n<!-- -->$ ../examples/bin/example_name\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}