{"pageProps":{"data":{"slug":"algorithms/bezier-patch","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    br: \"br\",\n    h4: \"h4\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Bezier Patch Tessellator\"\n      }), \" can triangulate \", _jsx(_components.code, {\n        children: \"BiQuadrartic\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"BiCubic\"\n      }), \" 2D/3D surfaces.\", _jsx(_components.br, {}), \"\\n\", \"Triangulates 3d surfaces, but usually used for 2d triangulation with ignoring the z component.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Notes\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Output attributes are stored in interleaved format in the supplied number container, example\\noutput = [x,y,z,u,v, x,y,z,u,v, x,y,z,u,v, ....]\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Output indices of triangulation is stored in a sperate indices container\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"the type of triangulation is always TRIANGLES_STRIP to save memory\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Configurable horizontal/vertical Triangulation resolution\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Also interpolates correct UV coords\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Algorithm input\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Input is\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"meshPoints\"\n        }), \" - array of \", _jsx(_components.strong, {\n          children: \"9/16\"\n        }), \" vec3 for \", _jsx(_components.strong, {\n          children: \"quadratic/cubic\"\n        }), \" respectively\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"uOrder/vOrder\"\n        }), \" - should be \", _jsx(_components.strong, {\n          children: \"3/4\"\n        }), \" for \", _jsx(_components.strong, {\n          children: \"quadratic/cubic\"\n        }), \" respectively\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"uSamples/vSamples\"\n        }), \" - horizontal/vertical subdivisions count\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"out_vertices_attributes\"\n        }), \" - output container of attributes \", _jsx(_components.strong, {\n          children: \"[x,y,z,u,v,...]\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"out_indices\"\n        }), \" - output container for indices\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"out_indices_type\"\n        }), \" - output triangles type\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"UV\"\n        }), \" bounding box\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Example\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"taken from \", _jsx(_components.code, {\n          children: \"examples/example_draw_bezier_patch_raw.cpp\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(\"div\", {\n      style: {\n        margin: \"auto\"\n      },\n      children: [_jsx(\"img\", {\n        src: \"/images/tess/bezier-patch.png\",\n        style: {\n          height: \"250px\",\n          display: \"inline-block\"\n        }\n      }), _jsx(\"img\", {\n        src: \"/images/tess/bezier-patch-2.png\",\n        style: {\n          height: \"250px\",\n          display: \"inline-block\"\n        }\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The example demonstrates triangulating a BiCubic surface.\", _jsx(_components.br, {}), \"\\n\", \"I use the \", _jsx(_components.code, {\n        children: \"microgl\"\n      }), \" project to render the tessellation.\", _jsx(_components.br, {}), \"\\n\", \"The algorithm output:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Will fill The \", _jsx(_components.code, {\n          children: \"out_vertices_attributes\"\n        }), \" container, which holds the \", _jsx(_components.strong, {\n          children: \"(x,y,z,u,v, ...)\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Will fill The \", _jsx(_components.code, {\n          children: \"out_indices\"\n        }), \" container, which holds the triangulation indices\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Will fill The \", _jsx(_components.code, {\n          children: \"out_indices_type\"\n        }), \" container, which holds the triangluation type (\", _jsx(_components.code, {\n          children: \"TRIANGLES_STRIP\"\n        }), \" always)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Tessellation is happening at lines \", _jsx(_components.code, {\n        children: \"#58\"\n      }), \"-\", _jsx(_components.code, {\n        children: \"#72\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp&lines=58-72&showLinesNumbers\",\n        children: \"#define MICROGL_USE_EXTERNAL_MICRO_TESS\\n#include \\\"src/Resources.h\\\"\\n#include \\\"src/example.h\\\"\\n#include <microgl/canvas.h>\\n#include <microgl/bitmaps/bitmap.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/pixel_coders/RGB888_ARRAY.h>\\n#include <microgl/samplers/texture.h>\\n#include <microgl/math/Q.h>\\n\\n#include <micro-tess/dynamic_array.h>\\n#include <micro-tess/vec3.h>\\n\\ntemplate <typename number>\\nmicrotess::vec3<number> * bi_cubic_1(){\\n    return new microtess::vec3<number>[4 * 4] {\\n            {1.0f,     0.0f,    0.0f},\\n            {170.66f,  0.0f,    0.0f},\\n            {341.333f, 0.0f,    0.0f},\\n            {512.0f,   0.0f,    0.0f},\\n\\n            {1.0f,     170.66f, 0.0f},\\n            {293.44f,  162.78f, 0.0f},\\n            {746.68f,  144.65f, 0.0f},\\n            {512.0f,   170.66f, 0.0f},\\n\\n            {1.0f,     341.33f, 0.0f},\\n            {383.12f,  327.69f, 0.0f},\\n            {1042.79f, 296.31f, 0.0f},\\n            {512.0f,   341.33f, 0.0f},\\n\\n            {1.0f,     512.0f,  0.0f},\\n            {170.66f,  512.0f,  0.0f},\\n            {341.333f, 512.0f,  0.0f},\\n            {512.0f,   512.0f,  0.0f}\\n    };\\n}\\n\\nint main() {\\n    using number = float;\\n    // using number = Q<16>;\\n    using index = unsigned int;\\n\\n    // microgl drawing setup START\\n    using Canvas24 = canvas<bitmap<coder::RGB888_PACKED_32>>;\\n    using Texture24 = sampling::texture<bitmap<coder::RGB888_ARRAY>, sampling::texture_filter::Bilinear>;\\n    Canvas24 canvas(640, 480);\\n    auto img_2 = Resources::loadImageFromCompressedPath(\\\"images/uv_512.png\\\");\\n    Texture24 tex_uv{new bitmap<coder::RGB888_ARRAY>(img_2.data, img_2.width, img_2.height)};\\n    // microgl drawing setup END\\n\\n    constexpr int samples = 20;\\n    constexpr bool debug = true;\\n\\n    auto draw_bezier_patch = [&](vertex3<number>* mesh) {\\n        // Algorithm START\\n        // output vertices attributes\\n        dynamic_array<number> output_attrib;\\n        // output indices\\n        dynamic_array<unsigned int> output_indices;\\n        // output triangles type\\n        microtess::triangles::indices output_indices_type;\\n        // define algorithm\\n        using tess= microtess::bezier_patch_tesselator<\\n                number, number,\\n                decltype(output_attrib),\\n                decltype(output_indices)>;\\n        // compute algorithm\\n        tess::compute(mesh, 4, 4, samples, samples, output_attrib,\\n                      output_indices, output_indices_type, 0, 0, 1, 1);\\n        // Algorithm END\\n        \\n        canvas.clear({255, 255, 255, 255});\\n\\n        // walk on pieces of triangles with inverting because it is a TRIANGLES_STRIP\\n        using vertex=microtess::vec2<number>;\\n        bool even = true;\\n        // we alternate order inorder to preserve CCW or CW,\\n        for (index ix = 0; ix < output_indices.size()-2; ++ix, even=!even) { \\n            index first_index   = (even ? output_indices[ix + 0] : output_indices[ix + 2]) * tess::ATTRIBUTES_COUNT;\\n            index second_index  = (even ? output_indices[ix + 1] : output_indices[ix + 1]) * tess::ATTRIBUTES_COUNT;\\n            index third_index   = (even ? output_indices[ix + 2] : output_indices[ix + 0]) * tess::ATTRIBUTES_COUNT;\\n\\n            vertex p1=vertex{output_attrib[first_index + tess::I_X], output_attrib[first_index + tess::I_Y]};\\n            vertex p2=vertex{output_attrib[second_index + tess::I_X], output_attrib[second_index + tess::I_Y]};\\n            vertex p3=vertex{output_attrib[third_index + tess::I_X], output_attrib[third_index + tess::I_Y]};\\n\\n            canvas.drawTriangle<>(\\n                    tex_uv,\\n                    p1.x, p1.y, output_attrib[first_index  + tess::I_U], output_attrib[first_index  + tess::I_V],\\n                    p2.x, p2.y, output_attrib[second_index + tess::I_U], output_attrib[second_index + tess::I_V],\\n                    p3.x, p3.y, output_attrib[third_index  + tess::I_U], output_attrib[third_index  + tess::I_V]);\\n            if(debug)\\n                canvas.drawTriangleWireframe<number>(color_t{0,0,0,255},\\n                    {output_attrib[first_index + tess::I_X], output_attrib[first_index + tess::I_Y]},\\n                    {output_attrib[second_index + tess::I_X], output_attrib[second_index + tess::I_Y]},\\n                    {output_attrib[third_index + tess::I_X], output_attrib[third_index + tess::I_Y]});\\n        }\\n    };\\n\\n    auto render = [&](void*, void*, void*) -> void {\\n        draw_bezier_patch(bi_cubic_1<number>());\\n    };\\n\\n    example_run(&canvas, render);\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/micro-tess/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/micro-tess/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/micro-tess/numbers.mdx"},{"title":"Triangles","route":"concepts/triangles","path":"content/docs/micro-tess/triangles.mdx"}]},{"title":"Algorithms","items":[{"title":"Path Fill","route":"algorithms/path-fill","path":"content/docs/micro-tess/path-fill.mdx"},{"title":"Path Stroke","route":"algorithms/path-stroke","path":"content/docs/micro-tess/path-stroke.mdx"},{"title":"Planar Subdivision","route":"algorithms/planar-subdivision","path":"content/docs/micro-tess/planar-subdivision.mdx"},{"title":"Stroke Tessellation","route":"algorithms/stroke","path":"content/docs/micro-tess/stroke.mdx"},{"title":"Ear Clipping Triangulation","route":"algorithms/ear-clipping","path":"content/docs/micro-tess/ear-clipping.mdx"},{"title":"Monotone Triangulation","route":"algorithms/monotone","path":"content/docs/micro-tess/monotone.mdx"},{"title":"Fan Triangulation","route":"algorithms/fan","path":"content/docs/micro-tess/fan.mdx"},{"title":"Bezier Curve Divider","route":"algorithms/bezier-curve-divider","path":"content/docs/micro-tess/bezier-curve-divider.mdx"},{"title":"Elliptic Arc Divider","route":"algorithms/elliptic-arc-divider","path":"content/docs/micro-tess/elliptic-arc-divider.mdx"},{"title":"Bezier Patch","route":"algorithms/bezier-patch","path":"content/docs/micro-tess/bezier-patch.mdx"}]}],"__map":{"getting-started/setup":"content/docs/micro-tess/setup.mdx","getting-started/features":"content/docs/micro-tess/features.mdx","concepts/numbers":"content/docs/micro-tess/numbers.mdx","concepts/triangles":"content/docs/micro-tess/triangles.mdx","algorithms/path-fill":"content/docs/micro-tess/path-fill.mdx","algorithms/path-stroke":"content/docs/micro-tess/path-stroke.mdx","algorithms/planar-subdivision":"content/docs/micro-tess/planar-subdivision.mdx","algorithms/stroke":"content/docs/micro-tess/stroke.mdx","algorithms/ear-clipping":"content/docs/micro-tess/ear-clipping.mdx","algorithms/monotone":"content/docs/micro-tess/monotone.mdx","algorithms/fan":"content/docs/micro-tess/fan.mdx","algorithms/bezier-curve-divider":"content/docs/micro-tess/bezier-curve-divider.mdx","algorithms/elliptic-arc-divider":"content/docs/micro-tess/elliptic-arc-divider.mdx","algorithms/bezier-patch":"content/docs/micro-tess/bezier-patch.mdx"}}}},"__N_SSG":true}