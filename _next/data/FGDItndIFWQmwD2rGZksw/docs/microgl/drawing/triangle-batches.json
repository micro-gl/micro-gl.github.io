{"pageProps":{"data":{"slug":"drawing/triangle-batches","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Triangles Batches\"\n      }), \" are supported in \", _jsx(_components.code, {\n        children: \"microgl\"\n      }), \". This is a convenient way to draw\\nmany triangles with \", _jsx(_components.a, {\n        href: \"/docs/concepts/samplers\",\n        children: \"samplers\"\n      }), \", \", _jsx(_components.a, {\n        href: \"/docs/drawing/3d\",\n        children: \"3d-shaders\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"Wireframes\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Example at \", _jsx(_components.strong, {\n          children: _jsx(_components.code, {\n            children: \"/examples/example_draw_triangle.cpp\"\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/images/canvas_polygon.png\",\n      style: {\n        height: \"250px\",\n        margin: \"auto\"\n      }\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WIP\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Vertices buffer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WIP\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Indices buffer and type\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WIP\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Boundary buffer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WIP\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Usage Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WIP\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WIP\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Signature API\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-lang=cpp\",\n        children: \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n    /**\\n     * Draw 2d triangle batches. Given:\\n     * - vertex buffer, indices buffer, indices type, draw triangles.\\n     * - uvs are optional, and if are nullptr, the method will compute them alone.\\n     * - indices buffer are optional, and if are nullptr, the method will use vertex buffer as is.\\n     *\\n     * Supported batch strategies are:\\n     * - TRIANGLES - every 3 indices for a triangle\\n     * - FAN - the first index forms with every 2 other indices\\n     * - STRIP - the best for low memory when possible\\n     *\\n     * Indices array point to the vertex array and is an important concept, when you want\\n     * to draw a subset of vertices, or to construct triangles from a set of vertices\\n     *\\n     * @tparam BlendMode        the blend mode struct\\n     * @tparam PorterDuff       the alpha compositing struct\\n     * @tparam antialias        antialiasing flag\\n     * @tparam number1          number type of position\\n     * @tparam number2          number type of uv coords\\n     * @tparam Sampler1         sampler type for fill\\n     * @tparam Sampler2         sampler type for stroke\\n     *\\n     * @param sampler           fill sampler reference\\n     * @param transform         3x3 matrix transformation\\n     * @param vertices          pointer to points array\\n     * @param uvs               (Optional) pointer to uv array\\n     * @param indices           (Optional) pointer to indices array\\n     * @param boundary_buffer   (Optional) pointer to boundary buffer, used in quick anti-aliasing\\n     * @param size              size of indices buffer\\n     * @param type              type of indices buffer {TRIANGLES, FAN, TRIANGLES_STRIP}\\n     * @param opacity           opacity [0..255]\\n     * @param u0                uv coord\\n     * @param v0                uv coord\\n     * @param u1                uv coord\\n     * @param v1                uv coord\\n     */\\n    template<typename BlendMode=blendmode::Normal, \\n             typename PorterDuff=porterduff::FastSourceOverOnOpaque,\\n             bool antialias=false, \\n             typename number1=float, typename number2=float, \\n             typename Sampler>\\n    void drawTriangles(const Sampler & sampler,\\n                       const matrix_3x3<number1> &transform,\\n                       const vec2<number1> * vertices= nullptr,\\n                       const vec2<number2> * uvs=nullptr,\\n                       const index * indices= nullptr,\\n                       const boundary_info * boundary_buffer= nullptr,\\n                       index size=0,\\n                       enum indices type=indices::TRIANGLES,\\n                       opacity_t opacity=255,\\n                       const number2 &u0=number2(0), const number2 &v0=number2(1),\\n                       const number2 &u1=number2(1), const number2 &v1=number2(0));\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/microgl/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/microgl/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/microgl/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/microgl/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/microgl/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/microgl/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/microgl/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/microgl/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/microgl/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/microgl/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/microgl/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/microgl/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/microgl/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/microgl/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/microgl/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/microgl/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/microgl/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/microgl/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/microgl/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/microgl/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/microgl/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/microgl/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/microgl/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/microgl/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/microgl/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/microgl/draw-3d.mdx"}]}],"__map":{"getting-started/setup":"content/docs/microgl/setup.mdx","getting-started/features":"content/docs/microgl/features.mdx","concepts/numbers":"content/docs/microgl/numbers.mdx","concepts/math":"content/docs/microgl/math.mdx","concepts/rgba":"content/docs/microgl/rgba.mdx","concepts/pixel-coders":"content/docs/microgl/pixel-coders.mdx","concepts/samplers":"content/docs/microgl/samplers.mdx","concepts/composition":"content/docs/microgl/composition.mdx","concepts/bitmaps":"content/docs/microgl/bitmaps.mdx","concepts/3d":"content/docs/microgl/3d.mdx","concepts/canvas":"content/docs/microgl/canvas.mdx","drawing/rectangles":"content/docs/microgl/rectangles.mdx","drawing/rounded":"content/docs/microgl/rounded.mdx","drawing/quadrilaterals":"content/docs/microgl/quadrilaterals.mdx","drawing/triangle":"content/docs/microgl/triangle.mdx","drawing/triangle-batches":"content/docs/microgl/triangle-batches.mdx","drawing/polygons":"content/docs/microgl/polygons.mdx","drawing/masks":"content/docs/microgl/masks.mdx","drawing/path-fills":"content/docs/microgl/path-fills.mdx","drawing/path-stroke":"content/docs/microgl/path-stroke.mdx","drawing/bezier-patches":"content/docs/microgl/patches.mdx","drawing/lines":"content/docs/microgl/lines.mdx","drawing/text":"content/docs/microgl/text.mdx","drawing/gradients":"content/docs/microgl/gradients.mdx","drawing/more-samplers":"content/docs/microgl/more-samplers.mdx","drawing/3d":"content/docs/microgl/draw-3d.mdx"}}}},"__N_SSG":true}