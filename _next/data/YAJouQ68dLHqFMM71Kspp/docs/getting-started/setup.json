{"pageProps":{"data":{"slug":"getting-started/setup","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are various ways, that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"microgl\"), \" can be consumed and used\"), mdx(\"h2\", null, \"1. using \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"CMake\")), mdx(\"p\", null, \"download the project to a sub folder of your project. inside your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CMakeLists.txt\"), \" add  \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"  add_subdirectory(/path/to/microgl)\\n  target_link_libraries(app microgl)\\n\")), mdx(\"p\", null, \"if you installed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"micro{gl}\"), \" (see below) at your system, you can instead\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmake\"\n  }, \"  target_link_libraries(app path/to/microgl/static/file)\\n  target_include_directories(app path/to/microgl/include/)\\n\")), mdx(\"h2\", null, \"2. embed \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"micro{gl}\"), \" source code in your own build\"), mdx(\"p\", null, \"download the project to a local folder inside your project, preferably \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${YOUR_APP}/libs/microgl\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"then, make sure to:  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add files in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"microgl/src\"), \" to your compilation step\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"microgl/include/public/\"), \" to your include paths\")), mdx(\"h2\", null, \"3. use \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"CMake\"), \" to create a static lib\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ cd path/to/microgl\\n$ mkdir cake-build-release\\n$ cd cmake-build-release\\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\\n$ cmake --build . --target microgl\\n$ ../bin/libmicrogl.a # in unix like systems\\n\")), mdx(\"h2\", null, \"4. use \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"CMake\"), \" to create a shared lib\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ cd path/to/microgl\\n$ mkdir cake-build-release\\n$ cd cmake-build-release\\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\\n$ cmake --build . --target microgl-shared\\n$ ../bin/libmicrogl-shared.dylib # in unix like systems\\n\")), mdx(\"h2\", null, \"5. install \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"microGL\"), \" with \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"CMake\")), mdx(\"p\", null, \"this will install static and dynamic libs into the system (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/usr/local/\"), \" for unix like).\\nheader files will be copied as well (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/usr/local/include\"), \")\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ cd path/to/microgl\\n$ mkdir cmake-build-release\\n$ cd cmake-build-release\\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\\n$ cmake --build . --target install\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p class=\"css-0\">There are various ways, that <style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">microgl</div> can be consumed and used</p><h2 class=\"css-0\">1. using <em>CMake</em></h2><p class=\"css-0\">download the project to a sub folder of your project. inside your <style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">CMakeLists.txt</div> add  </p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span>  </span><span style=\"color:#B45EA4\">add_subdirectory</span><span>(/path/to/microgl)\n</span><span>  </span><span style=\"color:#B45EA4\">target_link_libraries</span><span>(app microgl)\n</span>\n</code></pre></pre><p class=\"css-0\">if you installed <style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">micro{gl}</div> (see below) at your system, you can instead</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cmake\" style=\"white-space:pre\"><span>  </span><span style=\"color:#B45EA4\">target_link_libraries</span><span>(app path/to/microgl/static/</span><span style=\"color:#B45EA4\">file</span><span>)\n</span><span>  </span><span style=\"color:#B45EA4\">target_include_directories</span><span>(app path/to/microgl/</span><span style=\"color:#B45EA4\">include</span><span>/)\n</span>\n</code></pre></pre><h2 class=\"css-0\">2. embed <em>micro{gl}</em> source code in your own build</h2><p class=\"css-0\">download the project to a local folder inside your project, preferably <style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">${YOUR_APP}/libs/microgl</div>.<div class=\"css-0\"></div>\n<!-- -->then, make sure to:  </p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">add files in <style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">microgl/src</div> to your compilation step</li><li class=\"css-b0qdn7\">add <div class=\"css-1pi5a8j\">microgl/include/public/</div> to your include paths</li></ul><h2 class=\"css-0\">3. use <em>CMake</em> to create a static lib</h2><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-bash\" style=\"white-space:pre\"><span>$ </span><span style=\"color:#E7CE56\">cd</span><span> path/to/microgl\n</span>$ mkdir cake-build-release\n<span>$ </span><span style=\"color:#E7CE56\">cd</span><span> cmake-build-release\n</span>$ cmake -DCMAKE_BUILD_TYPE=Release ..\n<!-- -->$ cmake --build . --target microgl\n<span>$ ../bin/libmicrogl.a </span><span style=\"color:#B6B18B\"># in unix like systems</span><span>\n</span>\n</code></pre></pre><h2 class=\"css-0\">4. use <em>CMake</em> to create a shared lib</h2><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-bash\" style=\"white-space:pre\"><span>$ </span><span style=\"color:#E7CE56\">cd</span><span> path/to/microgl\n</span>$ mkdir cake-build-release\n<span>$ </span><span style=\"color:#E7CE56\">cd</span><span> cmake-build-release\n</span>$ cmake -DCMAKE_BUILD_TYPE=Release ..\n<!-- -->$ cmake --build . --target microgl-shared\n<span>$ ../bin/libmicrogl-shared.dylib </span><span style=\"color:#B6B18B\"># in unix like systems</span><span>\n</span>\n</code></pre></pre><h2 class=\"css-0\">5. install <em>microGL</em> with <em>CMake</em></h2><p class=\"css-0\">this will install static and dynamic libs into the system (<style data-emotion=\"css 1pi5a8j\">.css-1pi5a8j{color:purple.500;display:inline;}</style><div class=\"css-1pi5a8j\">/usr/local/</div> for unix like).\nheader files will be copied as well (<div class=\"css-1pi5a8j\">/usr/local/include</div>)</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-bash\" style=\"white-space:pre\"><span>$ </span><span style=\"color:#E7CE56\">cd</span><span> path/to/microgl\n</span>$ mkdir cmake-build-release\n<span>$ </span><span style=\"color:#E7CE56\">cd</span><span> cmake-build-release\n</span>$ cmake -DCMAKE_BUILD_TYPE=Release ..\n<!-- -->$ cmake --build . --target install\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"setup","route":"getting-started/setup","path":"content/docs/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/features.mdx"},{"title":"Features2","route":"getting-started/features2","path":"content/docs/A/hello-world.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"},{"title":"Pixel coders","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"},{"title":"Samplers","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"},{"title":"Compostion","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"},{"title":"Canvas","route":"B/hello-world","path":"content/docs/B/hello-world.mdx"}]}],"__map":{"getting-started/setup":"content/docs/setup.mdx","getting-started/features":"content/docs/features.mdx","getting-started/features2":"content/docs/A/hello-world.mdx","B/hello-world":"content/docs/B/hello-world.mdx"}}}},"__N_SSG":true}