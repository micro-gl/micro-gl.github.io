{"pageProps":{"data":{"slug":"drawing/lines","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lines\"), \" are supported with Wu algorithm:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fast DDA algorithm, 1 pixel wide line\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"antialiasing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"not very accurate because it is a DDA type algorithm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support for batch lines\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"support for wireframe triangles\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Examples at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_draw_bezier_patch.cpp\")), \" \")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Examples at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"/examples/example_geometry_bezier_curve_divider.cpp\")), \" \")), mdx(\"div\", {\n    style: {\n      margin: \"auto\"\n    }\n  }, mdx(\"img\", {\n    src: \"/images/canvas_wu_lines.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  }), mdx(\"img\", {\n    src: \"/images/canvas_wu_lines_2.png\",\n    style: {\n      height: \"250px\",\n      display: \"inline-block\"\n    }\n  })), mdx(\"h1\", null, \"Usage Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <microgl/canvas.h>\\n#include <microgl/pixel_coders/RGB888_PACKED_32.h>\\n#include <microgl/samplers/flat_color.h>\\n\\nusing number = float;\\n// using number = Q<12>;\\nusing vertex = vec2<number>;\\nusing Canvas24= canvas<bitmap<coder::RGB888_PACKED_32>>;\\nusing curve_divider = microgl::tessellation::curve_divider<number>;\\n\\nsampling::flat_color<> red{{255, 0, 0, 255}};\\nCanvas24 canvas(W, H);\\ndynamic_array<vertex> output{};\\nvertex cubic_curve[4] = {{5, H - 5}, {W/8, H/4}, \\n                         {W/3, H/2}, {W/2, H/2}}\\n\\nauto algo = microgl::tessellation::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Medium;\\nauto type = microgl::tessellation::CurveType::Cubic;\\n\\ncurve_divider::compute(cubic_curve, output, algo, type);\\n\\ncanvas.clear({255, 255, 255, 255});\\ncanvas.drawWuLinePath(\\n        {0, 0, 0, 255},\\n        output.data(), output.size(),\\n        false);\\n\\nfor (int ix = 0; ix < output.size(); ++ix) {\\n        const auto & p = output[ix];\\n        canvas.drawCircle<blendmode::Normal, porterduff::FastSourceOverOnOpaque, true>(\\n                red, red, p.x, p.y, number{5}, number{0});\\n}\\n\\n\")), mdx(\"h1\", null, \"Signature API\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"/**\\n * @tparam bitmap_type  the bitmap type\\n * @tparam options      the options bitset\\n */\\ntemplate<typename bitmap_type, uint8_t options=CANVAS_OPT_default>\\nclass canvas {\\npublic:\\n    /**\\n     * Draw a Wu-line between two points\\n     *\\n     * @tparam number   number type of positions\\n     *\\n     * @param color     the color\\n     * @param x0        1st point x\\n     * @param y0        1st point y\\n     * @param x1        2nd point x\\n     * @param y1        2nd point y\\n     * @param opacity   opacity [0..255]\\n     */\\n    template<typename number>\\n    void drawWuLine(const color_t & color,\\n                    const number &x0, const number &y0, \\n                    const number &x1, const number &y1,\\n                    opacity_t opacity=255);\\n\\n    /**\\n     * Draw a Wu-line path\\n     * @tparam number       number type for positions\\n     *\\n     * @param color         the color\\n     * @param points        the points array pointer\\n     * @param size          the size of the points array\\n     * @param closed_path   is the path closed ?\\n     */\\n    template <typename number>\\n    void drawWuLinePath(const color_t & color,\\n                        const vec2<number> *points,\\n                        unsigned int size = 4,\\n                        bool closed_path = false);\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Lines</strong> are supported with Wu algorithm:</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\">Fast DDA algorithm, 1 pixel wide line</li><li class=\"css-b0qdn7\">antialiasing</li><li class=\"css-b0qdn7\">not very accurate because it is a DDA type algorithm</li><li class=\"css-b0qdn7\">support for batch lines</li><li class=\"css-b0qdn7\">support for wireframe triangles</li></ul><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">Examples at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">/examples/example_draw_bezier_patch.cpp</div></strong> </p></blockquote><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">Examples at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">/examples/example_geometry_bezier_curve_divider.cpp</div></strong> </p></blockquote><div style=\"margin:auto\"><img src=\"/images/canvas_wu_lines.png\" style=\"height:250px;display:inline-block\"/><img src=\"/images/canvas_wu_lines_2.png\" style=\"height:250px;display:inline-block\"/></div><h1 class=\"css-0\">Usage Example</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/canvas.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/pixel_coders/RGB888_PACKED_32.h&gt;</span><span>\n</span><span></span><span style=\"color:#E7CE56\">#</span><span class=\"hljs-meta-keyword\" style=\"color:#E7CE56\">include</span><span style=\"color:#E7CE56\"> </span><span class=\"hljs-meta-string\" style=\"color:#E7CE56\">&lt;microgl/samplers/flat_color.h&gt;</span><span>\n</span>\n<span></span><span style=\"color:#B45EA4\">using</span><span> number = </span><span style=\"color:#B45EA4\">float</span><span>;\n</span><span></span><span style=\"color:#B6B18B\">// using number = Q&lt;12&gt;;</span><span>\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> vertex = vec2&lt;number&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> Canvas24= canvas&lt;bitmap&lt;coder::RGB888_PACKED_32&gt;&gt;;\n</span><span></span><span style=\"color:#B45EA4\">using</span><span> curve_divider = microgl::tessellation::curve_divider&lt;number&gt;;\n</span>\n<span>sampling::flat_color&lt;&gt; red{{</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>}};\n</span><span></span><span class=\"hljs-function\">Canvas24 </span><span class=\"hljs-function\" style=\"color:#78BB65\">canvas</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(W, H)</span><span>;\n</span>dynamic_array&lt;vertex&gt; output{};\n<span>vertex cubic_curve[</span><span style=\"color:#E7CE56\">4</span><span>] = {{</span><span style=\"color:#E7CE56\">5</span><span>, H - </span><span style=\"color:#E7CE56\">5</span><span>}, {W/</span><span style=\"color:#E7CE56\">8</span><span>, H/</span><span style=\"color:#E7CE56\">4</span><span>}, \n</span><span>                         {W/</span><span style=\"color:#E7CE56\">3</span><span>, H/</span><span style=\"color:#E7CE56\">2</span><span>}, {W/</span><span style=\"color:#E7CE56\">2</span><span>, H/</span><span style=\"color:#E7CE56\">2</span><span>}}\n</span>\n<span></span><span style=\"color:#B45EA4\">auto</span><span> algo = microgl::tessellation::CurveDivisionAlgorithm::Adaptive_tolerance_distance_Medium;\n</span><span></span><span style=\"color:#B45EA4\">auto</span><span> type = microgl::tessellation::CurveType::Cubic;\n</span>\n<!-- -->curve_divider::compute(cubic_curve, output, algo, type);\n<!-- -->\n<span>canvas.clear({</span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>});\n</span>canvas.drawWuLinePath(\n<span>        {</span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">0</span><span>, </span><span style=\"color:#E7CE56\">255</span><span>},\n</span>        output.data(), output.size(),\n<span>        </span><span style=\"color:#E7CE56\">false</span><span>);\n</span>\n<span></span><span style=\"color:#B45EA4\">for</span><span> (</span><span style=\"color:#B45EA4\">int</span><span> ix = </span><span style=\"color:#E7CE56\">0</span><span>; ix &lt; output.size(); ++ix) {\n</span><span>        </span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">auto</span><span> &amp; p = output[ix];\n</span><span>        canvas.drawCircle&lt;blendmode::Normal, porterduff::FastSourceOverOnOpaque, </span><span style=\"color:#E7CE56\">true</span><span>&gt;(\n</span><span>                red, red, p.x, p.y, number{</span><span style=\"color:#E7CE56\">5</span><span>}, number{</span><span style=\"color:#E7CE56\">0</span><span>});\n</span>}\n<!-- -->\n<!-- -->\n</code></pre></pre><h1 class=\"css-0\">Signature API</h1><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\"> * @tparam bitmap_type  the bitmap type\n</span><span style=\"color:#B6B18B\"> * @tparam options      the options bitset\n</span><span style=\"color:#B6B18B\"> */</span><span>\n</span><span></span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> bitmap_type, </span><span style=\"color:#B45EA4\">uint8_t</span><span> options=CANVAS_OPT_default&gt;\n</span>class canvas {\n<span></span><span style=\"color:#B45EA4\">public</span><span>:\n</span><span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw a Wu-line between two points\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @tparam number   number type of positions\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param color     the color\n</span><span style=\"color:#B6B18B\">     * @param x0        1st point x\n</span><span style=\"color:#B6B18B\">     * @param y0        1st point y\n</span><span style=\"color:#B6B18B\">     * @param x1        2nd point x\n</span><span style=\"color:#B6B18B\">     * @param y1        2nd point y\n</span><span style=\"color:#B6B18B\">     * @param opacity   opacity [0..255]\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span>&lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">void</span><span> drawWuLine(</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">color_t</span><span> &amp; color,\n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number &amp;x0, </span><span style=\"color:#B45EA4\">const</span><span> number &amp;y0, \n</span><span>                    </span><span style=\"color:#B45EA4\">const</span><span> number &amp;x1, </span><span style=\"color:#B45EA4\">const</span><span> number &amp;y1,\n</span><span>                    </span><span style=\"color:#B45EA4\">opacity_t</span><span> opacity=</span><span style=\"color:#E7CE56\">255</span><span>);\n</span>\n<span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * Draw a Wu-line path\n</span><span style=\"color:#B6B18B\">     * @tparam number       number type for positions\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     * @param color         the color\n</span><span style=\"color:#B6B18B\">     * @param points        the points array pointer\n</span><span style=\"color:#B6B18B\">     * @param size          the size of the points array\n</span><span style=\"color:#B6B18B\">     * @param closed_path   is the path closed ?\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">typename</span><span> number&gt;\n</span><span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">drawWuLinePath</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp; color,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> vec2&lt;number&gt; *points,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">unsigned</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">int</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> size = </span><span class=\"hljs-function\" style=\"color:#E7CE56\">4</span><span class=\"hljs-function\" style=\"color:#E7CE56\">,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                        </span><span class=\"hljs-function\" style=\"color:#B45EA4\">bool</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> closed_path = </span><span class=\"hljs-function\" style=\"color:#E7CE56\">false</span><span class=\"hljs-function\" style=\"color:#E7CE56\">)</span><span>;\n</span>\n<!-- -->\n</code></pre></pre>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/draw-3d.mdx"}]},{"title":"Geometry","items":[{"title":"Intro","route":"geometry/intro","path":"content/docs/wip.mdx"}]}],"__map":{"getting-started/setup":"content/docs/setup.mdx","getting-started/features":"content/docs/features.mdx","concepts/numbers":"content/docs/numbers.mdx","concepts/math":"content/docs/math.mdx","concepts/rgba":"content/docs/rgba.mdx","concepts/pixel-coders":"content/docs/pixel-coders.mdx","concepts/samplers":"content/docs/samplers.mdx","concepts/composition":"content/docs/composition.mdx","concepts/bitmaps":"content/docs/bitmaps.mdx","concepts/3d":"content/docs/3d.mdx","concepts/canvas":"content/docs/canvas.mdx","drawing/rectangles":"content/docs/rectangles.mdx","drawing/rounded":"content/docs/rounded.mdx","drawing/quadrilaterals":"content/docs/quadrilaterals.mdx","drawing/triangle":"content/docs/triangle.mdx","drawing/triangle-batches":"content/docs/triangle-batches.mdx","drawing/polygons":"content/docs/polygons.mdx","drawing/masks":"content/docs/masks.mdx","drawing/path-fills":"content/docs/path-fills.mdx","drawing/path-stroke":"content/docs/path-stroke.mdx","drawing/bezier-patches":"content/docs/patches.mdx","drawing/lines":"content/docs/lines.mdx","drawing/text":"content/docs/text.mdx","drawing/gradients":"content/docs/gradients.mdx","drawing/more-samplers":"content/docs/more-samplers.mdx","drawing/3d":"content/docs/draw-3d.mdx","geometry/intro":"content/docs/wip.mdx"}}}},"__N_SSG":true}