{"pageProps":{"data":{"slug":"concepts/composition","content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"microgl\")), \" supports both color blending and alpha compositing.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" All methods in the blending and compositing structs have to be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"static\"))), mdx(\"h2\", null, \"Color blending\"), mdx(\"p\", null, \"Color blending is essentially a function that given two colors, a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"backdrop\"), \" color and a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"source\"), \" color\\nwill create a new color. The function can be anything you can think of.\\nThe basic struct interface for a blend mode is\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"struct Multiply_Blendmode {\\n\\n    template<uint8_t R, uint8_t G, uint8_t B>\\n    static inline void blend(const color_t & b,\\n                             const color_t & s,\\n                             color_t &output) {\\n\\n          output.r = mul_channels_correct<R>(b.r, s.r);\\n          output.g = mul_channels_correct<G>(b.g, s.g);\\n          output.b = mul_channels_correct<B>(b.b, s.b);\\n    }\\n}\\n\")), mdx(\"p\", null, \"Essentially, this is a struct with a template member method, that has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"R\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"G\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" depth into account.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"the colors are named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"b\")), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"s\")), \" as shorthand for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"backdrop\")), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"source\")))), mdx(\"p\", null, \"Out of the box, microgl is packed with the following \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"blend modes\"), \" implemented at\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/blend_modes/>\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Normal\"), \" (no blending at all)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Multiply\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Overlay\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PinLight\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Screen\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Subtract\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Darken\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Lighten\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Difference\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Divide\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ColorDodge\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Exclusion\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"HardLight\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"VividLight\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"HardMix\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LinearLight\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SoftLight\"))), mdx(\"h2\", null, \"Alpha Compositing\"), mdx(\"p\", null, \"Alpha compositing is the usage of alpha channel to implement compositing.\\nThe basic struct interface to implement is \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"struct my_compositor {\\n\\n    /**\\n     * @tparam bits the bits of the alpha channel\\n     * @tparam multiplied_alpha_result should the output color should be pre-multiplied alpha\\n     *\\n     */\\n    template <uint8_t bits, bool multiplied_alpha_result=true>\\n    inline static void composite(const color_t &b,\\n                                 const color_t &s,\\n                                 color_t &output) {\\n          // your implementation goes here\\n    }\\n\\n};\\n\\n\")), mdx(\"p\", null, \"microgl is shipping with all of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"porter duff\"), \" compositing operator, so it is recommended\\nto use our suggested implementations found at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<microgl/porter_duff/>\")), \" :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"None\"), \" (no compositing at all)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FastSourceOverOnOpaque\"), \" (recommended for fast regular alpha blending on opaque surface, not accurate)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SourceOver\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Source\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SourceAtop\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SourceIn\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SourceOut\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Destination\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DestinationAtop\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DestinationIn\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DestinationOut\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DestinationOver\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Lighter\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Clear\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Copy\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"XOR\"))), mdx(\"img\", {\n    src: \"/images/porter-duff.png\"\n  }));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1 class=\"css-0\">Introduction</h1><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">microgl</div></strong> supports both color blending and alpha compositing.</p><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\"><style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">Note:</strong> All methods in the blending and compositing structs have to be <strong class=\"css-10ircq3\">static</strong></p></blockquote><h2 class=\"css-0\">Color blending</h2><p class=\"css-0\">Color blending is essentially a function that given two colors, a <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\">backdrop</strong> color and a <strong class=\"css-10ircq3\">source</strong> color\nwill create a new color. The function can be anything you can think of.\nThe basic struct interface for a blend mode is</p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span class=\"hljs-class\" style=\"color:#B45EA4\">struct</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">Multiply_Blendmode</span><span class=\"hljs-class\"> {</span><span>\n</span>\n<span>    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">template</span><span class=\"hljs-function\">&lt;</span><span class=\"hljs-function\" style=\"color:#B45EA4\">uint8_t</span><span class=\"hljs-function\"> R, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">uint8_t</span><span class=\"hljs-function\"> G, </span><span class=\"hljs-function\" style=\"color:#B45EA4\">uint8_t</span><span class=\"hljs-function\"> B&gt;\n</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#B45EA4\">static</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">inline</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#78BB65\">blend</span><span class=\"hljs-function\" style=\"color:#E7CE56\">(</span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp; b,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                             </span><span class=\"hljs-function\" style=\"color:#B45EA4\">const</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp; s,\n</span><span class=\"hljs-function\" style=\"color:#E7CE56\">                             </span><span class=\"hljs-function\" style=\"color:#B45EA4\">color_t</span><span class=\"hljs-function\" style=\"color:#E7CE56\"> &amp;output)</span><span class=\"hljs-function\"> </span><span>{\n</span>\n<!-- -->          output.r = mul_channels_correct&lt;R&gt;(b.r, s.r);\n<!-- -->          output.g = mul_channels_correct&lt;G&gt;(b.g, s.g);\n<!-- -->          output.b = mul_channels_correct&lt;B&gt;(b.b, s.b);\n<!-- -->    }\n<!-- -->}\n<!-- -->\n</code></pre></pre><p class=\"css-0\">Essentially, this is a struct with a template member method, that has <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">R</div>, <div class=\"css-qskmz3\">G</div>, <div class=\"css-qskmz3\">B</div> depth into account.</p><style data-emotion=\"css naa80m\">.css-naa80m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:gray.800;background-color:gray.200;padding:2;padding-left:2px;border-radius:md;border-left-width:10px;border-left-color:purple.500;}</style><blockquote class=\"css-naa80m\"><p class=\"css-0\">the colors are named <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">b</div></strong> and <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">s</div></strong> as shorthand for <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">backdrop</div></strong> and <strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">source</div></strong></p></blockquote><p class=\"css-0\">Out of the box, microgl is packed with the following <em>blend modes</em> implemented at\n<style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">&lt;microgl/blend_modes/&gt;</div></strong></p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">Normal</div> (no blending at all)</li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Multiply</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Overlay</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">PinLight</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Screen</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Subtract</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Darken</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Lighten</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Difference</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Divide</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">ColorDodge</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Exclusion</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">HardLight</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">VividLight</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">HardMix</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">LinearLight</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">SoftLight</div></li></ul><h2 class=\"css-0\">Alpha Compositing</h2><p class=\"css-0\">Alpha compositing is the usage of alpha channel to implement compositing.\nThe basic struct interface to implement is </p><pre><pre style=\"display:block;overflow-x:auto;background:#1C1D21;color:#c0c5ce;padding:0.5em;border-radius:10px;padding-left:20px;padding-top:20px\"><code class=\"language-cpp\" style=\"white-space:pre\"><span class=\"hljs-class\" style=\"color:#B45EA4\">struct</span><span class=\"hljs-class\"> </span><span class=\"hljs-class\" style=\"color:#78BB65\">my_compositor</span><span class=\"hljs-class\"> {</span><span>\n</span>\n<span>    </span><span style=\"color:#B6B18B\">/**\n</span><span style=\"color:#B6B18B\">     * @tparam bits the bits of the alpha channel\n</span><span style=\"color:#B6B18B\">     * @tparam multiplied_alpha_result should the output color should be pre-multiplied alpha\n</span><span style=\"color:#B6B18B\">     *\n</span><span style=\"color:#B6B18B\">     */</span><span>\n</span><span>    </span><span style=\"color:#B45EA4\">template</span><span> &lt;</span><span style=\"color:#B45EA4\">uint8_t</span><span> bits, </span><span style=\"color:#B45EA4\">bool</span><span> multiplied_alpha_result=</span><span style=\"color:#E7CE56\">true</span><span>&gt;\n</span><span>    </span><span style=\"color:#B45EA4\">inline</span><span> </span><span style=\"color:#B45EA4\">static</span><span> </span><span style=\"color:#B45EA4\">void</span><span> composite(</span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">color_t</span><span> &amp;b,\n</span><span>                                 </span><span style=\"color:#B45EA4\">const</span><span> </span><span style=\"color:#B45EA4\">color_t</span><span> &amp;s,\n</span><span>                                 </span><span style=\"color:#B45EA4\">color_t</span><span> &amp;output) {\n</span><span>          </span><span style=\"color:#B6B18B\">// your implementation goes here</span><span>\n</span>    }\n<!-- -->\n<!-- -->};\n<!-- -->\n<!-- -->\n</code></pre></pre><p class=\"css-0\">microgl is shipping with all of the <style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">porter duff</div> compositing operator, so it is recommended\nto use our suggested implementations found at <style data-emotion=\"css 10ircq3\">.css-10ircq3{font-weight:semibold;}</style><strong class=\"css-10ircq3\"><div class=\"css-qskmz3\">&lt;microgl/porter_duff/&gt;</div></strong> :</p><ul class=\"css-0\"><style data-emotion=\"css b0qdn7\">.css-b0qdn7{padding-bottom:4px;}</style><li class=\"css-b0qdn7\"><style data-emotion=\"css qskmz3\">.css-qskmz3{color:purple.600;display:inline;}</style><div class=\"css-qskmz3\">None</div> (no compositing at all)</li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">FastSourceOverOnOpaque</div> (recommended for fast regular alpha blending on opaque surface, not accurate)</li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">SourceOver</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Source</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">SourceAtop</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">SourceIn</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">SourceOut</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Destination</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">DestinationAtop</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">DestinationIn</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">DestinationOut</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">DestinationOver</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Lighter</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Clear</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">Copy</div></li><li class=\"css-b0qdn7\"><div class=\"css-qskmz3\">XOR</div></li></ul><img src=\"/images/porter-duff.png\"/>","scope":{}},"frontMatter":{},"document":{"name":"docs","groups":[{"title":"Getting Started","items":[{"title":"Setup","route":"getting-started/setup","path":"content/docs/setup.mdx"},{"title":"Features","route":"getting-started/features","path":"content/docs/features.mdx"}]},{"title":"Concepts","items":[{"title":"Numbers","route":"concepts/numbers","path":"content/docs/numbers.mdx"},{"title":"Math","route":"concepts/math","path":"content/docs/math.mdx"},{"title":"RGBA","route":"concepts/rgba","path":"content/docs/rgba.mdx"},{"title":"Pixel Coders","route":"concepts/pixel-coders","path":"content/docs/pixel-coders.mdx"},{"title":"Samplers","route":"concepts/samplers","path":"content/docs/samplers.mdx"},{"title":"Composition","route":"concepts/composition","path":"content/docs/composition.mdx"},{"title":"Bitmaps","route":"concepts/bitmaps","path":"content/docs/bitmaps.mdx"},{"title":"3D Shaders","route":"concepts/3d","path":"content/docs/3d.mdx"},{"title":"Canvas","route":"concepts/canvas","path":"content/docs/canvas.mdx"}]},{"title":"Drawing","items":[{"title":"Rectangles","route":"drawing/rectangles","path":"content/docs/rectangles.mdx"},{"title":"Rounded Shapes","route":"drawing/rounded","path":"content/docs/rounded.mdx"},{"title":"Quadrilaterals","route":"drawing/quadrilaterals","path":"content/docs/quadrilaterals.mdx"},{"title":"Triangle","route":"drawing/triangle","path":"content/docs/triangle.mdx"},{"title":"Triangle Batches","route":"drawing/triangle-batches","path":"content/docs/triangle-batches.mdx"},{"title":"Polygons","route":"drawing/polygons","path":"content/docs/polygons.mdx"},{"title":"Masks","route":"drawing/masks","path":"content/docs/masks.mdx"},{"title":"Path Fills","route":"drawing/path-fills","path":"content/docs/path-fills.mdx"},{"title":"Path Strokes","route":"drawing/path-stroke","path":"content/docs/path-stroke.mdx"},{"title":"Bezier Patches","route":"drawing/bezier-patches","path":"content/docs/patches.mdx"},{"title":"Lines","route":"drawing/lines","path":"content/docs/lines.mdx"},{"title":"Text","route":"drawing/text","path":"content/docs/text.mdx"},{"title":"Gradients","route":"drawing/gradients","path":"content/docs/gradients.mdx"},{"title":"More Samplers","route":"drawing/more-samplers","path":"content/docs/more-samplers.mdx"},{"title":"3D","route":"drawing/3d","path":"content/docs/draw-3d.mdx"}]},{"title":"Geometry","items":[{"title":"Intro","route":"geometry/intro","path":"content/docs/wip.mdx"}]}],"__map":{"getting-started/setup":"content/docs/setup.mdx","getting-started/features":"content/docs/features.mdx","concepts/numbers":"content/docs/numbers.mdx","concepts/math":"content/docs/math.mdx","concepts/rgba":"content/docs/rgba.mdx","concepts/pixel-coders":"content/docs/pixel-coders.mdx","concepts/samplers":"content/docs/samplers.mdx","concepts/composition":"content/docs/composition.mdx","concepts/bitmaps":"content/docs/bitmaps.mdx","concepts/3d":"content/docs/3d.mdx","concepts/canvas":"content/docs/canvas.mdx","drawing/rectangles":"content/docs/rectangles.mdx","drawing/rounded":"content/docs/rounded.mdx","drawing/quadrilaterals":"content/docs/quadrilaterals.mdx","drawing/triangle":"content/docs/triangle.mdx","drawing/triangle-batches":"content/docs/triangle-batches.mdx","drawing/polygons":"content/docs/polygons.mdx","drawing/masks":"content/docs/masks.mdx","drawing/path-fills":"content/docs/path-fills.mdx","drawing/path-stroke":"content/docs/path-stroke.mdx","drawing/bezier-patches":"content/docs/patches.mdx","drawing/lines":"content/docs/lines.mdx","drawing/text":"content/docs/text.mdx","drawing/gradients":"content/docs/gradients.mdx","drawing/more-samplers":"content/docs/more-samplers.mdx","drawing/3d":"content/docs/draw-3d.mdx","geometry/intro":"content/docs/wip.mdx"}}}},"__N_SSG":true}